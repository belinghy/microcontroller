MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001         list p=16f877 ; list directive to define processor
                      00002         #include <p16f877.inc> ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2012 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003         __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP
                            _OFF
                      00004         #include <common.inc>
                      00001         ;extern LCD_init, LCD_clear, LCD_line2s, LCD_out, LCD_wt, delay50us, delay5ms, delayX5msm, delay
                            100ms, delayX100msm, delay1sl
                      00002 
                      00003 
                      00004         #define DEBUG
                      00005         #define NULL 0x00 ; must not change
                      00006         #define FALSE 0x00 ; must not change
                      00007         #define TRUE 0xFF ; must not change
                      00008         #define KEYPAD_DA PORTB, 1
                      00009         #define SMOTOR_S0 PORTD, 0
                      00010         #define SMOTOR_S1 PORTD, 1
                      00011         #define SMOTOR_S2 PORTE, 0
                      00012         #define SMOTOR_S3 PORTE, 1
                      00013         #define SMOTOR_EN PORTE, 2
                      00014         #define VMOTOR_C0 PORTC, 0
                      00015         #define VMOTOR_C1 PORTC, 1
                      00016         #define IRLED PORTC, 2
                      00017         #define FB_TOP PORTC, 5
                      00018         ; #define FB_BOT PORTC, 6
                      00019         #define FB_ROW4 PORTC, 7
                      00020         #define LCD_RS PORTD, 2
                      00021         #define LCD_E PORTD, 3
                      00022         #define LCD_PORT PORTD
                      00023         #define CL_POS_BIT 0
                      00024         #define CL_FN_BIT 1
                      00025         #define CL_ERR_BIT 2
                      00026         #define STOP_BUT 0x0B ; stop buttom
                      00027         #define PHASE_HDINIT 0 ; Phase 0: Hardware Initialization/Reset
                      00028         #define PHASE_RTCINIT 1 ; Phase 1: RTC Initialization/Reset
                      00029         #define PHASE_REALTIME 2 ; Phase 2: Real Time
                      00030         #define PHASE_NOREPORT 3 ; Phase 3: No Report
                      00031         #define PHASE_REPORT 4 ; Phase 4: Report Review
                      00032         #define PHASE_RUN 5 ; Phase 5: Inspection Run
                      00033         #define PHASE_FINISH 6 ; Phase 6: Inspection Finish
                      00034         ; pull-up diable, Timer0 internal clk, pos edge, 1:64
                      00035         #define INITVAL_OPTREG B'10000101'
                      00036         #define INITVAL_TRISA B'00101111'
                      00037         #define INITVAL_TRISB B'11110010'
                      00038         #define INITVAL_TRISC B'10100000' ;B'11100000'!!!!
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039         #define INITVAL_TRISD B'00000000'
                      00040         #define INITVAL_TRISE B'00000000'
                      00041         #define INITVAL_ADCON0 B'10000001' ; 32Tosc, AN0, ADC on
                      00042         #define INITVAL_ADCON1 B'00000010' ; left justified, 5 channel, 0 Vref
                      00043 ;******************CONSTANTS****************************************************
  00000009            00044 MAXLINE EQU .9 ; (max "line_num" - 1) in report phase
  00000014            00045 MAXPOS EQU .20 ; total positions = ROWS*COLS
  00000004            00046 ROWS EQU .4 ; total 4 rows to move
  00000005            00047 COLS EQU .5 ; total 5 cols in a row
  00000003            00048 MAXCLINROW EQU .3 ; max number of CLs possible in a row
  0000001E            00049 DCDOWNDELAY EQU .30 ; * 0.1s == elapse time for DC motor to drive down
  0000001C            00050 SMOTOR_STEPS EQU .28 ; * 4 == # of steps that stepper motor need to turn
  00000006            00051 SMOTOR_SPD_F EQU .6 ; speed fact: speed = 1 step / (SMOTOR_SPD_F * 5ms)
  00000050            00052 THD_CL3LED EQU .80 ; threshold to distinguish between 2 LEDs and 3LEDS
  0000001C            00053 THD_IRLED EQU .28 ; threshold for infrared reflected light
  00000005            00054 THD_BG EQU .5 ; threshold for background variation (add to light_bg)
  0000000C            00055 MAXLOG EQU .12 ; max number of log
  00000006            00056 MAXLOGBANK EQU .6 ; max number of log per bank = MAXLOG/2
  00000010            00057 LOGLENGTH EQU .16 ; length of each log entry
  00000004            00058 LIGHTAVGX EQU .4 ; number of sample light sensor reading to be averaged
                      00059 ;******************MACROS*******************************************************
                      00060 BANK0 macro
                      00061         bcf STATUS, RP0
                      00062         endm
                      00063 BANK1 macro
                      00064         bsf STATUS, RP0
                      00065         endm
                      00066 BANK00 macro
                      00067         bcf STATUS, IRP
                      00068         bcf STATUS, RP1
                      00069         bcf STATUS, RP0
                      00070         endm
                      00071         ;BANK02 macro
                      00072         ; bsf STATUS, IRP
                      00073         ; bsf STATUS, RP1
                      00074         ; bcf STATUS, RP0
                      00075         ; endm
                      00076         ;
                      00077         ;BANK03 macro
                      00078         ; bsf STATUS, IRP
                      00079         ; bsf STATUS, RP1
                      00080         ; bsf STATUS, RP0
                      00081         ; endm
                      00082         ; Affect W!
                      00083 MOVFF macro dest, orig
                      00084         movf orig, w
                      00085         movwf dest
                      00086         endm
                      00087 ; Affect W!
                      00088 MOVLF macro dest, literal
                      00089         movlw literal
                      00090         movwf dest
                      00091         endm
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00092         
  0000                00005         extern LCD_init, LCD_clear, LCD_line2, LCD_out, LCD_wt
  0000                00006         extern delay50us, delay5ms, delayX5msm, delay100ms, delayX100msm, delay1sl
                      00007 ;******************VARIABLES****************************************************
                      00008         cblock 0x20
  00000020            00009                 phase ; 0 = realtime, 1 = report, 2 = run
  00000021            00010                 report_num
  00000022            00011                 line_num
  00000023            00012                 LCDline : .17 ; 16 + null
  00000034            00013                 temp ; only local use: must be discard before calling/jumping
  00000035            00014                 temp2
  00000036            00015                 temp3
  00000037            00016                 temp4
  00000038            00017                 temp5
  00000039            00018                 temp6
  0000003A            00019                 temp7
  0000003B            00020                 arg ; argument
  0000003C            00021                 arg2
  0000003D            00022                 literal_addr
  0000003E            00023                 rowleft ; how many rows left to inspect
  0000003F            00024                 result_addr ; adress to store result of current row in "layout"
  00000040            00025                 rt_year ; realtime
  00000041            00026                 rt_month
  00000042            00027                 rt_day
  00000043            00028                 rt_hour
  00000044            00029                 rt_min
  00000045            00030                 rt_sec
  00000046            00031                 st_year ; start
  00000047            00032                 st_month
  00000048            00033                 st_day
  00000049            00034                 st_hour
  0000004A            00035                 st_min
  0000004B            00036                 st_sec
  0000004C            00037                 end_hour
  0000004D            00038                 end_min
  0000004E            00039                 end_sec
  0000004F            00040                 runtime
  00000050            00041                 cl_total
  00000051            00042                 cl_pass
  00000052            00043                 cl_fail
  00000053            00044                 layout : .20 ; result
  00000067            00045                 smotor_dir ; direction of stepper motor
  00000068            00046                 log_total ; total numbers of reports available
  00000069            00047                 log_next ; index of where next report will be written
  0000006A            00048                 arith_temp ; arithmetic temp
  0000006B            00049                 arith_temp2
  0000006C            00050                 newsec ; a new second occur (Bool from interrupt)
                      00051         endc
                      00052         cblock 0xB0
  000000B0            00053                 light_bg : 5 ; background light intensity of current row
  000000B5            00054                 light_pos : 5 ; position reflected light intensity of current row
  000000BA            00055                 light_cl : 5 ; closet light LEDs light intensity of current row
  000000BF            00056                 light_off : 5 ; closet light off light intensity of current row
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00057         endc
                      00058 
                      00059         udata_shr
0000                  00060 w_temp res 1
0001                  00061 status_temp res 1
                      00062 ;pclath_temp res 1
0002                  00063 FSR_temp res 1
0003                  00064 rt_counter res 1 ; real time counter
0004                  00065 table_temp res 1
                      00066 ;******************MACROS*******************************************************
                      00067 DIVLW macro L
                      00068         movwf arith_temp
                      00069         movlw L
                      00070         call divfn
Warning[205]: Found directive in column 1. (endm)
                      00071 endm
                      00072 
                      00073 MODLW macro L
                      00074         movwf arith_temp
                      00075         movlw L
                      00076         call divfn
                      00077         movf arith_temp, w
Warning[205]: Found directive in column 1. (endm)
                      00078 endm
                      00079 
                      00080 MULLW macro L
                      00081         movwf arith_temp
                      00082         movlw L
                      00083         call mulfn
Warning[205]: Found directive in column 1. (endm)
                      00084 endm
                      00085 
                      00086 COPY_STRING macro string_table
                      00087         movlw string_table
                      00088         call copystring
Warning[205]: Found directive in column 1. (endm)
                      00089 endm
                      00090 
                      00091 COPY_LAYOUT macro rownum
                      00092         movlw rownum
                      00093         call copylayout
Warning[205]: Found directive in column 1. (endm)
                      00094 endm
                      00095 
                      00096 COPY_DEC1 macro decnumber
                      00097         movf decnumber, w
                      00098         movwf arg
                      00099         movlw 0x01
                      00100         movwf arg2
                      00101         call copydec
Warning[205]: Found directive in column 1. (endm)
                      00102 endm
                      00103 
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00104 COPY_DEC2 macro decnumber
                      00105         movf decnumber, w
                      00106         movwf arg
                      00107         movlw 0x02
                      00108         movwf arg2
                      00109         call copydec
Warning[205]: Found directive in column 1. (endm)
                      00110 endm
                      00111 
                      00112 COPY_DEC3 macro decnumber
                      00113         movf decnumber, w
                      00114         movwf arg
                      00115         movlw 0x03
                      00116         movwf arg2
                      00117         call copydec
Warning[205]: Found directive in column 1. (endm)
                      00118 endm
                      00119 
                      00120 TABLE macro
                      00121         local tablename
                      00122         movwf table_temp
                      00123         movlw HIGH tablename
                      00124         movwf PCLATH
                      00125         movf table_temp, w
                      00126         addlw LOW tablename
                      00127         btfsc STATUS, C
                      00128         incf PCLATH, f
                      00129         movwf PCL
                      00130         tablename
Warning[205]: Found directive in column 1. (endm)
                      00131 endm
                      00132 
                      00133 STORE_LIGHT macro addr
                      00134         movlw addr
                      00135         call lightsensor
Warning[205]: Found directive in column 1. (endm)
                      00136 endm
                      00137 
                      00138 IRLED_ON macro
                      00139         movlw 0x01
                      00140         call ledcontrol
Warning[205]: Found directive in column 1. (endm)
                      00141 endm
                      00142 
                      00143 IRLED_OFF macro
                      00144         movlw 0x00
                      00145         call ledcontrol
Warning[205]: Found directive in column 1. (endm)
                      00146 endm
                      00147 
                      00148 CALC_POS macro threshold
                      00149         movwf temp
                      00150         movlw threshold
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151         movwf temp4
                      00152         call calcpos
Warning[205]: Found directive in column 1. (endm)
                      00153 endm
                      00154 
                      00155 PRINT_DOT macro
                      00156         MOVLF FSR, LCDline
                      00157         COPY_STRING str_dot
                      00158         call writeline
Warning[205]: Found directive in column 1. (endm)
                      00159 endm
                      00160 
                      00161 ;*******************************************************************************
                      00162 ;*******************************************************************************
                      00163         org 0x0000
0000   2???           00164         goto main
                      00165 
                      00166         org 0x0004
0004   2???           00167         goto interrupt
                      00168 
                      00169     org 0x0005 ; make sure literal table is in first 256 lines
0005                  00170 literal
0005   00B4           00171         movwf temp
0006   018A           00172         clrf PCLATH
0007   0834           00173         movf temp, w
0008   0082           00174         movwf PCL
                      00175         ; max length 16 dt "0123456789ABCDEF", 0
0009   3449 344E 3449 00176 str_init dt "INITIALIZING...", 0
       3454 3449 3441 
       344C 3449 345A 
       3449 344E 3447 
       342E 342E 342E 
       3400 
0019   344E 344F 3420 00177 str_noreport dt "NO REPORT", 0
       3452 3445 3450 
       344F 3452 3454 
       3400 
0023   3445 344E 3454 00178 str_enterymd dt "ENTER 20YYMMDD:",0
       3445 3452 3420 
       3432 3430 3459 
       3459 344D 344D 
       3444 3444 343A 
       3400 
0033   3445 344E 3454 00179 str_enterhms dt "ENTER hhmmss:", 0
       3445 3452 3420 
       3468 3468 346D 
       346D 3473 3473 
       343A 3400 
0041   3432 3430 3400 00180 str_yearhead dt "20", 0 ; all years like 20XX
0044   342D 3400      00181 str_dash dt "-", 0
0046   343A 3400      00182 str_colon dt ":", 0
0048   344C 344F 3447 00183 str_entry dt "LOG ENTRY: ",0
       3420 3445 344E 
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3454 3452 3459 
       343A 3420 3400 
0054   3453 3454 3441 00184 str_start dt "START: ", 0
       3452 3454 343A 
       3420 3400 
005C   3446 3449 344E 00185 str_finish dt "FINISH: ", 0
       3449 3453 3448 
       343A 3420 3400 
0065   3452 3455 344E 00186 str_runtime dt "RUNTIME: ", 0
       3454 3449 344D 
       3445 343A 3420 
       3400 
006F   3473 3400      00187 str_s dt "s", 0 ; i.e. second
0071   3454 344F 3454 00188 str_total dt "TOTAL: ", 0
       3441 344C 343A 
       3420 3400 
0079   3450 3441 3453 00189 str_pass dt "PASS: ", 0
       3453 343A 3420 
       3400 
0080   3420 3446 3441 00190 str_fail dt " FAIL: ", 0
       3449 344C 343A 
       3420 3400 
0088   344C 3441 3459 00191 str_layout dt "LAYOUT:", 0
       344F 3455 3454 
       343A 3400 
0090   3420 3454 344F 00192 str_layout1 dt " TOP 1 ", 0
       3450 3420 3431 
       3420 3400 
0098   3420 3432 3420 00193 str_layout2 dt " 2 ", 0
       3400 
009C   3420 3433 3420 00194 str_layout3 dt " 3 ", 0
       3400 
00A0   3420 3442 344F 00195 str_layout4 dt " BOT 4 ", 0
       3454 3420 3434 
       3420 3400 
00A8   3452 3455 344E 00196 str_running dt "RUNNING", 0
       344E 3449 344E 
       3447 3400 
00B0   342E 3400      00197 str_dot dt ".", 0
00B2   3449 344E 3453 00198 str_insp_fin dt "INSPECTION FIN", 0
       3450 3445 3443 
       3454 3449 344F 
       344E 3420 3446 
       3449 344E 3400 
00C1   3445 344D 3445 00199 str_emerstop dt "EMERGENCY STOP", 0
       3452 3447 3445 
       344E 3443 3459 
       3420 3453 3454 
       344F 3450 3400 
00D0   3400           00200 str_null dt 0
                      00201 ; corresponds to the layout byte
00D1   3458 3446 3446 00202 char_layout dt "XFFPXFFP" ;"XF2P4567" ; "XFEPEEEE"
       3450 3458 3446 
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3446 3450 
                      00203 ; corresponds to keypad
00D9   3431 3432 3433 00204 char_keynumber dt "123", 0, "456", 0, "789", 0, 0, "0", 0, 0
       3400 3434 3435 
       3436 3400 3437 
       3438 3439 3400 
       3400 3430 3400 
       3400 
00E9   342F 3400      00205 char_slash dt "/", 0
                      00206 ;????!!!!copy spaceX function
                      00207 
00EB                  00208 main
00EB   2???           00209         call init
00EC                  00210 keypoll
00EC   1886           00211         btfsc KEYPAD_DA
00ED   2???           00212         call keyresp
00EE   2???           00213         call keypad_timeout
00EF   2???           00214         goto keypoll
                      00215 
00F0                  00216 interrupt
00F0   00??           00217         movwf w_temp ; save W
00F1   0E03           00218         swapf STATUS, w ; save STATUS, note swapf will not affect STATUS
                      00219         BANK00
00F2   1383               M         bcf STATUS, IRP
00F3   1303               M         bcf STATUS, RP1
00F4   1283               M         bcf STATUS, RP0
00F5   00??           00220         movwf status_temp
                      00221         ; movf PCLATH, w ; save page information
                      00222         ; movwf pclath_temp
                      00223         ; clrf PCLATH
00F6   0804           00224         movf FSR, w ; save FSR
00F7   00??           00225         movwf FSR_temp
                      00226 
                      00227         ; Timer0 Interrupt Handle
                      00228         ; T0IE always on, no test
00F8   1D0B           00229         btfss INTCON, T0IF
00F9   2???           00230         goto int_tmr0_skip
00FA   0A??           00231         incf rt_counter, f
00FB   08??           00232         movf rt_counter, w ; test with 98h, correponds to 996,147.2us
00FC   3C98           00233         sublw 0x98
00FD   1D03           00234         btfss STATUS, Z
00FE   2???           00235         goto int_tmr0_end ; rt_counter <> 98h
00FF   01??           00236         clrf rt_counter ; rt_counter == 98h
0100   3045           00237         movlw rt_sec
0101   2???           00238         call addsec
0102   3042           00239         movlw rt_day
0103   1803           00240         btfsc STATUS, C
0104   2???           00241         call addday ; addday if carry from addsec
                      00242         MOVLF newsec, TRUE
0105   30FF               M         movlw 0xFF
0106   00EC               M         movwf newsec
0107                  00243 int_tmr0_end
0107   110B           00244         bcf INTCON, T0IF
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0108                  00245 int_tmr0_skip
                      00246         ; Keypad (PORTB) Change Interrupt
0108   1D8B           00247         btfss INTCON, RBIE ; interrept must be enabled first
0109   2???           00248         goto int_rb_skip
010A   1C0B           00249         btfss INTCON, RBIF
010B   2???           00250         goto int_rb_skip
010C   0E06           00251         swapf PORTB, w ; test PORTB<7:4> against stop button
010D   390F           00252         andlw 0x0F
010E   3C0B           00253         sublw STOP_BUT
010F   1D03           00254         btfss STATUS, Z
0110   2???           00255         goto int_rb_end
                      00256         ; Emergency Stop!!!!
0111   1107           00257         bcf IRLED ; turn off IRLEDs
0112   1007           00258         bcf VMOTOR_C0 ; turn off v motor
0113   1087           00259         bcf VMOTOR_C1
0114   1109           00260         bcf SMOTOR_EN ; turn off s motor
                      00261         MOVLF FSR, LCDline ; display emergency stop
0115   3023               M         movlw LCDline
0116   0084               M         movwf FSR
                      00262         COPY_STRING str_emerstop
0117   30??               M         movlw str_emerstop
0118   2???               M         call copystring
0119   2???           00263         call LCD_clear ; clear LCD display
011A   2???           00264         call writeline
011B   2???           00265         call LCD_out
Warning[207]: Found label after column 1. (stop)
011C   2???           00266         stop goto stop ; hang the program
011D                  00267 int_rb_end
011D   100B           00268         bcf INTCON, RBIF
011E                  00269 int_rb_skip
011E   08??           00270         movf FSR_temp, w ; restore FSR
011F   0084           00271         movwf FSR
                      00272         ; movf pclath_temp, w ; restore page information
                      00273         ; movwf PCLATH
0120   0E??           00274         swapf status_temp, w ; restore STATUS
0121   0083           00275         movwf STATUS
0122   0E??           00276         swapf w_temp, f ; restore W, not affecting STATUS
0123   0E??           00277         swapf w_temp, w
Warning[203]: Found opcode in column 1. (retfie)
0124   0009           00278 retfie
                      00279 
0125                  00280 init
0125   2???           00281         call init_pic
0126   2???           00282         call reset_software
0127   2???           00283         call reset_hardware
0128   2???           00284         call reset_realtime
0129   0181           00285         clrf TMR0 ; start timing
012A   168B           00286         bsf INTCON, T0IE
012B   178B           00287         bsf INTCON, GIE
012C   3002           00288         movlw PHASE_REALTIME
012D   00A0           00289         movwf phase
012E   2???           00290         call display
012F   0008           00291         return
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00292 
0130                  00293 init_pic
                      00294 ; Interrupt Initialization
                      00295 ; Disable Global interrupt, diable peripheral interrupt, enable timer0 and
                      00296 ; PORTB interrupton change (keypad), diable RB0 interrupt
                      00297 ; #define INITVAL_INTCON B'00101000'
                      00298 ; movlw INITVAL_INTCON
Warning[203]: Found opcode in column 1. (clrf)
0130   018B           00299 clrf INTCON
                      00300 ;
                      00301 ;clrf SSPBUF
                      00302 ;BANK1
                      00303 ;clrf TXSTA
                      00304 ;clrf PIE1
                      00305 ;clrf PIE2
                      00306 ; Timer0 Initialization
                      00307         BANK0
0131   1283               M         bcf STATUS, RP0
0132   0181           00308         clrf TMR0
0133   01??           00309         clrf rt_counter
                      00310         BANK1
0134   1683               M         bsf STATUS, RP0
0135   3085           00311         movlw INITVAL_OPTREG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0136   0081           00312         movwf OPTION_REG
                      00313         ; PORT Initialzation
                      00314         ; BANK1
0137   302F           00315         movlw INITVAL_TRISA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0138   0085           00316         movwf TRISA
0139   30F2           00317         movlw INITVAL_TRISB
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
013A   0086           00318         movwf TRISB
013B   30A0           00319         movlw INITVAL_TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
013C   0087           00320         movwf TRISC
013D   3000           00321         movlw INITVAL_TRISD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
013E   0088           00322         movwf TRISD
013F   3000           00323         movlw INITVAL_TRISE
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0140   0089           00324         movwf TRISE
                      00325 
                      00326         ; Analog to Digital Convertor Initialization
                      00327         ; BANK1
0141   3002           00328         movlw INITVAL_ADCON1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0142   009F           00329         movwf ADCON1
                      00330         BANK0
0143   1283               M         bcf STATUS, RP0
0144   3081           00331         movlw INITVAL_ADCON0
0145   009F           00332         movwf ADCON0
0146   0008           00333         return
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00334 
                      00335 ;*******************************************************************************
                      00336 ;"reset_software": Software Reset/Initialization Function
                      00337 ; Func: Reset all variables
                      00338 ; Input: None
                      00339 ; Output: phase, report_num, line_num, log_total, log_next, smotor_dir
                      00340 ; Affect: STATUS
                      00341 ;*******************************************************************************
0147                  00342 reset_software
0147   3000           00343         movlw PHASE_HDINIT
0148   00A0           00344         movwf phase
0149   01A1           00345         clrf report_num
014A   01A2           00346         clrf line_num
014B   01E8           00347         clrf log_total
014C   01E9           00348         clrf log_next
                      00349         MOVLF smotor_dir, 1
014D   3001               M         movlw 1
014E   00E7               M         movwf smotor_dir
014F   0008           00350         return
                      00351 
                      00352 ;*******************************************************************************
                      00353 ;"reset_hardware": Hardware Reset/Initialization Function
                      00354 ; Func: Reset/Initialize hardwares to their default position:
                      00355 ; Pos Sensor Off, V DC Motor at top, S Motor at "Row 1",
                      00356 ; LCD, (RTC)
                      00357 ; Input: None
                      00358 ; Output: PORTA, PORTB, PORTC, PORTD, PORTE
                      00359 ; Affect: W, STATUS, temp, delaytemp, delaycount, delaytemp2,
                      00360 ; delaycount2, delaytemp3, delaycount3
                      00361 ;*******************************************************************************
0150                  00362 reset_hardware
                      00363         ; PORT Reset/Initialization
                      00364         ; BANK0
0150   0185           00365         clrf PORTA ; RA4 (Reserved) output 0
0151   0186           00366         clrf PORTB ; RB0, 2, 3 (Reserved) output 0
0152   0187           00367         clrf PORTC ; VMOTOR disable, LED off
0153   0188           00368         clrf PORTD ; clear S0, S1 of SMOTOR
0154   0189           00369         clrf PORTE ; SMOTOR disable, clear S2, S3 of SMOTOR
                      00370         ; LCD Reset/Initialization
0155   2???           00371         call LCD_init
0156   2???           00372         call display
                      00373         ; Position Sensor(IRLED) Reset/Initialization: all off
                      00374         ; Already done with PORT reset
                      00375         ; Vertical DC Motor Reset/Initialization: move to top
0157   2???           00376         call moveup
                      00377         ; Stepper Motor Reset/Initialization: move to "Row 4"
0158   01E7           00378         clrf smotor_dir
0159   2???           00379         call advancerow ; 4 advance row to ensure to init pos
015A   2???           00380         call advancerow
015B   2???           00381         call advancerow
015C   2???           00382         call advancerow
                      00383         MOVLF smotor_dir, 1
015D   3001               M         movlw 1
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

015E   00E7               M         movwf smotor_dir
015F   0008           00384         return
                      00385 
                      00386 ;*******************************************************************************
                      00387 ;"reset_realtime": Real Time Clock Reset/Initialization Function
                      00388 ; Func: Reset Real Time Clock
                      00389 ; Input: None (from Keypad)
                      00390 ; Output: rt_year, rt_month, rt_day, rt_hour, rt_min, rt_sec
                      00391 ; Affect:
                      00392 ;*******************************************************************************
Warning[207]: Found label after column 1. (reset_realtime)
0160                  00393         reset_realtime
0160   3001           00394         movlw PHASE_RTCINIT
0161   00A0           00395         movwf phase
0162   01C0           00396         clrf rt_year
0163   01C1           00397         clrf rt_month
0164   01C2           00398         clrf rt_day
0165   01C3           00399         clrf rt_hour
0166   01C4           00400         clrf rt_min
0167   01C5           00401         clrf rt_sec
                      00402         ; YYMMDD
0168   2???           00403         call LCD_clear ; clear LCD display
                      00404         MOVLF FSR, LCDline
0169   3023               M         movlw LCDline
016A   0084               M         movwf FSR
                      00405         COPY_STRING str_enterymd
016B   30??               M         movlw str_enterymd
016C   2???               M         call copystring
016D   2???           00406         call writeline
016E   2???           00407         call LCD_line2
                      00408         MOVLF FSR, LCDline
016F   3023               M         movlw LCDline
0170   0084               M         movwf FSR
                      00409         COPY_STRING str_yearhead
0171   30??               M         movlw str_yearhead
0172   2???               M         call copystring
0173   2???           00410         call writeline
0174   01B6           00411         clrf temp3 ; number of valid numbers entered
0175                  00412 reset_rt_ymd
0175   1C86           00413         btfss KEYPAD_DA ; Wait until data is available from the keypad
0176   2???           00414         goto reset_rt_ymd
0177   0E06           00415         swapf PORTB, W ; Read PortB<7:4> into W<3:0>
0178   390F           00416         andlw 0x0F
0179   3E??           00417         addlw char_keynumber
017A   2???           00418         call literal ; Convert keypad value to LCD character (value is still held in W)
017B   3E00           00419         addlw 0x00
017C   1903           00420         btfsc STATUS, Z ; test for valid input (number)
017D   2???           00421         goto reset_rt_ymdrl
017E   00B5           00422         movwf temp2 ; hold the value
017F   2???           00423         call LCD_wt ; Write the value in W to LCD
0180   3030           00424         movlw 0x30
0181   02B5           00425         subwf temp2, f ; convert ASCII to number
0182   0836           00426         movf temp3, w
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00427         TABLE ; switch (temp)
  0000                    M         local tablename
0183   00??               M         movwf table_temp
0184   30??               M         movlw HIGH tablename
0185   008A               M         movwf PCLATH
0186   08??               M         movf table_temp, w
0187   3E??               M         addlw LOW tablename
0188   1803               M         btfsc STATUS, C
0189   0A8A               M         incf PCLATH, f
018A   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
018B                      M         tablename
018B   2???           00428         goto reset_rt_ymd0
018C   2???           00429         goto reset_rt_ymd1
018D   2???           00430         goto reset_rt_ymd2
018E   2???           00431         goto reset_rt_ymd3
018F   2???           00432         goto reset_rt_ymd4
0190   2???           00433         goto reset_rt_ymd5
0191                  00434 reset_rt_ymd0
0191   0835           00435         movf temp2, w
                      00436         MULLW .10
0192   00EA               M         movwf arith_temp
0193   300A               M         movlw .10
0194   2???               M         call mulfn
0195   07C0           00437         addwf rt_year, f
0196   0AB6           00438         incf temp3, f
0197   2???           00439         goto reset_rt_ymdrl
0198                  00440 reset_rt_ymd1
0198   0835           00441         movf temp2, w
0199   07C0           00442         addwf rt_year, f
019A   0AB6           00443         incf temp3, f
019B   2???           00444         goto reset_rt_ymdrl
019C                  00445 reset_rt_ymd2
019C   0835           00446         movf temp2, w
                      00447         MULLW .10
019D   00EA               M         movwf arith_temp
019E   300A               M         movlw .10
019F   2???               M         call mulfn
01A0   07C1           00448         addwf rt_month, f
01A1   0AB6           00449         incf temp3, f
01A2   2???           00450         goto reset_rt_ymdrl
01A3                  00451 reset_rt_ymd3
01A3   0835           00452         movf temp2, w
01A4   07C1           00453         addwf rt_month, f
01A5   0AB6           00454         incf temp3, f
01A6   2???           00455         goto reset_rt_ymdrl
01A7                  00456 reset_rt_ymd4
01A7   0835           00457         movf temp2, w
                      00458         MULLW .10
01A8   00EA               M         movwf arith_temp
01A9   300A               M         movlw .10
01AA   2???               M         call mulfn
01AB   07C2           00459         addwf rt_day, f
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01AC   0AB6           00460         incf temp3, f
01AD   2???           00461         goto reset_rt_ymdrl
01AE                  00462 reset_rt_ymd5
01AE   0835           00463         movf temp2, w
01AF   07C2           00464         addwf rt_day, f
01B0   0AB6           00465         incf temp3, f
01B1                  00466 reset_rt_ymdrl
01B1   1886           00467         btfsc KEYPAD_DA ; Wait until key is released
01B2   2???           00468         goto reset_rt_ymdrl
01B3   3006           00469         movlw 0x06 ; 6 chars entered
01B4   0236           00470         subwf temp3, w
01B5   1C03           00471         btfss STATUS, C
01B6   2???           00472         goto reset_rt_ymd
                      00473         ; hhmmss
01B7   2???           00474         call LCD_clear ; clear LCD display
                      00475         MOVLF FSR, LCDline
01B8   3023               M         movlw LCDline
01B9   0084               M         movwf FSR
                      00476         COPY_STRING str_enterhms
01BA   30??               M         movlw str_enterhms
01BB   2???               M         call copystring
01BC   2???           00477         call writeline
01BD   2???           00478         call LCD_line2
01BE   01B6           00479         clrf temp3 ; number of valid numbers entered
01BF                  00480 reset_rt_hms
01BF   1C86           00481         btfss KEYPAD_DA ; Wait until data is available from the keypad
01C0   2???           00482         goto reset_rt_hms
01C1   0E06           00483         swapf PORTB, W ; Read PortB<7:4> into W<3:0>
01C2   390F           00484         andlw 0x0F
01C3   3E??           00485         addlw char_keynumber
01C4   2???           00486         call literal ; Convert keypad value to LCD character (value is still held in W)
01C5   3E00           00487         addlw 0x00
01C6   1903           00488         btfsc STATUS, Z ; test for valid input (number)
01C7   2???           00489         goto reset_rt_hmsrl
01C8   00B5           00490         movwf temp2 ; hold the value
01C9   2???           00491         call LCD_wt ; Write the value in W to LCD
01CA   3030           00492         movlw 0x30
01CB   02B5           00493         subwf temp2, f ; convert ASCII to number
01CC   0836           00494         movf temp3, w
                      00495         TABLE ; switch (temp)
  0000                    M         local tablename
01CD   00??               M         movwf table_temp
01CE   30??               M         movlw HIGH tablename
01CF   008A               M         movwf PCLATH
01D0   08??               M         movf table_temp, w
01D1   3E??               M         addlw LOW tablename
01D2   1803               M         btfsc STATUS, C
01D3   0A8A               M         incf PCLATH, f
01D4   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
01D5                      M         tablename
01D5   2???           00496         goto reset_rt_hms0
01D6   2???           00497         goto reset_rt_hms1
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01D7   2???           00498         goto reset_rt_hms2
01D8   2???           00499         goto reset_rt_hms3
01D9   2???           00500         goto reset_rt_hms4
01DA   2???           00501         goto reset_rt_hms5
01DB                  00502 reset_rt_hms0
01DB   0835           00503         movf temp2, w
                      00504         MULLW .10
01DC   00EA               M         movwf arith_temp
01DD   300A               M         movlw .10
01DE   2???               M         call mulfn
01DF   07C3           00505         addwf rt_hour, f
01E0   0AB6           00506         incf temp3, f
01E1   2???           00507         goto reset_rt_hmsrl
01E2                  00508 reset_rt_hms1
01E2   0835           00509         movf temp2, w
01E3   07C3           00510         addwf rt_hour, f
01E4   0AB6           00511         incf temp3, f
01E5   2???           00512         goto reset_rt_hmsrl
01E6                  00513 reset_rt_hms2
01E6   0835           00514         movf temp2, w
                      00515         MULLW .10
01E7   00EA               M         movwf arith_temp
01E8   300A               M         movlw .10
01E9   2???               M         call mulfn
01EA   07C4           00516         addwf rt_min, f
01EB   0AB6           00517         incf temp3, f
01EC   2???           00518         goto reset_rt_hmsrl
01ED                  00519 reset_rt_hms3
01ED   0835           00520         movf temp2, w
01EE   07C4           00521         addwf rt_min, f
01EF   0AB6           00522         incf temp3, f
01F0   2???           00523         goto reset_rt_hmsrl
01F1                  00524 reset_rt_hms4
01F1   0835           00525         movf temp2, w
                      00526         MULLW .10
01F2   00EA               M         movwf arith_temp
01F3   300A               M         movlw .10
01F4   2???               M         call mulfn
01F5   07C5           00527         addwf rt_sec, f
01F6   0AB6           00528         incf temp3, f
01F7   2???           00529         goto reset_rt_hmsrl
Warning[207]: Found label after column 1. (reset_rt_hms5)
01F8                  00530         reset_rt_hms5
01F8   0835           00531         movf temp2, w
01F9   07C5           00532         addwf rt_sec, f
01FA   0AB6           00533         incf temp3, f
Warning[207]: Found label after column 1. (reset_rt_hmsrl)
01FB                  00534         reset_rt_hmsrl
01FB   1886           00535         btfsc KEYPAD_DA ; Wait until key is released
01FC   2???           00536         goto reset_rt_hmsrl
01FD   3006           00537         movlw 0x06 ; 6 chars entered
01FE   0236           00538         subwf temp3, w
01FF   1C03           00539         btfss STATUS, C
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0200   2???           00540         goto reset_rt_hms
0201   0008           00541         return
                      00542 
                      00543 ;*******************************************************************************
                      00544 ; "keyresp": Key Response Function
                      00545 ; Func: Display information or run an inspection according to the
                      00546 ; pressed key
                      00547 ; Input: W: Index of the key that being pressed
                      00548 ; Output: All actions
                      00549 ; Affect:
                      00550 ;*******************************************************************************
0202                  00551 keyresp
0202   0E06           00552         swapf PORTB, w
0203   390F           00553         andlw 0x0F
                      00554         TABLE
  0000                    M         local tablename
0204   00??               M         movwf table_temp
0205   30??               M         movlw HIGH tablename
0206   008A               M         movwf PCLATH
0207   08??               M         movf table_temp, w
0208   3E??               M         addlw LOW tablename
0209   1803               M         btfsc STATUS, C
020A   0A8A               M         incf PCLATH, f
020B   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
020C                      M         tablename
                      00555 ;keyresp_switch_table
020C   2???           00556         goto realtime ; keypressed = 0 "1" = "real time"
020D   2???           00557         goto report ; keypressed = 1 "2" = "report"
020E   2???           00558         goto unused_key ; keypressed = 2 "3"
020F   2???           00559         goto unused_key ; keypressed = 3 "A"
0210   2???           00560         goto unused_key ; keypressed = 4 "4"
0211   2???           00561         goto unused_key ; keypressed = 5 "5"
0212   2???           00562         goto unused_key ; keypressed = 6 "6"
0213   2???           00563         goto unused_key ; keypressed = 7 "B"
0214   2???           00564         goto scroll_up ; keypressed = 8 "7" = "scroll up"
0215   2???           00565         goto report_last ; keypressed = 9 "8" = "report last"
0216   2???           00566         goto unused_key ; keypressed = A "9"
0217   2???           00567         goto stoprun ; keypressed = B "C" = "stop"
0218   2???           00568         goto scroll_down ; keypressed = C "*" = "scroll down"
0219   2???           00569         goto report_next ; keypressed = D "0" = "scroll up"
021A   2???           00570         goto unused_key ; keypressed = E "#"
021B   2???           00571         goto startrun ; keypressed = F "D" = "run"
021C                  00572 unused_key
021C                  00573 keyresp_next
021C                  00574 wait_release
021C   1886           00575         btfsc KEYPAD_DA ; Wait until key is released????
021D   2???           00576         goto wait_release ; !!!!!!!!!!time
021E   2???           00577         call display
                      00578         ; reset timeout!!!!!!!!!!
021F   0008           00579         return
                      00580 
0220                  00581 realtime
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0220   3002           00582         movlw PHASE_REALTIME
0221   00A0           00583         movwf phase
0222   01A2           00584         clrf line_num
0223   2???           00585         goto keyresp_next
0224                  00586 report
0224   3004           00587         movlw PHASE_REPORT ; assuem log_total <> 0
0225   08E8           00588         movf log_total, f
0226   1903           00589         btfsc STATUS, Z
0227   3003           00590         movlw PHASE_NOREPORT ; log_total == 0, no report
0228   00A0           00591         movwf phase
0229   01A2           00592         clrf line_num
022A   2???           00593         goto keyresp_next
022B                  00594 report_last
                      00595 ; !!!! some ideas: must in REPORT phase; no change in line_num if at last report;
                      00596 ; do not go through report; if enter from other phase same fn to report;
                      00597 ; display report# and can go across upper/lower limit
022B   08E8           00598         movf log_total, f
022C   1903           00599         btfsc STATUS, Z
022D   2???           00600         goto report ; log_total == 0, no report!!!!
                      00601         ; lower bound = (log_next - log_total + MAXLOG) MOD MAXLOG
022E   0868           00602         movf log_total, w ; get lower bound
022F   0269           00603         subwf log_next, w
0230   3E0C           00604         addlw MAXLOG
                      00605         MODLW MAXLOG
0231   00EA               M         movwf arith_temp
0232   300C               M         movlw MAXLOG
0233   2???               M         call divfn
0234   086A               M         movf arith_temp, w
0235   0221           00606         subwf report_num, w
0236   1903           00607         btfsc STATUS, Z
0237   2???           00608         goto report ; current report at lower bound!!!!"This is the last report"!!!!
0238   0321           00609         decf report_num, w ; get last report
0239   3E0C           00610         addlw MAXLOG ; make sure report_num between 0 and MAXLOG - 1
                      00611         MODLW MAXLOG
023A   00EA               M         movwf arith_temp
023B   300C               M         movlw MAXLOG
023C   2???               M         call divfn
023D   086A               M         movf arith_temp, w
023E   00A1           00612         movwf report_num
023F   2???           00613         call readlog
0240   2???           00614         goto report
0241                  00615 report_next
0241   08E8           00616         movf log_total, f
0242   1903           00617         btfsc STATUS, Z
0243   2???           00618         goto report ; log_total == 0, no report!!!!
                      00619         ; upper bound = (log_next - 1 + MAXLOG) MOD MAXLOG
0244   0369           00620         decf log_next, w ; get upper bound
0245   3E0C           00621         addlw MAXLOG
                      00622         MODLW MAXLOG
0246   00EA               M         movwf arith_temp
0247   300C               M         movlw MAXLOG
0248   2???               M         call divfn
0249   086A               M         movf arith_temp, w
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

024A   0221           00623         subwf report_num, w
024B   1903           00624         btfsc STATUS, Z
024C   2???           00625         goto report ; current report at upper bound!!!!
024D   0A21           00626         incf report_num, w ; get next report
                      00627         MODLW MAXLOG ; make sure report_num between 0 and MAXLOG - 1
024E   00EA               M         movwf arith_temp
024F   300C               M         movlw MAXLOG
0250   2???               M         call divfn
0251   086A               M         movf arith_temp, w
0252   00A1           00628         movwf report_num
0253   2???           00629         call readlog
0254   2???           00630         goto report
0255                  00631 scroll_up
0255   3004           00632         movlw PHASE_REPORT ; test phase == PHASE_REPORT
0256   0220           00633         subwf phase, w
0257   1D03           00634         btfss STATUS, Z
0258   2???           00635         goto keyresp_next ; phase <> PHASE_REPORT, do nothing
0259   08A2           00636         movf line_num, f ; phase == PHASE_REPORT, test line_num == 0
025A   1D03           00637         btfss STATUS, Z
025B   03A2           00638         decf line_num, f ; line_num <> 0, decrease line_num (scroll up)
025C   2???           00639         goto keyresp_next
025D                  00640 scroll_down
025D   3004           00641         movlw PHASE_REPORT ; test phase == PHASE_REPORT
025E   0220           00642         subwf phase, w
025F   1D03           00643         btfss STATUS, Z
0260   2???           00644         goto keyresp_next ; phase <> PHASE_REPORT, do nothing
0261   3009           00645         movlw MAXLINE ; phase == PHASE_REPORT, test line_num == MAXLINE????
0262   0222           00646         subwf line_num, w
0263   1D03           00647         btfss STATUS, Z
0264   0AA2           00648         incf line_num, f ; line_num <> MAXLINE, increase line_num (scroll down)
0265   2???           00649         goto keyresp_next
0266                  00650 startrun
0266   3005           00651         movlw PHASE_RUN
0267   00A0           00652         movwf phase
0268   01A2           00653         clrf line_num
                      00654         ;!!!! call display
0269   2???           00655         call LCD_clear ; clear LCD display
                      00656         MOVLF FSR, LCDline
026A   3023               M         movlw LCDline
026B   0084               M         movwf FSR
                      00657         COPY_STRING str_running
026C   30??               M         movlw str_running
026D   2???               M         call copystring
026E   2???           00658         call writeline
026F   2???           00659         call run
                      00660         MOVLF phase, PHASE_FINISH
0270   3006               M         movlw 6
0271   00A0               M         movwf phase
0272   01A2           00661         clrf line_num
0273   2???           00662         call display
                      00663         ; call delay1sl
                      00664         MOVLF phase, PHASE_REPORT
0274   3004               M         movlw 4
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0275   00A0               M         movwf phase
0276   01A2           00665         clrf line_num
0277   2???           00666         call display
                      00667         ; assume run time is very long, key has been released
0278   0008           00668         return
0279                  00669 stoprun
0279   2???           00670         goto keyresp_next
                      00671 
                      00672 ;*******************************************************************************
                      00673 ;"keypad_timeout":
                      00674 ; Func:
                      00675 ; Input:
                      00676 ; Output:
                      00677 ; Affect:
                      00678 ;*******************************************************************************
027A                  00679 keypad_timeout
027A   08EC           00680         movf newsec, f
027B   1903           00681         btfsc STATUS, Z
027C   2???           00682         goto kp_to_nonewsec ; newsec == 0(FALSE), skip
027D   2???           00683         call display ; newsec == TRUE, display the new sec
027E   01EC           00684         clrf newsec
027F                  00685 kp_to_nonewsec
                      00686 ; SLEEP test goes here!!!!
027F   0008           00687         return
                      00688 
                      00689 ;*******************************************************************************
                      00690 ; "display": Display Function (User Interface)
                      00691 ; Func: First make up the content to be displayed into LCDline
                      00692 ; according to phase and line_num, then print the string
                      00693 ; to the LCD
                      00694 ; Input: phase, line_num
                      00695 ; Output: None (to LCD)
                      00696 ; Affect: W, STATUS, FSR, temp2, table_temp, arg, arg2,
                      00697 ; delaytemp, delaycount, lcd_temp
                      00698 ;*******************************************************************************
0280                  00699 display
                      00700 ; run phase does not use general display function
0280   0820           00701         movf phase, w
0281   3C05           00702         sublw PHASE_RUN
0282   1903           00703         btfsc STATUS, Z
0283   0008           00704         return
0284   0822           00705         movf line_num, w ; current line#
0285   2???           00706         call makeline
0286   2???           00707         call LCD_clear ; clear LCD display
0287   2???           00708         call writeline
0288   0A22           00709         incf line_num, w ; next line# in W, but not inc line#
0289   2???           00710         call makeline
028A   2???           00711         call LCD_line2
028B   2???           00712         call writeline
028C   2???           00713         call LCD_out ; move the cursor out of screen
028D   0008           00714         return
                      00715 ;*******************************************************************************
                      00716 ; "makeline": Displayable Line Make & Copy Function
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00717 ; Func: Make lines to be displayed according to the phase and
                      00718 ; line number (W), copy it to the LCDline array
                      00719 ; Input: W = line # to be displayed, phase
                      00720 ; Output: FSR = point to the null termination of the line made &
                      00721 ; copied, (Copied line in LCDline)
                      00722 ; Affect: W, STATUS, temp2, temp3, table_temp, arg, arg2, literal_addr
                      00723 ;*******************************************************************************
028E                  00724 makeline
028E   00B5           00725         movwf temp2 ; line#
                      00726         MOVLF FSR, LCDline ; start from LCDline
028F   3023               M         movlw LCDline
0290   0084               M         movwf FSR
0291   0820           00727         movf phase, w
                      00728         TABLE ; switch (phase)
  0000                    M         local tablename
0292   00??               M         movwf table_temp
0293   30??               M         movlw HIGH tablename
0294   008A               M         movwf PCLATH
0295   08??               M         movf table_temp, w
0296   3E??               M         addlw LOW tablename
0297   1803               M         btfsc STATUS, C
0298   0A8A               M         incf PCLATH, f
0299   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
029A                      M         tablename
029A   2???           00729         goto ML_hdinit ; phase == 0
029B   2???           00730         goto ML_rtcinit ; phase == 1
029C   2???           00731         goto ML_realtime ; phase == 2
029D   2???           00732         goto ML_noreport ; phase == 3
029E   2???           00733         goto ML_report ; phase == 4
029F   2???           00734         goto ML_run ; phase == 5
02A0   2???           00735         goto ML_finish ; phase == 6
02A1                  00736 ML_hdinit
02A1   0835           00737         movf temp2, w
                      00738         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
02A2   00??               M         movwf table_temp
02A3   30??               M         movlw HIGH tablename
02A4   008A               M         movwf PCLATH
02A5   08??               M         movf table_temp, w
02A6   3E??               M         addlw LOW tablename
02A7   1803               M         btfsc STATUS, C
02A8   0A8A               M         incf PCLATH, f
02A9   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
02AA                      M         tablename
02AA   2???           00739         goto ML_hdinit_0 ; line# == 0
02AB   2???           00740         goto ML_hdinit_1 ; line# == 1
02AC                  00741 ML_rtcinit ; display do not use this function
                      00742         COPY_STRING str_null ; null termination
02AC   30??               M         movlw str_null
02AD   2???               M         call copystring
02AE   0008           00743         return
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02AF                  00744 ML_realtime
02AF   0835           00745         movf temp2, w
                      00746         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
02B0   00??               M         movwf table_temp
02B1   30??               M         movlw HIGH tablename
02B2   008A               M         movwf PCLATH
02B3   08??               M         movf table_temp, w
02B4   3E??               M         addlw LOW tablename
02B5   1803               M         btfsc STATUS, C
02B6   0A8A               M         incf PCLATH, f
02B7   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
02B8                      M         tablename
02B8   2???           00747         goto ML_realtime_0 ; line# == 0
02B9   2???           00748         goto ML_realtime_1 ; line# == 1
02BA                  00749 ML_noreport
02BA   0835           00750         movf temp2, w
                      00751         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
02BB   00??               M         movwf table_temp
02BC   30??               M         movlw HIGH tablename
02BD   008A               M         movwf PCLATH
02BE   08??               M         movf table_temp, w
02BF   3E??               M         addlw LOW tablename
02C0   1803               M         btfsc STATUS, C
02C1   0A8A               M         incf PCLATH, f
02C2   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
02C3                      M         tablename
02C3   2???           00752         goto ML_noreport_0 ; line# == 0
02C4   2???           00753         goto ML_noreport_1 ; line# == 1
02C5                  00754 ML_report
02C5   0835           00755         movf temp2, w
                      00756         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
02C6   00??               M         movwf table_temp
02C7   30??               M         movlw HIGH tablename
02C8   008A               M         movwf PCLATH
02C9   08??               M         movf table_temp, w
02CA   3E??               M         addlw LOW tablename
02CB   1803               M         btfsc STATUS, C
02CC   0A8A               M         incf PCLATH, f
02CD   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
02CE                      M         tablename
02CE   2???           00757         goto ML_report_0 ; line# == 0
02CF   2???           00758         goto ML_report_1 ; line# == 1
02D0   2???           00759         goto ML_report_2 ; line# == 2
02D1   2???           00760         goto ML_report_3 ; line# == 3
02D2   2???           00761         goto ML_report_4 ; line# == 4
02D3   2???           00762         goto ML_report_5 ; line# == 5
02D4   2???           00763         goto ML_report_6 ; line# == 6
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D5   2???           00764         goto ML_report_7 ; line# == 7
02D6   2???           00765         goto ML_report_8 ; line# == 8
02D7   2???           00766         goto ML_report_9 ; line# == 9
02D8   2???           00767         goto ML_report_10 ; line# == 10
02D9                  00768 ML_run
02D9   0835           00769         movf temp2, w
                      00770         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
02DA   00??               M         movwf table_temp
02DB   30??               M         movlw HIGH tablename
02DC   008A               M         movwf PCLATH
02DD   08??               M         movf table_temp, w
02DE   3E??               M         addlw LOW tablename
02DF   1803               M         btfsc STATUS, C
02E0   0A8A               M         incf PCLATH, f
02E1   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
02E2                      M         tablename
02E2   2???           00771         goto ML_run_0 ; line# == 0
02E3   2???           00772         goto ML_run_1 ; line# == 1
02E4                  00773 ML_finish
02E4   0835           00774         movf temp2, w
                      00775         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
02E5   00??               M         movwf table_temp
02E6   30??               M         movlw HIGH tablename
02E7   008A               M         movwf PCLATH
02E8   08??               M         movf table_temp, w
02E9   3E??               M         addlw LOW tablename
02EA   1803               M         btfsc STATUS, C
02EB   0A8A               M         incf PCLATH, f
02EC   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
02ED                      M         tablename
02ED   2???           00776         goto ML_finish_0 ; line# == 0
02EE   2???           00777         goto ML_finish_1 ; line# == 1
02EF                  00778 ML_hdinit_0
                      00779         COPY_STRING str_init
02EF   30??               M         movlw str_init
02F0   2???               M         call copystring
02F1   0008           00780         return
02F2                  00781 ML_hdinit_1
                      00782         COPY_STRING str_null
02F2   30??               M         movlw str_null
02F3   2???               M         call copystring
02F4   0008           00783         return
02F5                  00784 ML_realtime_0
                      00785         COPY_STRING str_yearhead
02F5   30??               M         movlw str_yearhead
02F6   2???               M         call copystring
                      00786         COPY_DEC2 rt_year
02F7   0840               M         movf rt_year,   w
02F8   00BB               M         movwf arg
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02F9   3002               M         movlw 0x02
02FA   00BC               M         movwf arg2
02FB   2???               M         call copydec
                      00787         COPY_STRING str_dash
02FC   30??               M         movlw str_dash
02FD   2???               M         call copystring
                      00788         COPY_DEC2 rt_month
02FE   0841               M         movf rt_month,  w
02FF   00BB               M         movwf arg
0300   3002               M         movlw 0x02
0301   00BC               M         movwf arg2
0302   2???               M         call copydec
                      00789         COPY_STRING str_dash
0303   30??               M         movlw str_dash
0304   2???               M         call copystring
                      00790         COPY_DEC2 rt_day
0305   0842               M         movf rt_day,    w
0306   00BB               M         movwf arg
0307   3002               M         movlw 0x02
0308   00BC               M         movwf arg2
0309   2???               M         call copydec
030A   0008           00791         return
030B                  00792 ML_realtime_1
                      00793         COPY_DEC2 rt_hour
030B   0843               M         movf rt_hour,   w
030C   00BB               M         movwf arg
030D   3002               M         movlw 0x02
030E   00BC               M         movwf arg2
030F   2???               M         call copydec
                      00794         COPY_STRING str_colon
0310   30??               M         movlw str_colon
0311   2???               M         call copystring
                      00795         COPY_DEC2 rt_min
0312   0844               M         movf rt_min,    w
0313   00BB               M         movwf arg
0314   3002               M         movlw 0x02
0315   00BC               M         movwf arg2
0316   2???               M         call copydec
                      00796         COPY_STRING str_colon
0317   30??               M         movlw str_colon
0318   2???               M         call copystring
                      00797         COPY_DEC2 rt_sec
0319   0845               M         movf rt_sec,    w
031A   00BB               M         movwf arg
031B   3002               M         movlw 0x02
031C   00BC               M         movwf arg2
031D   2???               M         call copydec
031E   0008           00798         return
031F                  00799 ML_noreport_0
                      00800         COPY_STRING str_noreport
031F   30??               M         movlw str_noreport
0320   2???               M         call copystring
0321   0008           00801         return
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0322                  00802 ML_noreport_1
                      00803         COPY_STRING str_null
0322   30??               M         movlw str_null
0323   2???               M         call copystring
0324   0008           00804         return
0325                  00805 ML_report_0
                      00806         COPY_STRING str_entry
0325   30??               M         movlw str_entry
0326   2???               M         call copystring
                      00807         ; log# = (log_total - log_next + report_num + 1 + MAXLOG) MOD MAXLOG
                      00808         ; also log# = MAXLOG if result == 0
0327   0869           00809         movf log_next, w
0328   0268           00810         subwf log_total, w
0329   0721           00811         addwf report_num, w
032A   3E01           00812         addlw 0x01
032B   3E0C           00813         addlw MAXLOG
                      00814         MODLW MAXLOG
032C   00EA               M         movwf arith_temp
032D   300C               M         movlw MAXLOG
032E   2???               M         call divfn
032F   086A               M         movf arith_temp, w
0330   1903           00815         btfsc STATUS, Z
0331   300C           00816         movlw MAXLOG ; result == 0, log# = MAXLOG
0332   00B6           00817         movwf temp3
                      00818         COPY_DEC2 temp3
0333   0836               M         movf temp3,     w
0334   00BB               M         movwf arg
0335   3002               M         movlw 0x02
0336   00BC               M         movwf arg2
0337   2???               M         call copydec
                      00819         COPY_STRING char_slash
0338   30??               M         movlw char_slash
0339   2???               M         call copystring
                      00820         COPY_DEC2 log_total
033A   0868               M         movf log_total, w
033B   00BB               M         movwf arg
033C   3002               M         movlw 0x02
033D   00BC               M         movwf arg2
033E   2???               M         call copydec
033F   0008           00821         return
0340                  00822 ML_report_1
                      00823         COPY_STRING str_start
0340   30??               M         movlw str_start
0341   2???               M         call copystring
                      00824         COPY_DEC2 st_hour
0342   0849               M         movf st_hour,   w
0343   00BB               M         movwf arg
0344   3002               M         movlw 0x02
0345   00BC               M         movwf arg2
0346   2???               M         call copydec
                      00825         COPY_STRING str_colon
0347   30??               M         movlw str_colon
0348   2???               M         call copystring
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00826         COPY_DEC2 st_min
0349   084A               M         movf st_min,    w
034A   00BB               M         movwf arg
034B   3002               M         movlw 0x02
034C   00BC               M         movwf arg2
034D   2???               M         call copydec
                      00827         COPY_STRING str_colon
034E   30??               M         movlw str_colon
034F   2???               M         call copystring
                      00828         COPY_DEC2 st_sec
0350   084B               M         movf st_sec,    w
0351   00BB               M         movwf arg
0352   3002               M         movlw 0x02
0353   00BC               M         movwf arg2
0354   2???               M         call copydec
0355   0008           00829         return
0356                  00830 ML_report_2
                      00831         COPY_STRING str_finish
0356   30??               M         movlw str_finish
0357   2???               M         call copystring
                      00832         COPY_DEC2 end_hour
0358   084C               M         movf end_hour,  w
0359   00BB               M         movwf arg
035A   3002               M         movlw 0x02
035B   00BC               M         movwf arg2
035C   2???               M         call copydec
                      00833         COPY_STRING str_colon
035D   30??               M         movlw str_colon
035E   2???               M         call copystring
                      00834         COPY_DEC2 end_min
035F   084D               M         movf end_min,   w
0360   00BB               M         movwf arg
0361   3002               M         movlw 0x02
0362   00BC               M         movwf arg2
0363   2???               M         call copydec
                      00835         COPY_STRING str_colon
0364   30??               M         movlw str_colon
0365   2???               M         call copystring
                      00836         COPY_DEC2 end_sec
0366   084E               M         movf end_sec,   w
0367   00BB               M         movwf arg
0368   3002               M         movlw 0x02
0369   00BC               M         movwf arg2
036A   2???               M         call copydec
036B   0008           00837         return
036C                  00838 ML_report_3
                      00839         COPY_STRING str_runtime
036C   30??               M         movlw str_runtime
036D   2???               M         call copystring
                      00840         COPY_DEC1 runtime
036E   084F               M         movf runtime,   w
036F   00BB               M         movwf arg
0370   3001               M         movlw 0x01
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0371   00BC               M         movwf arg2
0372   2???               M         call copydec
                      00841         COPY_STRING str_s
0373   30??               M         movlw str_s
0374   2???               M         call copystring
0375   0008           00842         return
0376                  00843 ML_report_4
                      00844         COPY_STRING str_total
0376   30??               M         movlw str_total
0377   2???               M         call copystring
                      00845         COPY_DEC1 cl_total
0378   0850               M         movf cl_total,  w
0379   00BB               M         movwf arg
037A   3001               M         movlw 0x01
037B   00BC               M         movwf arg2
037C   2???               M         call copydec
037D   0008           00846         return
037E                  00847 ML_report_5
                      00848         COPY_STRING str_pass
037E   30??               M         movlw str_pass
037F   2???               M         call copystring
                      00849         COPY_DEC1 cl_pass
0380   0851               M         movf cl_pass,   w
0381   00BB               M         movwf arg
0382   3001               M         movlw 0x01
0383   00BC               M         movwf arg2
0384   2???               M         call copydec
                      00850         COPY_STRING str_fail
0385   30??               M         movlw str_fail
0386   2???               M         call copystring
                      00851         COPY_DEC1 cl_fail
0387   0852               M         movf cl_fail,   w
0388   00BB               M         movwf arg
0389   3001               M         movlw 0x01
038A   00BC               M         movwf arg2
038B   2???               M         call copydec
038C   0008           00852         return
038D                  00853 ML_report_6
                      00854         COPY_STRING str_layout
038D   30??               M         movlw str_layout
038E   2???               M         call copystring
038F   0008           00855         return
0390                  00856 ML_report_7
                      00857         COPY_STRING str_layout1
0390   30??               M         movlw str_layout1
0391   2???               M         call copystring
                      00858         COPY_LAYOUT 0
0392   3000               M         movlw 0
0393   2???               M         call copylayout
0394   0008           00859         return
0395                  00860 ML_report_8
                      00861         COPY_STRING str_layout2
0395   30??               M         movlw str_layout2
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0396   2???               M         call copystring
                      00862         COPY_LAYOUT 1
0397   3001               M         movlw 1
0398   2???               M         call copylayout
0399   0008           00863         return
039A                  00864 ML_report_9
                      00865         COPY_STRING str_layout3
039A   30??               M         movlw str_layout3
039B   2???               M         call copystring
                      00866         COPY_LAYOUT 2
039C   3002               M         movlw 2
039D   2???               M         call copylayout
039E   0008           00867         return
039F                  00868 ML_report_10
                      00869         COPY_STRING str_layout4
039F   30??               M         movlw str_layout4
03A0   2???               M         call copystring
                      00870         COPY_LAYOUT 3
03A1   3003               M         movlw 3
03A2   2???               M         call copylayout
03A3   0008           00871         return
03A4                  00872 ML_run_0
                      00873         COPY_STRING str_running
03A4   30??               M         movlw str_running
03A5   2???               M         call copystring
03A6   0008           00874         return
03A7                  00875 ML_run_1
                      00876         COPY_STRING str_null
03A7   30??               M         movlw str_null
03A8   2???               M         call copystring
03A9   0008           00877         return
03AA                  00878 ML_finish_0
                      00879         COPY_STRING str_insp_fin
03AA   30??               M         movlw str_insp_fin
03AB   2???               M         call copystring
03AC   0008           00880         return
03AD                  00881 ML_finish_1 ; ALL PASS????!!!!
                      00882         COPY_STRING str_runtime
03AD   30??               M         movlw str_runtime
03AE   2???               M         call copystring
                      00883         COPY_DEC1 runtime
03AF   084F               M         movf runtime,   w
03B0   00BB               M         movwf arg
03B1   3001               M         movlw 0x01
03B2   00BC               M         movwf arg2
03B3   2???               M         call copydec
                      00884         COPY_STRING str_s
03B4   30??               M         movlw str_s
03B5   2???               M         call copystring
03B6   0008           00885         return
                      00886 ;*******************************************************************************
                      00887 ; "copystring": String Copy Function
                      00888 ; Func: Copy the string literal (null terminated) pointed by W
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00889 ; to position pointed by FSR (indirect pointer)
                      00890 ; Input: W = address of the string literal wanted,
                      00891 ; FSR = adress of destination
                      00892 ; Output: FSR = adress of the null terminator of the copyed string
                      00893 ; Affect: W, STATUS, literal_addr
                      00894 ;*******************************************************************************
03B7                  00895 copystring
03B7   00BD           00896         movwf literal_addr
03B8                  00897 copystring_loop
03B8   083D           00898         movf literal_addr, w
03B9   2???           00899         call literal
03BA   0080           00900         movwf INDF
03BB   0880           00901         movf INDF, f ; test INDF(last char) == 0(NULL)
03BC   1903           00902         btfsc STATUS, Z
03BD   0008           00903         return ; if end of string is reached (NULL)
03BE   0A84           00904         incf FSR, f
03BF   0ABD           00905         incf literal_addr, f
03C0   2???           00906         goto copystring_loop
                      00907 ;*******************************************************************************
                      00908 ; "copylayout": Layout Row Translate & Copy Function
                      00909 ; Func: Translate a row in layout array into printable format,
                      00910 ; copy it to position pointed by FSR,
                      00911 ; and add a null termination after the copied charactor
                      00912 ; Input: W = raw number, FSR = adress of destination
                      00913 ; Output: FSR = adress of the null terminator after copied layout
                      00914 ; Affect:
                      00915 ;*******************************************************************************
03C1                  00916 copylayout
03C1   00B4           00917         movwf temp ; raw number, later hold translated layout byte
03C2   3053           00918         movlw layout
03C3   08B4           00919         movf temp, f ; test if temp == 0
03C4   1903           00920         btfsc STATUS, Z
03C5   2???           00921         goto copylayout_next ; temp == 0, starting position = layout
03C6                  00922 copylayout_startloop
03C6   3E05           00923         addlw COLS
03C7   0BB4           00924         decfsz temp, f
03C8   2???           00925         goto copylayout_startloop
03C9                  00926 copylayout_next
03C9   00B5           00927         movwf temp2 ; address of layout byte
03CA   0804           00928         movf FSR, w
03CB   00B6           00929         movwf temp3 ; address of destination
03CC   3005           00930         movlw COLS
03CD   00B7           00931         movwf temp4 ; colume counter
03CE                  00932 copylayout_charloop
03CE   0835           00933         movf temp2, w ; get layout byte
03CF   0084           00934         movwf FSR
03D0   30??           00935         movlw char_layout ; get translated layout byte address
03D1   0700           00936         addwf INDF, w
03D2   2???           00937         call literal ; translate char
03D3   00B4           00938         movwf temp ; save the translated layout byte into temp
03D4   0836           00939         movf temp3, w ; get destination
03D5   0084           00940         movwf FSR
03D6   0834           00941         movf temp, w ; copy translated byte to destination
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[203]: Found opcode in column 1. (movwf)
03D7   0080           00942 movwf INDF
03D8   0AB5           00943         incf temp2, f
03D9   0AB6           00944         incf temp3, f
03DA   0BB7           00945         decfsz temp4, f
03DB   2???           00946         goto copylayout_charloop
03DC   0836           00947         movf temp3, w
03DD   0084           00948         movwf FSR ; FSR will now have the address after last byte
03DE   3000           00949         movlw NULL ; add null terminator
03DF   0080           00950         movwf INDF
03E0   0008           00951         return
                      00952 ;*******************************************************************************
                      00953 ; "copydec": Byte Display Conversion & Copy Function
                      00954 ; Func: Convert a number store in a byte to a printable decimal
                      00955 ; ASCII string with null termination and copy it to a position
                      00956 ; pointed by FSR
                      00957 ; Input: arg = number to be converted,
                      00958 ; arg2 = minimum number of digits displayed
                      00959 ; FSR = adress of destination
                      00960 ; Output: FSR = adress of the null terminator of the decimal display
                      00961 ; Affect: W, STATUS, arith_temp, arith_temp2
                      00962 ;*******************************************************************************
03E1                  00963 copydec
03E1   083B           00964         movf arg, w
                      00965         DIVLW 0x64 ; 100
03E2   00EA               M         movwf arith_temp
03E3   3064               M         movlw 0x64
03E4   2???               M         call divfn
03E5   1D03           00966         btfss STATUS, Z ; test if quotient is 0
03E6   2???           00967         goto copydec_copyhundreds ; quotient <> 0, normal display
03E7   3003           00968         movlw 0x03 ; quotient == 0, depends on arg2
03E8   023C           00969         subwf arg2, w
03E9   1C03           00970         btfss STATUS, C ; test if arg2 < 3
03EA   2???           00971         goto copydec_tens ; arg2 < 3, skip 0 hundred
03EB   3000           00972         movlw 0x00 ; arg2 >= 3, display 0
03EC                  00973 copydec_copyhundreds
03EC   3E30           00974         addlw 0x30 ; num+0x30 = its ASCII
03ED   0080           00975         movwf INDF
03EE   0A84           00976         incf FSR, f
03EF   3003           00977         movlw 0x03 ; hundreds already displayed, set arg2 to 3
03F0   00BC           00978         movwf arg2 ; because all following digit shall be seen
03F1                  00979 copydec_tens
03F1   083B           00980         movf arg, w
                      00981         MODLW 0x64 ; 100
03F2   00EA               M         movwf arith_temp
03F3   3064               M         movlw 0x64
03F4   2???               M         call divfn
03F5   086A               M         movf arith_temp, w
                      00982         DIVLW 0x0A ; 10
03F6   00EA               M         movwf arith_temp
03F7   300A               M         movlw 0x0A
03F8   2???               M         call divfn
03F9   1D03           00983         btfss STATUS, Z ; test if quotient is 0
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03FA   2???           00984         goto copydec_copytens ; quotient <> 0, normal display
03FB   3002           00985         movlw 0x02 ; quotient == 0, depends on arg2
03FC   023C           00986         subwf arg2, w
03FD   1C03           00987         btfss STATUS, C ; test if arg2 < 2
03FE   2???           00988         goto copydec_ones ; arg2 < 2, skip 0 tens
03FF   3000           00989         movlw 0x00 ; arg2 >= 2, display 0
0400                  00990 copydec_copytens
0400   3E30           00991         addlw 0x30 ; num+0x30 = its ASCII
0401   0080           00992         movwf INDF
0402   0A84           00993         incf FSR, f
                      00994         ; movlw 0x02 ; tens already displayed, set arg2 to 2
                      00995         ; movwf arg2 ; because all following digit shall be seen
0403                  00996 copydec_ones
0403   083B           00997         movf arg, w
                      00998         MODLW 0x0A ; 10
0404   00EA               M         movwf arith_temp
0405   300A               M         movlw 0x0A
0406   2???               M         call divfn
0407   086A               M         movf arith_temp, w
                      00999         ; ones shall be displayed anyways
0408   3E30           01000         addlw 0x30 ; num+0x30 = its ASCII
0409   0080           01001         movwf INDF
040A   0A84           01002         incf FSR, f
040B                  01003 copydec_ending ; write a null ending
040B   3000           01004         movlw NULL
040C   0080           01005         movwf INDF
040D   0008           01006         return
                      01007 ;*******************************************************************************
                      01008 ; "writeline": Write Displayable Line to LCD Function
                      01009 ; Func: Send LCDline string to LCD charactor by charactor
                      01010 ; Input: None (string prepared in LCDline)
                      01011 ; Output: None (to LCD)
                      01012 ; Affect: W, STATUS, FSR, delaytemp, delaycount
                      01013 ; Runtime: (3.2 + 216.0 * N) us, N = # of char, not including NULL
                      01014 ;*******************************************************************************
040E                  01015 writeline
                      01016         MOVLF FSR, LCDline
040E   3023               M         movlw LCDline
040F   0084               M         movwf FSR
0410                  01017 writeline_loop
0410   0800           01018         movf INDF, w ; test INDF(char pointer to the string)==0(NULL)
0411   1903           01019         btfsc STATUS, Z
0412   0008           01020         return ; if end of string is reached (NULL)
0413   2???           01021         call LCD_wt
0414   0A84           01022         incf FSR, f
0415   2???           01023         goto writeline_loop
                      01024 ;*******************************************************************************
                      01025 ; "Run": Run Inspection Function
                      01026 ; Func: Control the entire process of inspection
                      01027 ; Input: None
                      01028 ; Output: st_year, st_month, st_day, st_hour, st_min, st_sec,
                      01029 ; end_hour, end_min, end_sec, runtime, cl_total, cl_pass,
                      01030 ; cl_fail, layout, smotor_dir, log!!!!
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01031 ; Affect:
                      01032 ;*******************************************************************************
0416                  01033 run
                      01034         ; store sarting time
                      01035         MOVFF st_year, rt_year
0416   0840               M         movf rt_year, w
0417   00C6               M         movwf st_year
                      01036         MOVFF st_month, rt_month
0418   0841               M         movf rt_month, w
0419   00C7               M         movwf st_month
                      01037         MOVFF st_day, rt_day
041A   0842               M         movf rt_day, w
041B   00C8               M         movwf st_day
                      01038         MOVFF st_hour, rt_hour
041C   0843               M         movf rt_hour, w
041D   00C9               M         movwf st_hour
                      01039         MOVFF st_min, rt_min
041E   0844               M         movf rt_min, w
041F   00CA               M         movwf st_min
                      01040         MOVFF st_sec, rt_sec
0420   0845               M         movf rt_sec, w
0421   00CB               M         movwf st_sec
                      01041         ; reset all layouts
                      01042         MOVLF FSR, layout
0422   3053               M         movlw layout
0423   0084               M         movwf FSR
                      01043         MOVLF temp, MAXPOS
0424   3014               M         movlw MAXPOS
0425   00B4               M         movwf temp
0426                  01044 run_clearlayoutloop
0426   0180           01045         clrf INDF
0427   0A84           01046         incf FSR, f
0428   0BB4           01047         decfsz temp, f
0429   2???           01048         goto run_clearlayoutloop
                      01049         ; initialize variables
042A   3053           01050         movlw layout
042B   08E7           01051         movf smotor_dir, f
042C   1903           01052         btfsc STATUS, Z
042D   2???           01053         goto run_init_smotornext; smotor_dir == 0, "row1" to "row4"
042E   3E14           01054         addlw MAXPOS ; smotor_dir <> 0, "row4" to "row1"
042F   00B4           01055         movwf temp ; temperary storage
0430   3005           01056         movlw COLS
0431   0234           01057         subwf temp, w ; layout + MAXPOS - COLS, at last row
0432                  01058 run_init_smotornext
0432   00BF           01059         movwf result_addr
                      01060         MOVLF rowleft, ROWS
0433   3004               M         movlw ROWS
0434   00BE               M         movwf rowleft
0435   01D0           01061         clrf cl_total
0436   01D1           01062         clrf cl_pass
0437   01D2           01063         clrf cl_fail
0438   100B           01064         bcf INTCON, RBIF
0439   158B           01065         bsf INTCON, RBIE ; enable keypad interrept
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01066         STORE_LIGHT light_bg
043A   30B0               M         movlw light_bg
043B   2???               M         call lightsensor
                      01067         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
043C   3023               M         movlw LCDline
043D   0084               M         movwf FSR
                          M         COPY_STRING str_dot
043E   30??               M         movlw str_dot
043F   2???               M         call copystring
0440   2???               M         call writeline
0441                  01068 run_loop
                      01069         IRLED_ON
0441   3001               M         movlw 0x01
0442   2???               M         call ledcontrol
                      01070         STORE_LIGHT light_pos
0443   30B5               M         movlw light_pos
0444   2???               M         call lightsensor
                      01071         IRLED_OFF
0445   3000               M         movlw 0x00
0446   2???               M         call ledcontrol
0447   083F           01072         movf result_addr, w
                      01073         CALC_POS THD_IRLED
0448   00B4               M         movwf temp
0449   301C               M         movlw THD_IRLED
044A   00B7               M         movwf temp4
044B   2???               M         call calcpos
044C   1903           01074         btfsc STATUS, Z
044D   2???           01075         goto run_noextrarow ; return value == 0, no lights in this row
                      01076         ;PRESS_CL
044E   2???           01077         call movedown
                      01078         STORE_LIGHT light_pos
044F   30B5               M         movlw light_pos
0450   2???               M         call lightsensor
                      01079         CALC_POS THD_CL3LED
0451   00B4               M         movwf temp
0452   3050               M         movlw THD_CL3LED
0453   00B7               M         movwf temp4
0454   2???               M         call calcpos
0455   2???           01080         call moveup
                      01081         STORE_LIGHT light_cl
0456   30BA               M         movlw light_cl
0457   2???               M         call lightsensor
                      01082         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
0458   3023               M         movlw LCDline
0459   0084               M         movwf FSR
                          M         COPY_STRING str_dot
045A   30??               M         movlw str_dot
045B   2???               M         call copystring
045C   2???               M         call writeline
                      01083         ;PRESS_CL
045D   2???           01084         call movedown
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

045E   2???           01085         call moveup
                      01086         STORE_LIGHT light_off
045F   30BF               M         movlw light_off
0460   2???               M         call lightsensor
                      01087         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
0461   3023               M         movlw LCDline
0462   0084               M         movwf FSR
                          M         COPY_STRING str_dot
0463   30??               M         movlw str_dot
0464   2???               M         call copystring
0465   2???               M         call writeline
0466   083F           01088         movf result_addr, w
0467   2???           01089         call calcfunc
0468   3E00           01090         addlw 0x00
0469   1903           01091         btfsc STATUS, Z
046A   2???           01092         goto run_noextrarow ; return value == 0, no extra row
                      01093         ; return value <> 0, advance extra row
                      01094         ; advance to next RAM location
046B   3005           01095         movlw COLS
046C   08E7           01096         movf smotor_dir, f
046D   1D03           01097         btfss STATUS, Z
046E   2???           01098         goto run_nextRAM_reverse; smotor_dir<>0, "row4" to "row1", sub COLS
046F   07BF           01099         addwf result_addr, f ; smotor_dir == 0, "row1" to "row4", add COLS
0470   2???           01100         goto run_nextRAM_next
0471                  01101 run_nextRAM_reverse
0471   02BF           01102         subwf result_addr, f
0472                  01103 run_nextRAM_next
0472   03BE           01104         decf rowleft, f
0473   1903           01105         btfsc STATUS, Z
0474   2???           01106         goto run_end ; no row left, end run
0475   2???           01107         call advancerow ; advance to next machine location
                      01108         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
0476   3023               M         movlw LCDline
0477   0084               M         movwf FSR
                          M         COPY_STRING str_dot
0478   30??               M         movlw str_dot
0479   2???               M         call copystring
047A   2???               M         call writeline
047B                  01109 run_noextrarow
                      01110         ; advance to next RAM location
047B   3005           01111         movlw COLS
047C   08E7           01112         movf smotor_dir, f
047D   1D03           01113         btfss STATUS, Z
047E   2???           01114         goto run_nextRAM_reverse2 ; smotor_dir <> 0, "row4" to "row1"
047F   07BF           01115         addwf result_addr, f ; smotor_dir == 0, "row1" to "row4", add COLS
0480   2???           01116         goto run_nextRAM_next2
0481                  01117 run_nextRAM_reverse2
0481   02BF           01118         subwf result_addr, f
0482                  01119 run_nextRAM_next2
0482   03BE           01120         decf rowleft, f
0483   1903           01121         btfsc STATUS, Z
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0484   2???           01122         goto run_end ; no row left, end run
0485   2???           01123         call advancerow ; advance to next machine location
                      01124         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
0486   3023               M         movlw LCDline
0487   0084               M         movwf FSR
                          M         COPY_STRING str_dot
0488   30??               M         movlw str_dot
0489   2???               M         call copystring
048A   2???               M         call writeline
048B   2???           01125         goto run_loop
048C                  01126 run_end
048C   118B           01127         bcf INTCON, RBIE ; disable keypad interrept
048D   3001           01128         movlw 0x01 ; mask last bit
048E   06E7           01129         xorwf smotor_dir, f ; logic NOT last digit, reverse direction
                      01130         ; store end time
                      01131         MOVFF end_hour, rt_hour
048F   0843               M         movf rt_hour, w
0490   00CC               M         movwf end_hour
                      01132         MOVFF end_min, rt_min
0491   0844               M         movf rt_min, w
0492   00CD               M         movwf end_min
                      01133         MOVFF end_sec, rt_sec
0493   0845               M         movf rt_sec, w
0494   00CE               M         movwf end_sec
0495   2???           01134         call calcruntime
0496   2???           01135         call writelog
0497   00A1           01136         movwf report_num
0498   0008           01137         return
                      01138 ;*******************************************************************************
                      01139 ; "calcpos": Row Position Calculation Function
                      01140 ; Func: Determine the existance of closet light at any positions in
                      01141 ; current row: result CL_POS_BIT = (light_pos >= THD_IRLED)
                      01142 ; Input: W = the starting address where the result will be stored,
                      01143 ; temp = address of the result, temp4 = threshold, light_pos[]
                      01144 ; Output: W = number of lights in current row, result bytes,
                      01145 ; STATUS is set according to W
                      01146 ; Affect: FSR, temp, temp2, temp3, temp4
                      01147 ;*******************************************************************************
0499                  01148 calcpos
                      01149         ; movwf temp ; address of the result
0499   01B5           01150         clrf temp2 ; colume number
049A   01B6           01151         clrf temp3 ; number of CLs in current row
049B                  01152 calcpos_loop
                      01153         MOVFF FSR, temp
049B   0834               M         movf temp, w
049C   0084               M         movwf FSR
049D   30B5           01154         movlw light_pos
049E   0735           01155         addwf temp2, w
049F   0084           01156         movwf FSR ; get current light_pos
04A0   0837           01157         movf temp4, w
04A1   0200           01158         subwf INDF, w ; light_pos - threshold
04A2   1C03           01159         btfss STATUS, C
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04A3   2???           01160         goto calcpos_next ; light_pos < threshold, no light
                      01161         MOVFF FSR, temp ; light_pos >= threshold, has light
04A4   0834               M         movf temp, w
04A5   0084               M         movwf FSR
04A6   1400           01162         bsf INDF, CL_POS_BIT ; set pos bit
04A7   0AB6           01163         incf temp3, f
04A8                  01164 calcpos_next
04A8   0AB4           01165         incf temp, f
04A9   0AB5           01166         incf temp2, f
04AA   3005           01167         movlw COLS
04AB   0235           01168         subwf temp2, w ; temp2(col#) - COLS(max col#)
04AC   1C03           01169         btfss STATUS, C
04AD   2???           01170         goto calcpos_loop ; temp2(col#) < COLS(max col#)
04AE   0836           01171         movf temp3, w
04AF   0008           01172         return
                      01173 ;*******************************************************************************
                      01174 ; "calcfunc": Row Functionality Calculation Function
                      01175 ; Func: Determine the functionality of closet light at ANY positions
                      01176 ; (not only those maked pos) of current row, also determine
                      01177 ; whether next row can physically have any CL
                      01178 ; Input: W = the starting address where the result will be stored,
                      01179 ; light_bg[], light_cl[], light_off[], result bytes
                      01180 ; Output: W = whether the machine need to advance one more row
                      01181 ; (0 = advance one row; 1 = advance two rows),
                      01182 ; cl_total, cl_pass, cl_fail, layout[]
                      01183 ; Affect: STATUS, FSR, temp, temp2, temp3, temp4, temp5, temp6, temp7
                      01184 ;*******************************************************************************
04B0                  01185 calcfunc
Warning[203]: Found opcode in column 1. (movwf)
04B0   00B4           01186 movwf temp ; address of the result
Warning[203]: Found opcode in column 1. (clrf)
04B1   01B5           01187 clrf temp2 ; colume number
Warning[203]: Found opcode in column 1. (clrf)
04B2   01B6           01188 clrf temp3 ; C0 = light_pos >= THD_IRLED
Warning[203]: Found opcode in column 1. (clrf)
04B3   01B7           01189 clrf temp4 ; C1 = light_cl >= THD_CL3LED
Warning[203]: Found opcode in column 1. (clrf)
04B4   01B8           01190 clrf temp5 ; C2 = light_off >= (lihgt_bg + THD_BG)
Warning[203]: Found opcode in column 1. (clrf)
04B5   01B9           01191 clrf temp6 ; number of CLs in current row
Warning[203]: Found opcode in column 1. (clrf)
04B6   01BA           01192 clrf temp7 ; temperaty storage
04B7                  01193 calcfunc_loop
                      01194 ; get C0 = CL_POS_BIT from calcpos
Warning[206]: Found call to macro in column 1. (MOVFF)
                      01195 MOVFF FSR, temp
04B7   0834               M         movf temp, w
04B8   0084               M         movwf FSR
Warning[203]: Found opcode in column 1. (movlw)
04B9   3000           01196 movlw FALSE
Warning[203]: Found opcode in column 1. (btfsc)
04BA   1800           01197 btfsc INDF, CL_POS_BIT
Warning[203]: Found opcode in column 1. (movlw)
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04BB   30FF           01198 movlw TRUE ; CL_POS_BIT set, C0 = true
Warning[203]: Found opcode in column 1. (movwf)
04BC   00B6           01199 movwf temp3
                      01200 ; get C1 = light_cl >= THD_CL3LED
Warning[203]: Found opcode in column 1. (movlw)
04BD   30BA           01201 movlw light_cl
Warning[203]: Found opcode in column 1. (addwf)
04BE   0735           01202 addwf temp2, w
Warning[203]: Found opcode in column 1. (movwf)
04BF   0084           01203 movwf FSR ; get current light_cl
Warning[203]: Found opcode in column 1. (movlw)
04C0   3050           01204 movlw THD_CL3LED
Warning[203]: Found opcode in column 1. (subwf)
04C1   0200           01205 subwf INDF, w ; light_cl - THD_CL3LED
Warning[203]: Found opcode in column 1. (btfss)
04C2   1C03           01206 btfss STATUS, C
Warning[203]: Found opcode in column 1. (goto)
04C3   2???           01207 goto calcfunc_C1false ; light_pos < THD_IRLED, C1 = false
Warning[203]: Found opcode in column 1. (movlw)
04C4   30FF           01208 movlw TRUE ; light_pos >= THD_IRLED, C1 = ture
Warning[203]: Found opcode in column 1. (goto)
04C5   2???           01209 goto calcfunc_C1next
04C6                  01210 calcfunc_C1false
Warning[203]: Found opcode in column 1. (movlw)
04C6   3000           01211 movlw FALSE
04C7                  01212 calcfunc_C1next
Warning[203]: Found opcode in column 1. (movwf)
04C7   00B7           01213 movwf temp4
                      01214 ; get C2 = light_off >= (lihgt_bg + THD_BG)
Warning[203]: Found opcode in column 1. (movlw)
04C8   30B0           01215 movlw light_bg
Warning[203]: Found opcode in column 1. (addwf)
04C9   0735           01216 addwf temp2, w
Warning[203]: Found opcode in column 1. (movwf)
04CA   0084           01217 movwf FSR ; get current light_bg
Warning[203]: Found opcode in column 1. (movlw)
04CB   3005           01218 movlw THD_BG
Warning[203]: Found opcode in column 1. (addwf)
04CC   0700           01219 addwf INDF, w ; lihgt_bg + THD_BG
Warning[203]: Found opcode in column 1. (movwf)
04CD   00BA           01220 movwf temp7 ; temperally save
Warning[203]: Found opcode in column 1. (movlw)
04CE   30BF           01221 movlw light_off
Warning[203]: Found opcode in column 1. (addwf)
04CF   0735           01222 addwf temp2, w
Warning[203]: Found opcode in column 1. (movwf)
04D0   0084           01223 movwf FSR ; get current light_off
Warning[203]: Found opcode in column 1. (movf)
04D1   083A           01224 movf temp7, w ; put (lihgt_bg + THD_BG) back
Warning[203]: Found opcode in column 1. (subwf)
04D2   0200           01225 subwf INDF, w ; light_off - (lihgt_bg + THD_BG)
Warning[203]: Found opcode in column 1. (btfss)
04D3   1C03           01226 btfss STATUS, C
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[203]: Found opcode in column 1. (goto)
04D4   2???           01227 goto calcfunc_C2false ; light_off < (lihgt_bg - THD_BG), C2 = false
Warning[203]: Found opcode in column 1. (movlw)
04D5   30FF           01228 movlw TRUE ; light_off >= (lihgt_bg - THD_BG), C2 = true
Warning[203]: Found opcode in column 1. (goto)
04D6   2???           01229 goto calcfunc_C2next
04D7                  01230 calcfunc_C2false
Warning[203]: Found opcode in column 1. (movlw)
04D7   3000           01231 movlw FALSE
04D8                  01232 calcfunc_C2next
Warning[203]: Found opcode in column 1. (movwf)
04D8   00B8           01233 movwf temp5
                      01234 ; determine the functionality of CL:
Warning[206]: Found call to macro in column 1. (MOVFF)
                      01235 MOVFF FSR, temp
04D9   0834               M         movf temp, w
04DA   0084               M         movwf FSR
Warning[203]: Found opcode in column 1. (clrf)
04DB   0180           01236 clrf INDF ; reset layout byte
                      01237 ; CL_POS_BIT = C0 IOR C1 IOR C2
Warning[203]: Found opcode in column 1. (movf)
04DC   0836           01238 movf temp3, w ; W = C0
Warning[203]: Found opcode in column 1. (iorwf)
04DD   0437           01239 iorwf temp4, w ; W = C0 IOR C1
Warning[203]: Found opcode in column 1. (iorwf)
04DE   0438           01240 iorwf temp5, w ; W = C0 IOR C1 IOR C2
Warning[203]: Found opcode in column 1. (btfsc)
04DF   1903           01241 btfsc STATUS, Z
Warning[203]: Found opcode in column 1. (goto)
04E0   2???           01242 goto calcfunc_POSfalse ; W == 0, false
Warning[203]: Found opcode in column 1. (bsf)
04E1   1400           01243 bsf INDF, CL_POS_BIT ; W <> 0, true
Warning[203]: Found opcode in column 1. (incf)
04E2   0AD0           01244 incf cl_total, f
Warning[203]: Found opcode in column 1. (incf)
04E3   0AB9           01245 incf temp6, f
04E4                  01246 calcfunc_POSfalse
                      01247 ; CL_FN_BIT = (C1 AND (NOT C2)) IOR (C0 AND (NOT C1) AND C2)
Warning[203]: Found opcode in column 1. (movf)
04E4   0838           01248 movf temp5, w ; W = C2
Warning[203]: Found opcode in column 1. (xorlw)
04E5   3AFF           01249 xorlw 0xFF ; W = NOT C2
Warning[203]: Found opcode in column 1. (andwf)
04E6   0537           01250 andwf temp4, w ; W = C1 AND (NOT C2)
04E7   00BA           01251  movwf temp7 ; temperally save
Warning[203]: Found opcode in column 1. (movf)
04E8   0837           01252 movf temp4, w ; W = C1
Warning[203]: Found opcode in column 1. (xorlw)
04E9   3AFF           01253 xorlw 0xFF ; W = NOT C1
Warning[203]: Found opcode in column 1. (andwf)
04EA   0536           01254 andwf temp3, w ; W = C0 AND (NOT C1)
Warning[203]: Found opcode in column 1. (andwf)
04EB   0538           01255 andwf temp5, w ; W = C0 AND (NOT C1) AND C2
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[203]: Found opcode in column 1. (iorwf)
04EC   043A           01256 iorwf temp7, w ; W = (C1 AND(NOT C2))IOR(C0 AND(NOT C1)AND C2)
Warning[203]: Found opcode in column 1. (btfsc)
04ED   1903           01257 btfsc STATUS, Z
Warning[203]: Found opcode in column 1. (goto)
04EE   2???           01258 goto calcfunc_FNfalse ; W == 0, false
Warning[203]: Found opcode in column 1. (bsf)
04EF   1480           01259 bsf INDF, CL_FN_BIT ; W <> 0, true
Warning[203]: Found opcode in column 1. (incf)
04F0   0AD1           01260 incf cl_pass, f
04F1                  01261 calcfunc_FNfalse
                      01262 ; CL_ERR_BIT = (C1 AND (NOT C0)) IOR (C2 AND (NOT C1))
Warning[203]: Found opcode in column 1. (movf)
04F1   0837           01263 movf temp4, w ; W = C1
Warning[203]: Found opcode in column 1. (xorlw)
04F2   3AFF           01264 xorlw 0xFF ; W = NOT C1
Warning[203]: Found opcode in column 1. (andwf)
04F3   0538           01265 andwf temp5, w ; W = C2 AND (NOT C1)
Warning[203]: Found opcode in column 1. (movwf)
04F4   00BA           01266 movwf temp7 ; temperally save
Warning[203]: Found opcode in column 1. (movf)
04F5   0836           01267 movf temp3, w ; W = C0
Warning[203]: Found opcode in column 1. (xorlw)
04F6   3AFF           01268 xorlw 0xFF ; W = NOT C0
Warning[203]: Found opcode in column 1. (andwf)
04F7   0537           01269 andwf temp4, w ; W = C1 AND (NOT C0)
Warning[203]: Found opcode in column 1. (iorwf)
04F8   043A           01270 iorwf temp7, w ; W = (C1 AND (NOT C0)) IOR (C2 AND (NOT C1))
Warning[203]: Found opcode in column 1. (btfss)
04F9   1D03           01271 btfss STATUS, Z
Warning[203]: Found opcode in column 1. (bsf)
04FA   1500           01272 bsf INDF, CL_ERR_BIT ; W <> 0, true
Warning[203]: Found opcode in column 1. (incf)
04FB   0AB4           01273 incf temp, f
Warning[203]: Found opcode in column 1. (incf)
04FC   0AB5           01274 incf temp2, f
Warning[203]: Found opcode in column 1. (movlw)
04FD   3005           01275 movlw COLS
Warning[203]: Found opcode in column 1. (subwf)
04FE   0235           01276 subwf temp2, w ; temp2(col#) - COLS(max col#)
Warning[203]: Found opcode in column 1. (btfss)
04FF   1C03           01277 btfss STATUS, C
Warning[203]: Found opcode in column 1. (goto)
0500   2???           01278 goto calcfunc_loop ; temp2(col#) < COLS(max col#)
                      01279 ; cl_fail = cl_total - cl_pass
Warning[203]: Found opcode in column 1. (movf)
0501   0851           01280 movf cl_pass, w
Warning[203]: Found opcode in column 1. (subwf)
0502   0250           01281 subwf cl_total, w ; cl_total - cl_pass
Warning[203]: Found opcode in column 1. (movwf)
0503   00D2           01282 movwf cl_fail
                      01283 ; advance two rows if "CLs in this row" >= MAXCLINROW
Warning[203]: Found opcode in column 1. (movlw)
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0504   3003           01284 movlw MAXCLINROW
Warning[203]: Found opcode in column 1. (subwf)
0505   0239           01285 subwf temp6, w ; "CLs in this row" - MAXCLINROW
Warning[203]: Found opcode in column 1. (btfss)
0506   1C03           01286 btfss STATUS, C
Warning[203]: Found opcode in column 1. (retlw)
0507   3400           01287 retlw 0x00 ; "CLs in this row" < MAXCLINROW
Warning[203]: Found opcode in column 1. (retlw)
0508   3401           01288 retlw 0x01 ; "CLs in this row" >= MAXCLINROW
                      01289 ;*******************************************************************************
                      01290 ; "calcruntime": Runtime Calculation Function
                      01291 ; Func: Calculate the running time of the run = endtime - starttime
                      01292 ; Input: st_min, st_sec, end_min, end_sec
                      01293 ; Output: runtime
                      01294 ; Affect: W, STATUS, temp
                      01295 ;*******************************************************************************
0509                  01296 calcruntime
0509   084A           01297     movf st_min, w ; temp = end_min - st_min
050A   024D           01298     subwf end_min, w
050B   1803           01299     btfsc STATUS, C
050C   2???           01300     goto calcruntime_next1
050D   3E3C           01301     addlw .60 ; borrow occur, +60min
050E                  01302 calcruntime_next1
050E   00B4           01303     movwf temp
050F   084B           01304     movf st_sec, w ; W = end_sec - st_sec
0510   024E           01305     subwf end_sec, w
0511   1803           01306     btfsc STATUS, C
0512   2???           01307     goto calcruntime_next2
0513   3E3C           01308     addlw .60 ; borrow occur, +60sec
0514   03B4           01309     decf temp, f ; -1min
0515                  01310 calcruntime_next2
0515   08B4           01311     movf temp, f
0516   1903           01312     btfsc STATUS, Z
0517   2???           01313     goto calcruntime_next3 ; temp == 0, runtime = W
0518                  01314 calcruntime_loop ; runtime = W + .60*temp
0518   3E3C           01315     addlw .60
0519   1803           01316     btfsc STATUS, C
051A   2???           01317     goto calcruntime_overflow ; W>255 overflow
051B   0BB4           01318     decfsz temp, f
051C   2???           01319     goto calcruntime_loop
051D                  01320 calcruntime_next3
051D   00CF           01321     movwf runtime
051E   0008           01322     return
051F                  01323 calcruntime_overflow
051F   30FF           01324     movlw 0xFF ; !!!!
0520   00CF           01325     movwf runtime
Warning[203]: Found opcode in column 1. (return)
0521   0008           01326 return
                      01327 ;*******************************************************************************
                      01328 ; "lightsensor": Light Sensor Read, A/D Convert, and Store Function
                      01329 ; Func: Read in analog signal from light sensor, convert it to
                      01330 ; digital, and store the most significant 8-bit result to
                      01331 ; designated address, convert voltage reading to intensity,
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01332 ; take average of LIGHTAVGX readings,
                      01333 ; repeat COLS times for a row
                      01334 ; Input: W = the staring address where the readings will be stored
                      01335 ; Output: readings store into designated bytes
                      01336 ; Affect: W, STATUS, FSR, ADCON0, ADRESH, ADRESL, temp, temp2, temp3
                      01337 ; delaytemp, delaycount, arith_temp, arith_temp2
                      01338 ;*******************************************************************************
0522                  01339 lightsensor
0522   0084           01340     movwf FSR
0523   01B4           01341     clrf temp ; CHS (Channel Select) bits
                      01342     MOVLF temp2, COLS ; number of colume left
0524   3005               M         movlw COLS
0525   00B5               M         movwf temp2
0526                  01343 lightsensor_loop_col
0526   30C7           01344     movlw B'11000111' ; mask CHS bits
0527   059F           01345     andwf ADCON0, f ; clear CHS bits
0528   0834           01346     movf temp, w
0529   049F           01347     iorwf ADCON0, f ; set CHS bits
                      01348     ; avergae = (X1/n) + (X2/n) + ... + (Xn/n)
                      01349     MOVLF temp3, LIGHTAVGX ; count of sample light sensor reading
052A   3004               M         movlw LIGHTAVGX
052B   00B6               M         movwf temp3
052C   0180           01350     clrf INDF
052D                  01351 lightsensor_loop_avg
052D   2???           01352     call delay50us ; require 2Tosc + Tacq = 28us
052E   151F           01353     bsf ADCON0, GO
052F                  01354 lightsensor_poll ; about 40us
052F   191F           01355     btfsc ADCON0, GO
0530   2???           01356     goto lightsensor_poll
0531   081E           01357     movf ADRESH, w ; the most significant 8-bit result
0532   3AFF           01358     xorlw 0xFF ; invert result, since 5V = 0 intensity!!!!
                      01359     DIVLW LIGHTAVGX
0533   00EA               M         movwf arith_temp
0534   3004               M         movlw LIGHTAVGX
0535   2???               M         call divfn
0536   0780           01360     addwf INDF, f
0537   0BB6           01361     decfsz temp3, f
0538   2???           01362     goto lightsensor_loop_avg
0539   3008           01363     movlw B'00001000'
053A   07B4           01364     addwf temp, f ; advance CHS
053B   0A84           01365     incf FSR, f
053C   0BB5           01366     decfsz temp2, f
053D   2???           01367     goto lightsensor_loop_col
Warning[203]: Found opcode in column 1. (return)
053E   0008           01368 return
                      01369 
                      01370 ;*******************************************************************************
                      01371 ; "ledcontrol": IR LEDs Control Function
                      01372 ; Func: Turn on or off the infrared LEDs according to W
                      01373 ; Input: W = turn on or off the LED (0=off or else=on)
                      01374 ; Output: None
                      01375 ; Affect: STATUS
                      01376 ; Runtime: 3.2 us
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01377 ;*******************************************************************************
053F                  01378 ledcontrol
053F   1107           01379     bcf IRLED
0540   3E00           01380     addlw 0x00
0541   1D03           01381     btfss STATUS, Z
0542   1507           01382     bsf IRLED ; if w <> 0, set IRLED
Warning[203]: Found opcode in column 1. (return)
0543   0008           01383 return
                      01384 ;*******************************************************************************
                      01385 ; "movedown": Arm Move Down Control Function
                      01386 ; Func: Order the test arm to move down to the Closet Lights
                      01387 ; Input: None
                      01388 ; Output: None
                      01389 ; Affect: VMOTOR_C0, VMOTOR_C1
                      01390 ; Runtime: ???? us
                      01391 ;*******************************************************************************
0544                  01392 movedown
0544   1509           01393     bsf SMOTOR_EN ; power s_motor to hold position
0545   1087           01394     bcf VMOTOR_C1 ; to be safe
0546   1407           01395     bsf VMOTOR_C0
                      01396     ;movedown_poll
                      01397     ; btfsc FB_BOT
                      01398     ; goto movedown_poll
0547   301E           01399     movlw DCDOWNDELAY
0548   2???           01400     call delayX100msm
0549   1007           01401     bcf VMOTOR_C0
054A   1109           01402     bcf SMOTOR_EN
Warning[203]: Found opcode in column 1. (return)
054B   0008           01403 return
                      01404 ;*******************************************************************************
                      01405 ; "moveup": Arm Move Up Control Function
                      01406 ; Func: Order the test arm to move up to its default position
                      01407 ; Input: None
                      01408 ; Output: None
                      01409 ; Affect: VMOTOR_C0, VMOTOR_C1
                      01410 ; Runtime: ???? us
                      01411 ;*******************************************************************************
054C                  01412 moveup
054C   1509           01413     bsf SMOTOR_EN ; power s_motor to hold position
054D   1007           01414     bcf VMOTOR_C0 ; to be safe
054E   1487           01415     bsf VMOTOR_C1
Warning[207]: Found label after column 1. (moveup_poll)
054F                  01416     moveup_poll
054F   1A87           01417     btfsc FB_TOP
0550   2???           01418     goto moveup_poll
0551   1087           01419     bcf VMOTOR_C1
0552   1109           01420     bcf SMOTOR_EN
Warning[203]: Found opcode in column 1. (return)
0553   0008           01421 return
                      01422 ;*******************************************************************************
                      01423 ; "advancerow": Arm Advance-to-Next-Row Control Function
                      01424 ; Func: Order the test arm to the next(determined by smotor_dir) row
                      01425 ; Input: smotor_dir = direction of stpper motor
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01426 ; (0 = "Row 1" to "Row 4"; 1 = "Row 4" to "Row 1")
                      01427 ; Output: None
                      01428 ; Affect: W, STATUS, temp, SMOTOR_EN, SMOTOR_S0, SMOTOR_S1, SMOTOR_S2,
                      01429 ; SMOTOR_S3, delaytemp, delaycount, delaytemp2, delaycount2,
                      01430 ; delaytemp3, delaycount3
                      01431 ;*******************************************************************************
0554                  01432 advancerow
0554   1088           01433     bcf SMOTOR_S1 ; state init
0555   1489           01434     bsf SMOTOR_S3
0556   1509           01435     bsf SMOTOR_EN ; start motor
0557   301C           01436     movlw SMOTOR_STEPS
0558   00B4           01437     movwf temp
0559   3006           01438     movlw SMOTOR_SPD_F ; note: w must keep its value until very end
055A   08E7           01439     movf smotor_dir, f
055B   1D03           01440     btfss STATUS, Z
055C   2???           01441     goto advancerow_backwardloop
Warning[207]: Found label after column 1. (advancerow_forwardloop)
055D                  01442     advancerow_forwardloop ; smotor_dir == 0, "Row 1" to "Row 4"
055D   1008           01443     bcf SMOTOR_S0
055E   1409           01444     bsf SMOTOR_S2
055F   1F87           01445     btfss FB_ROW4
0560   2???           01446     goto advancerow_end
0561   2???           01447     call delayX5msm
0562   1089           01448     bcf SMOTOR_S3
0563   1488           01449     bsf SMOTOR_S1
0564   1F87           01450     btfss FB_ROW4
0565   2???           01451     goto advancerow_end
0566   2???           01452     call delayX5msm
0567   1009           01453     bcf SMOTOR_S2
0568   1408           01454     bsf SMOTOR_S0
0569   1F87           01455     btfss FB_ROW4
056A   2???           01456     goto advancerow_end
056B   2???           01457     call delayX5msm
056C   1088           01458     bcf SMOTOR_S1
056D   1489           01459     bsf SMOTOR_S3
056E   1F87           01460     btfss FB_ROW4
056F   2???           01461     goto advancerow_end
0570   2???           01462     call delayX5msm
0571   0BB4           01463     decfsz temp, f
0572   2???           01464     goto advancerow_forwardloop
0573   2???           01465     goto advancerow_end
Warning[207]: Found label after column 1. (advancerow_backwardloop)
0574                  01466     advancerow_backwardloop ; smotor_dir <> 0, "Row 4" to "Row 1"
0574   1089           01467     bcf SMOTOR_S3
0575   1488           01468     bsf SMOTOR_S1
0576   2???           01469     call delayX5msm
0577   1008           01470     bcf SMOTOR_S0
0578   1409           01471     bsf SMOTOR_S2
0579   2???           01472     call delayX5msm
057A   1088           01473     bcf SMOTOR_S1
057B   1489           01474     bsf SMOTOR_S3
057C   2???           01475     call delayX5msm
057D   1009           01476     bcf SMOTOR_S2
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

057E   1408           01477     bsf SMOTOR_S0
057F   2???           01478     call delayX5msm
0580   0BB4           01479     decfsz temp, f
0581   2???           01480     goto advancerow_backwardloop
Warning[207]: Found label after column 1. (advancerow_end)
0582                  01481     advancerow_end
0582   1109           01482     bcf SMOTOR_EN
Warning[203]: Found opcode in column 1. (return)
0583   0008           01483 return
                      01484 ;*******************************************************************************
                      01485 ; "writelog": Log Write Function
                      01486 ; Func: Write the result of current run to log
                      01487 ; Input: st_year, st_month, st_day, st_hour, st_min, st_sec,
                      01488 ; runtime, layout[], log_total, log_next
                      01489 ; Output: W = current log index, log_total, log_next, Log Entry
                      01490 ; Affect: STATUS, FSR, temp, temp2, temp3, temp4,
                      01491 ; arith_temp, arith_temp2
                      01492 ;*******************************************************************************
0584                  01493 writelog
                      01494         ; starting address (indirect) offset = (log_next / MAXLOGBANK) * 0x80 + 0x10
0584   0869           01495         movf log_next, w
                      01496         DIVLW MAXLOGBANK
0585   00EA               M         movwf arith_temp
0586   3006               M         movlw MAXLOGBANK
0587   2???               M         call divfn
                      01497         MULLW 0x80
0588   00EA               M         movwf arith_temp
0589   3080               M         movlw 0x80
058A   2???               M         call mulfn
058B   3E10           01498         addlw 0x10
058C   00B4           01499         movwf temp ; save in temp
                      01500         ; starting address (indirect) = (log_next MOD MAXLOGBANK)*LOGLENGTH + offset
058D   0869           01501         movf log_next, w
                      01502         MODLW MAXLOGBANK ; W = log_next mod MAXLOGBANK
058E   00EA               M         movwf arith_temp
058F   3006               M         movlw MAXLOGBANK
0590   2???               M         call divfn
0591   086A               M         movf arith_temp, w
                      01503         MULLW LOGLENGTH
0592   00EA               M         movwf arith_temp
0593   3010               M         movlw LOGLENGTH
0594   2???               M         call mulfn
0595   0734           01504         addwf temp, w
                      01505         ; store easy-access variables
0596   1783           01506         bsf STATUS, IRP ; BANK2&3 indirect access
0597   0084           01507         movwf FSR ; log addr + 0
                      01508         MOVFF INDF, runtime
0598   084F               M         movf runtime, w
0599   0080               M         movwf INDF
059A   0A84           01509         incf FSR, f ; log addr + 1
059B   0E46           01510         swapf st_year, w
059C   0747           01511         addwf st_month, w
059D   0080           01512         movwf INDF
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

059E   0A84           01513         incf FSR, f ; log addr + 2
                      01514         MOVFF INDF, st_day
059F   0848               M         movf st_day, w
05A0   0080               M         movwf INDF
05A1   0A84           01515         incf FSR, f ; log addr + 3
                      01516         MOVFF INDF, st_hour
05A2   0849               M         movf st_hour, w
05A3   0080               M         movwf INDF
05A4   0A84           01517         incf FSR, f ; log addr + 4
                      01518         MOVFF INDF, st_min
05A5   084A               M         movf st_min, w
05A6   0080               M         movwf INDF
05A7   0A84           01519         incf FSR, f ; log addr + 5
                      01520         MOVFF INDF, st_sec
05A8   084B               M         movf st_sec, w
05A9   0080               M         movwf INDF
05AA   0A84           01521         incf FSR, f ; log addr + 6
                      01522         ; store layout
                      01523         MOVFF temp, FSR ; the address of log entry (start at + 6)
05AB   0804               M         movf FSR,  w
05AC   00B4               M         movwf temp
                      01524         MOVLF temp2, layout ; address of layout bytes
05AD   3053               M         movlw layout
05AE   00B5               M         movwf temp2
                      01525         MOVLF temp3, MAXPOS ; position counter
05AF   3014               M         movlw MAXPOS
05B0   00B6               M         movwf temp3
05B1                  01526 writelog_layoutloop ; copy layout bytes in pairs
                      01527         ; write upper ribble
                      01528         MOVFF FSR, temp2 ; get first layout byte
05B1   0835               M         movf temp2, w
05B2   0084               M         movwf FSR
05B3   1383           01529         bcf STATUS, IRP ; BANK0&1 indirect access
05B4   0E00           01530         swapf INDF, w
05B5   00B7           01531         movwf temp4 ; temp4 hold the swaped layout byte temperally
                      01532         MOVFF FSR, temp ; log entry
05B6   0834               M         movf temp, w
05B7   0084               M         movwf FSR
05B8   1783           01533         bsf STATUS, IRP ; BANK2&3 indirect access
                      01534         MOVFF INDF, temp4
05B9   0837               M         movf temp4, w
05BA   0080               M         movwf INDF
05BB   0AB5           01535         incf temp2, f
05BC   03B6           01536         decf temp3, f
05BD   1903           01537         btfsc STATUS, Z
05BE   2???           01538         goto writelog_layoutnext
                      01539         ; write lower ribble
                      01540         MOVFF FSR, temp2 ; get second layout byte
05BF   0835               M         movf temp2, w
05C0   0084               M         movwf FSR
05C1   1383           01541         bcf STATUS, IRP ; BANK0&1 indirect access
                      01542         MOVFF temp4, INDF ; temp4 hold the layout byte temperally
05C2   0800               M         movf INDF, w
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05C3   00B7               M         movwf temp4
                      01543         MOVFF FSR, temp ; log entry
05C4   0834               M         movf temp, w
05C5   0084               M         movwf FSR
05C6   1783           01544         bsf STATUS, IRP ; BANK2&3 indirect access
05C7   0837           01545         movf temp4, w
05C8   0780           01546     addwf INDF, f
05C9   0AB5           01547         incf temp2, f
05CA   0AB4           01548         incf temp, f
05CB   0BB6           01549         decfsz temp3, f
05CC   2???           01550         goto writelog_layoutloop
05CD                  01551 writelog_layoutnext
                      01552         ; calculate new log_next = (log_next + 1) MOD MAXLOG
                      01553         MOVFF temp, log_next ; save current log index in temp
05CD   0869               M         movf log_next, w
05CE   00B4               M         movwf temp
05CF   0AE9           01554         incf log_next, f
05D0   300C           01555         movlw MAXLOG ; test if max log reached
05D1   0269           01556         subwf log_next, w ; log_next + 1 - MAXLOG
05D2   1C03           01557         btfss STATUS, C
05D3   3E0C           01558         addlw MAXLOG ; log_next + 1 < MAXLOG, add MAXLOG back
05D4   00E9           01559         movwf log_next ; log_next = (log_next + 1) MOD MAXLOG
                      01560         ; calculate new log_total
05D5   300C           01561         movlw MAXLOG
05D6   0268           01562         subwf log_total, w ; log_total - MAXLOG
05D7   1C03           01563         btfss STATUS, C
05D8   0AE8           01564         incf log_total, f ; log_total < MAXLOG, increase total number
05D9   0834           01565         movf temp, w ; resume current log entry index
05DA   1383           01566         bcf STATUS, IRP ; back to BANK0&1 indirect access
05DB   0008           01567         return
                      01568 ;*******************************************************************************
                      01569 ; "readlog": Log Read Function
                      01570 ; Func: Read the log of specified run
                      01571 ; Input: W = index of wanted report
                      01572 ; Output: st_year, st_month, st_day, st_hour, st_min, st_sec,
                      01573 ; end_hour, end_min, end_sec, runtime, cl_total, cl_pass,
                      01574 ; cl_fail, layout[]
                      01575 ; Affect: W, STATUS, FSR, temp, temp2, temp3, temp4,
                      01576 ; arith_temp, arith_temp2
                      01577 ;*******************************************************************************
05DC                  01578 readlog
05DC   00B5           01579         movwf temp2 ; save the index in temp2
05DD   01D0           01580         clrf cl_total
05DE   01D1           01581         clrf cl_pass
                      01582         ; starting address (indirect) offset = (index / MAXLOGBANK) * 0x80 + 0x10
                      01583         DIVLW MAXLOGBANK
05DF   00EA               M         movwf arith_temp
05E0   3006               M         movlw MAXLOGBANK
05E1   2???               M         call divfn
                      01584         MULLW 0x80
05E2   00EA               M         movwf arith_temp
05E3   3080               M         movlw 0x80
05E4   2???               M         call mulfn
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05E5   3E10           01585         addlw 0x10
05E6   00B4           01586         movwf temp ; save in temp
                      01587         ; starting address (indirect) = (index MOD MAXLOGBANK)*LOGLENGTH + offset
05E7   0835           01588         movf temp2, w ; resume index
                      01589         MODLW MAXLOGBANK ; W = index mod MAXLOGBANK
05E8   00EA               M         movwf arith_temp
05E9   3006               M         movlw MAXLOGBANK
05EA   2???               M         call divfn
05EB   086A               M         movf arith_temp, w
                      01590         MULLW LOGLENGTH
05EC   00EA               M         movwf arith_temp
05ED   3010               M         movlw LOGLENGTH
05EE   2???               M         call mulfn
05EF   0734           01591         addwf temp, w
                      01592         ; read easy-access variables
05F0   1783           01593         bsf STATUS, IRP ; BANK2&3 indirect access
05F1   0084           01594         movwf FSR ; log addr + 0
                      01595         MOVFF runtime, INDF
05F2   0800               M         movf INDF, w
05F3   00CF               M         movwf runtime
05F4   0A84           01596         incf FSR, f ; log addr + 1
05F5   0E00           01597         swapf INDF, w ; swap upper 4 bits and lower 4 bits
05F6   390F           01598         andlw 0x0F ; mask the lower 4 bits only
05F7   00C6           01599         movwf st_year
05F8   0800           01600         movf INDF, w
05F9   390F           01601         andlw 0x0F ; mask the lower 4 bits only
05FA   00C7           01602         movwf st_month
05FB   0A84           01603         incf FSR, f ; log addr + 2
                      01604         MOVFF st_day, INDF
05FC   0800               M         movf INDF, w
05FD   00C8               M         movwf st_day
05FE   0A84           01605         incf FSR, f ; log addr + 3
                      01606         MOVFF st_hour, INDF
05FF   0800               M         movf INDF, w
0600   00C9               M         movwf st_hour
0601   0A84           01607         incf FSR, f ; log addr + 4
                      01608         MOVFF st_min, INDF
0602   0800               M         movf INDF, w
0603   00CA               M         movwf st_min
0604   0A84           01609         incf FSR, f ; log addr + 5
                      01610         MOVFF st_sec, INDF
0605   0800               M         movf INDF, w
0606   00CB               M         movwf st_sec
0607   0A84           01611         incf FSR, f ; log addr + 6
                      01612          ; read layout[], cl_total and cl_pass
                      01613         MOVFF temp, FSR ; the address of log entry (start at + 6)
0608   0804               M         movf FSR,  w
0609   00B4               M         movwf temp
                      01614         MOVLF temp2, layout ; address of layout bytes
060A   3053               M         movlw layout
060B   00B5               M         movwf temp2
                      01615         MOVLF temp3, MAXPOS ; position counter
060C   3014               M         movlw MAXPOS
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

060D   00B6               M         movwf temp3
060E                  01616 readlog_layoutloop ; read layout bytes in pairs
                      01617         ; read upper ribble
                      01618         MOVFF FSR, temp ; log entry
060E   0834               M         movf temp, w
060F   0084               M         movwf FSR
0610   1783           01619         bsf STATUS, IRP ; BANK2&3 indirect access
0611   0E00           01620         swapf INDF, w
0612   390F           01621         andlw 0x0F ; mask the lower 4 bits only (not 3 bits!!!!)
0613   00B7           01622         movwf temp4 ; temp4 hold the swaped layout byte temperally
                      01623         MOVFF FSR, temp2 ; get first layout byte
0614   0835               M         movf temp2, w
0615   0084               M         movwf FSR
0616   1383           01624         bcf STATUS, IRP ; BANK0&1 indirect access
                      01625         MOVFF INDF, temp4
0617   0837               M         movf temp4, w
0618   0080               M         movwf INDF
0619   1800           01626         btfsc INDF, CL_POS_BIT
061A   0AD0           01627         incf cl_total, f
061B   1880           01628         btfsc INDF, CL_FN_BIT
061C   0AD1           01629         incf cl_pass, f
061D   0AB5           01630         incf temp2, f
061E   03B6           01631         decf temp3, f
061F   1903           01632         btfsc STATUS, Z
0620   2???           01633         goto readlog_layoutnext
                      01634         ; read lower ribble
                      01635         MOVFF FSR, temp ; log entry
0621   0834               M         movf temp, w
0622   0084               M         movwf FSR
0623   1783           01636         bsf STATUS, IRP ; BANK2&3 indirect access
0624   0800           01637         movf INDF, w
0625   390F           01638         andlw 0x0F ; mask the lower 4 bits only (not 3 bits!!!!)
0626   00B7           01639         movwf temp4 ; temp4 hold the layout byte temperally
                      01640         MOVFF FSR, temp2 ; get second layout byte
0627   0835               M         movf temp2, w
0628   0084               M         movwf FSR
0629   1383           01641         bcf STATUS, IRP ; BANK0&1 indirect access
                      01642         MOVFF INDF, temp4
062A   0837               M         movf temp4, w
062B   0080               M         movwf INDF
062C   1800           01643         btfsc INDF, CL_POS_BIT
062D   0AD0           01644         incf cl_total, f
062E   1880           01645         btfsc INDF, CL_FN_BIT
062F   0AD1           01646         incf cl_pass, f
0630   0AB5           01647         incf temp2, f
0631   0AB4           01648         incf temp, f
0632   0BB6           01649         decfsz temp3, f
0633   2???           01650         goto readlog_layoutloop
0634                  01651 readlog_layoutnext
                      01652         ; calculate end time
                      01653         MOVFF end_hour, st_hour
0634   0849               M         movf st_hour, w
0635   00CC               M         movwf end_hour
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01654         MOVFF end_min, st_min
0636   084A               M         movf st_min, w
0637   00CD               M         movwf end_min
                      01655         MOVFF end_sec, st_sec
0638   084B               M         movf st_sec, w
0639   00CE               M         movwf end_sec
063A   084F           01656         movf runtime, w
                      01657         DIVLW .60
063B   00EA               M         movwf arith_temp
063C   303C               M         movlw .60
063D   2???               M         call divfn
063E   07CD           01658         addwf end_min, f ; end_min = st_min + runtime / .60
063F   084F           01659         movf runtime, w
                      01660         MODLW .60
0640   00EA               M         movwf arith_temp
0641   303C               M         movlw .60
0642   2???               M         call divfn
0643   086A               M         movf arith_temp, w
0644   07CE           01661         addwf end_sec, f ; end_sec = st_sec + runtime MOD .60
0645   303C           01662         movlw .60 ; test if 60s
0646   024E           01663         subwf end_sec, w ; w = end_sec - 60
0647   1C03           01664         btfss STATUS, C
0648   2???           01665         goto readlog_endsec_next; end_sec < 60, end_sec OK
0649   303C           01666         movlw .60 ; end_sec >= 60, +1min, -60s
064A   02CE           01667         subwf end_sec, f
064B   0ACD           01668         incf end_min, f
064C                  01669 readlog_endsec_next
064C   303C           01670         movlw .60 ; test if 60min
064D   024D           01671         subwf end_min, w
064E   1C03           01672         btfss STATUS, C
064F   2???           01673         goto readlog_next ; end_min < 60, end_min OK, end_hour should OK
0650   303C           01674         movlw .60 ; end_min >= 60, +1h, -60min
0651   02CD           01675         subwf end_min, f
0652   0ACC           01676         incf end_hour, f
0653   3018           01677         movlw .24 ; test if 24h
0654   024C           01678         subwf end_hour, w
0655   1C03           01679         btfss STATUS, C
0656   2???           01680         goto readlog_next
0657   3018           01681         movlw .24 ; >24h, -24h
0658   02CC           01682         subwf end_hour, f
0659                  01683 readlog_next
                      01684         ; cl_fail = cl_total - cl_pass
0659   0851           01685         movf cl_pass, w
065A   0250           01686         subwf cl_total, w
065B   00D2           01687         movwf cl_fail
065C   1383           01688         bcf STATUS, IRP ; back to BANK0&1 indirect access
065D   0008           01689         return
                      01690 ;*******************************************************************************
                      01691 ; "addsec": Add One Second Function
                      01692 ; Func: Add one second to the second byte of a timer,!!!!!!!!!!!!!!
                      01693 ; increase minute and hour bytes if necessary,
                      01694 ; carry out if day increment occur
                      01695 ; Input: W = Address of the second byte, min byte and hour byte
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01696 ; should be at address W-1 and W-2, respectively
                      01697 ; Output: set STATUS C for day carry out
                      01698 ; Affect: W, FSR
                      01699 ; Runtime: 3.6us/6.4us/9.2us/10.0us
                      01700 ;*******************************************************************************
065E                  01701 addsec
065E   0084           01702         movwf FSR
065F   0A80           01703         incf INDF, f ; +1sec
0660   303C           01704         movlw .60
0661   0200           01705         subwf INDF, w ; W = INDF - 60, test if 60s
0662   1C03           01706         btfss STATUS, C
0663   0008           01707         return ; INDF < 60, C==0, function done
0664   0180           01708         clrf INDF ; >=60s, clear sec
0665   0384           01709         decf FSR, f ; now FSR has address of min byte
0666   0A80           01710         incf INDF, f ; +1min
0667   303C           01711         movlw .60
0668   0200           01712         subwf INDF, w ; W = INDF - 60, test if 60min
0669   1C03           01713         btfss STATUS, C
066A   0008           01714         return ; INDF < 60, C==0, function done
066B   0180           01715         clrf INDF ; >=60min, clear min
066C   0384           01716         decf FSR, f ; now FSR has address of hour byte
066D   0A80           01717         incf INDF, f ; +1hour
066E   3018           01718         movlw .24
066F   0200           01719         subwf INDF, w ; W = INDF - 24, test if 24hour
0670   1C03           01720         btfss STATUS, C
0671   0008           01721         return ; INDF < 24, C==0, function done
0672   0180           01722         clrf INDF ; >=24h, clear hour
0673   0008           01723         return ; C has been set
                      01724 ;*******************************************************************************
                      01725 ; "addday": Add One Day Function
                      01726 ; Func: Add one day to the day byte of a timer,
                      01727 ; increase month and year bytes if necessary, !!!!unfinish
                      01728 ; Input: W = Address of the day byte, month byte and year byte
                      01729 ; should be at address W-1 and W-2, respectively
                      01730 ; Output: None
                      01731 ; Affect: W, STATUS, FSR
                      01732 ; Runtime: 3.6us/6.4us/8.0us
                      01733 ;*******************************************************************************
0674                  01734 addday
0674   0084           01735         movwf FSR
0675   0A80           01736         incf INDF, f ; +1day
0676   301F           01737         movlw .31 ; assume 1 month always= 30 days !!!!
0677   0200           01738         subwf INDF, w ; W = INDF - 31, test if over 30days
0678   1C03           01739         btfss STATUS, C
0679   0008           01740         return ; INDF < 31, C==0, function done
067A   0180           01741         clrf INDF ; >=31s, clear day
Message[305]: Using default destination of 1 (file).
067B   0A80           01742         incf INDF ; day default at 1
067C   0384           01743         decf FSR, f ; now FSR has address of month byte
067D   0A80           01744         incf INDF, f ; +1month
067E   300D           01745         movlw .13
067F   0200           01746         subwf INDF, w ; W = INDF - 13, test if over 12month
0680   1C03           01747         btfss STATUS, C
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0681   0008           01748         return ; INDF < 13, C==0, function done
0682   0180           01749         clrf INDF ; >=13month, clear month
Message[305]: Using default destination of 1 (file).
0683   0A80           01750         incf INDF ; month default at 1
0684   0384           01751         decf FSR, f ; now FSR has address of year byte
0685   0A80           01752         incf INDF, f ; +1year
0686   0008           01753         return
                      01754 ;*******************************************************************************
                      01755 ; "divfn": Byte Integer Division Function
                      01756 ; Func: Devide temp by W and store result in W, not efficient
                      01757 ; Input: Temp = Dividend, W = Dividor
                      01758 ; Output: W = Quotient, arith_temp = reminder,
                      01759 ; set STATUS Z for zero quotient, C for error
                      01760 ; Affect: arith_temp2
                      01761 ;*******************************************************************************
0687                  01762 divfn
0687   3E00           01763         addlw 0x00
0688   1403           01764         bsf STATUS, C ; set carry in case of error
0689   1903           01765         btfsc STATUS, Z ; if zero
068A   0008           01766         return ; return (error C,Z)
068B   01EB           01767         clrf arith_temp2
068C                  01768 divfn_loop
068C   02EA           01769         subwf arith_temp, f
068D   1C03           01770         btfss STATUS, C
068E   2???           01771         goto divfn_next
068F   0AEB           01772         incf arith_temp2, f
0690   2???           01773         goto divfn_loop
0691                  01774 divfn_next
0691   07EA           01775         addwf arith_temp, f
0692   086B           01776         movf arith_temp2, w
0693   0008           01777         return
                      01778 ;*******************************************************************************
                      01779 ; "mulfn": Byte Integer Multiplication Function
                      01780 ; Func: Multiple W by temp and return result in W, not efficient
                      01781 ; Input: Temp, W
                      01782 ; Output: W = Result, set STATUS Z for zero, C for overflow
                      01783 ; Affect: arith_temp, arith_temp2
                      01784 ;*******************************************************************************
0694                  01785 mulfn
0694   1003           01786         bcf STATUS, C ; clr C bit for arith_temp == 0
0695   00EB           01787         movwf arith_temp2 ; store W in arith_temp2
0696   3000           01788         movlw 0x00 ; W = 0 + arith_tempp * arith_temp2
0697   08EA           01789         movf arith_temp, f
0698   1903           01790         btfsc STATUS, Z
0699   0008           01791         return ; arith_temp == 0, return 0
069A                  01792 mulfn_loop
069A   076B           01793         addwf arith_temp2, w
069B   1803           01794         btfsc STATUS, C
069C   2???           01795         goto mulfn_overflow ; W>255 overflow
069D   0BEA           01796         decfsz arith_temp, f
069E   2???           01797         goto mulfn_loop
069F                  01798 mulfn_overflow
069F   0008           01799         return
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

3F72                  01800         end
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BANK0                             
BANK00                            
BANK1                             
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CALC_POS                          
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CL_ERR_BIT                        2
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

CL_FN_BIT                         1
CL_POS_BIT                        0
COLS                              00000005
COPY_DEC1                         
COPY_DEC2                         
COPY_DEC3                         
COPY_LAYOUT                       
COPY_STRING                       
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DCDOWNDELAY                       0000001E
DEBUG                             
DIVLW                             
D_A                               00000005
D_NOT_A                           00000005
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FALSE                             0x00
FB_ROW4                           PORTC, 7
FB_TOP                            PORTC, 5
FERR                              00000002
FSR                               00000004
FSR_temp                          00000002
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INITVAL_ADCON0                    B'10000001'
INITVAL_ADCON1                    B'00000010'
INITVAL_OPTREG                    B'10000101'
INITVAL_TRISA                     B'00101111'
INITVAL_TRISB                     B'11110010'
INITVAL_TRISC                     B'10100000'
INITVAL_TRISD                     B'00000000'
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

INITVAL_TRISE                     B'00000000'
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRLED                             PORTC, 2
IRLED_OFF                         
IRLED_ON                          
IRP                               00000007
KEYPAD_DA                         PORTB, 1
LCD_E                             PORTD, 3
LCD_PORT                          PORTD
LCD_RS                            PORTD, 2
LCD_clear                         00000000
LCD_init                          00000000
LCD_line2                         00000000
LCD_out                           00000000
LCD_wt                            00000000
LCDline                           00000023
LIGHTAVGX                         00000004
LOGLENGTH                         00000010
MAXCLINROW                        00000003
MAXLINE                           00000009
MAXLOG                            0000000C
MAXLOGBANK                        00000006
MAXPOS                            00000014
ML_finish                         000002E4
ML_finish_0                       000003AA
ML_finish_1                       000003AD
ML_hdinit                         000002A1
ML_hdinit_0                       000002EF
ML_hdinit_1                       000002F2
ML_noreport                       000002BA
ML_noreport_0                     0000031F
ML_noreport_1                     00000322
ML_realtime                       000002AF
ML_realtime_0                     000002F5
ML_realtime_1                     0000030B
ML_report                         000002C5
ML_report_0                       00000325
ML_report_1                       00000340
ML_report_10                      0000039F
ML_report_2                       00000356
ML_report_3                       0000036C
ML_report_4                       00000376
ML_report_5                       0000037E
ML_report_6                       0000038D
ML_report_7                       00000390
ML_report_8                       00000395
ML_report_9                       0000039A
ML_rtcinit                        000002AC
ML_run                            000002D9
ML_run_0                          000003A4
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

ML_run_1                          000003A7
MODLW                             
MOVFF                             
MOVLF                             
MULLW                             
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NULL                              0x00
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHASE_FINISH                      6
PHASE_HDINIT                      0
PHASE_NOREPORT                    3
PHASE_REALTIME                    2
PHASE_REPORT                      4
PHASE_RTCINIT                     1
PHASE_RUN                         5
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PRINT_DOT                         
PS0                               00000000
PS1                               00000001
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
ROWS                              00000004
RP0                               00000005
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

RP1                               00000006
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMOTOR_EN                         PORTE, 2
SMOTOR_S0                         PORTD, 0
SMOTOR_S1                         PORTD, 1
SMOTOR_S2                         PORTE, 0
SMOTOR_S3                         PORTE, 1
SMOTOR_SPD_F                      00000006
SMOTOR_STEPS                      0000001C
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STOP_BUT                          0x0B
STORE_LIGHT                       
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TABLE                             
THD_BG                            00000005
THD_CL3LED                        00000050
THD_IRLED                         0000001C
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TRUE                              0xFF
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
VMOTOR_C0                         PORTC, 0
VMOTOR_C1                         PORTC, 1
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
addday                            00000674
addsec                            0000065E
advancerow                        00000554
advancerow_backwardloop           00000574
advancerow_end                    00000582
advancerow_forwardloop            0000055D
arg                               0000003B
arg2                              0000003C
arith_temp                        0000006A
arith_temp2                       0000006B
calcfunc                          000004B0
calcfunc_C1false                  000004C6
calcfunc_C1next                   000004C7
calcfunc_C2false                  000004D7
calcfunc_C2next                   000004D8
calcfunc_FNfalse                  000004F1
calcfunc_POSfalse                 000004E4
calcfunc_loop                     000004B7
calcpos                           00000499
calcpos_loop                      0000049B
calcpos_next                      000004A8
calcruntime                       00000509
calcruntime_loop                  00000518
calcruntime_next1                 0000050E
calcruntime_next2                 00000515
calcruntime_next3                 0000051D
calcruntime_overflow              0000051F
char_keynumber                    000000D9
char_layout                       000000D1
char_slash                        000000E9
cl_fail                           00000052
cl_pass                           00000051
cl_total                          00000050
copydec                           000003E1
copydec_copyhundreds              000003EC
copydec_copytens                  00000400
copydec_ending                    0000040B
copydec_ones                      00000403
copydec_tens                      000003F1
copylayout                        000003C1
copylayout_charloop               000003CE
copylayout_next                   000003C9
copylayout_startloop              000003C6
copystring                        000003B7
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

copystring_loop                   000003B8
delay100ms                        00000000
delay1sl                          00000000
delay50us                         00000000
delay5ms                          00000000
delayX100msm                      00000000
delayX5msm                        00000000
display                           00000280
divfn                             00000687
divfn_loop                        0000068C
divfn_next                        00000691
end_hour                          0000004C
end_min                           0000004D
end_sec                           0000004E
init                              00000125
init_pic                          00000130
int_rb_end                        0000011D
int_rb_skip                       0000011E
int_tmr0_end                      00000107
int_tmr0_skip                     00000108
interrupt                         000000F0
keypad_timeout                    0000027A
keypoll                           000000EC
keyresp                           00000202
keyresp_next                      0000021C
kp_to_nonewsec                    0000027F
layout                            00000053
ledcontrol                        0000053F
light_bg                          000000B0
light_cl                          000000BA
light_off                         000000BF
light_pos                         000000B5
lightsensor                       00000522
lightsensor_loop_avg              0000052D
lightsensor_loop_col              00000526
lightsensor_poll                  0000052F
line_num                          00000022
literal                           00000005
literal_addr                      0000003D
log_next                          00000069
log_total                         00000068
main                              000000EB
makeline                          0000028E
movedown                          00000544
moveup                            0000054C
moveup_poll                       0000054F
mulfn                             00000694
mulfn_loop                        0000069A
mulfn_overflow                    0000069F
newsec                            0000006C
phase                             00000020
readlog                           000005DC
readlog_endsec_next               0000064C
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

readlog_layoutloop                0000060E
readlog_layoutnext                00000634
readlog_next                      00000659
realtime                          00000220
report                            00000224
report_last                       0000022B
report_next                       00000241
report_num                        00000021
reset_hardware                    00000150
reset_realtime                    00000160
reset_rt_hms                      000001BF
reset_rt_hms0                     000001DB
reset_rt_hms1                     000001E2
reset_rt_hms2                     000001E6
reset_rt_hms3                     000001ED
reset_rt_hms4                     000001F1
reset_rt_hms5                     000001F8
reset_rt_hmsrl                    000001FB
reset_rt_ymd                      00000175
reset_rt_ymd0                     00000191
reset_rt_ymd1                     00000198
reset_rt_ymd2                     0000019C
reset_rt_ymd3                     000001A3
reset_rt_ymd4                     000001A7
reset_rt_ymd5                     000001AE
reset_rt_ymdrl                    000001B1
reset_software                    00000147
result_addr                       0000003F
rowleft                           0000003E
rt_counter                        00000003
rt_day                            00000042
rt_hour                           00000043
rt_min                            00000044
rt_month                          00000041
rt_sec                            00000045
rt_year                           00000040
run                               00000416
run_clearlayoutloop               00000426
run_end                           0000048C
run_init_smotornext               00000432
run_loop                          00000441
run_nextRAM_next                  00000472
run_nextRAM_next2                 00000482
run_nextRAM_reverse               00000471
run_nextRAM_reverse2              00000481
run_noextrarow                    0000047B
runtime                           0000004F
scroll_down                       0000025D
scroll_up                         00000255
smotor_dir                        00000067
st_day                            00000048
st_hour                           00000049
st_min                            0000004A
MPASM  5.48                       TEST2_1.ASM   2-9-2013  18:22:50         PAGE 63


SYMBOL TABLE
  LABEL                             VALUE 

st_month                          00000047
st_sec                            0000004B
st_year                           00000046
startrun                          00000266
status_temp                       00000001
stop                              0000011C
stoprun                           00000279
str_colon                         00000046
str_dash                          00000044
str_dot                           000000B0
str_emerstop                      000000C1
str_enterhms                      00000033
str_enterymd                      00000023
str_entry                         00000048
str_fail                          00000080
str_finish                        0000005C
str_init                          00000009
str_insp_fin                      000000B2
str_layout                        00000088
str_layout1                       00000090
str_layout2                       00000098
str_layout3                       0000009C
str_layout4                       000000A0
str_noreport                      00000019
str_null                          000000D0
str_pass                          00000079
str_running                       000000A8
str_runtime                       00000065
str_s                             0000006F
str_start                         00000054
str_total                         00000071
str_yearhead                      00000041
table_temp                        00000004
temp                              00000034
temp2                             00000035
temp3                             00000036
temp4                             00000037
temp5                             00000038
temp6                             00000039
temp7                             0000003A
unused_key                        0000021C
w_temp                            00000000
wait_release                      0000021C
writeline                         0000040E
writeline_loop                    00000410
writelog                          00000584
writelog_layoutloop               000005B1
writelog_layoutnext               000005CD

Errors   :     0
Warnings :   127 reported,     0 suppressed
Messages :     9 reported,     0 suppressed

