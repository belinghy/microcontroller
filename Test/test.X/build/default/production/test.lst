MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001         list p=16f877 ; list directive to define processor
                      00002         #include <p16f877.inc> ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2012 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003         __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP
                            _OFF
                      00004         #include <common.inc>
                      00001         ;extern LCD_init, LCD_clear, LCD_line2s, LCD_out, LCD_wt, delay50us, delay5ms, delayX5msm, delay
                            100ms, delayX100msm, delay1sl
                      00002 
                      00003 
                      00004         #define DEBUG
                      00005         #define NULL 0x00 ; must not change
                      00006         #define FALSE 0x00 ; must not change
                      00007         #define TRUE 0xFF ; must not change
                      00008         #define KEYPAD_DA PORTB, 1
                      00009         #define SMOTOR_S0 PORTD, 0
                      00010         #define SMOTOR_S1 PORTD, 1
                      00011         #define SMOTOR_S2 PORTE, 0
                      00012         #define SMOTOR_S3 PORTE, 1
                      00013         #define SMOTOR_EN PORTE, 2
                      00014         #define VMOTOR_C0 PORTC, 0
                      00015         #define VMOTOR_C1 PORTC, 1
                      00016         #define IRLED PORTC, 2
                      00017         #define FB_TOP PORTC, 5
                      00018         ; #define FB_BOT PORTC, 6
                      00019         #define FB_ROW4 PORTC, 7
                      00020         #define LCD_RS PORTD, 2
                      00021         #define LCD_E PORTD, 3
                      00022         #define LCD_PORT PORTD
                      00023         #define CL_POS_BIT 0
                      00024         #define CL_FN_BIT 1
                      00025         #define CL_ERR_BIT 2
                      00026         #define STOP_BUT 0x0B ; stop buttom
                      00027         #define PHASE_HDINIT 0 ; Phase 0: Hardware Initialization/Reset
                      00028         #define PHASE_RTCINIT 1 ; Phase 1: RTC Initialization/Reset
                      00029         #define PHASE_REALTIME 2 ; Phase 2: Real Time
                      00030         #define PHASE_NOREPORT 3 ; Phase 3: No Report
                      00031         #define PHASE_REPORT 4 ; Phase 4: Report Review
                      00032         #define PHASE_RUN 5 ; Phase 5: Inspection Run
                      00033         #define PHASE_FINISH 6 ; Phase 6: Inspection Finish
                      00034         ; pull-up diable, Timer0 internal clk, pos edge, 1:64
                      00035         #define INITVAL_OPTREG B'10000101'
                      00036         #define INITVAL_TRISA B'00101111'
                      00037         #define INITVAL_TRISB B'11110010'
                      00038         #define INITVAL_TRISC B'10100000' ;B'11100000'!!!!
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039         #define INITVAL_TRISD B'00000000'
                      00040         #define INITVAL_TRISE B'00000000'
                      00041         #define INITVAL_ADCON0 B'10000001' ; 32Tosc, AN0, ADC on
                      00042         #define INITVAL_ADCON1 B'00000010' ; left justified, 5 channel, 0 Vref
                      00043 ;******************CONSTANTS****************************************************
  00000009            00044 MAXLINE EQU .9 ; (max "line_num" - 1) in report phase
  00000014            00045 MAXPOS EQU .20 ; total positions = ROWS*COLS
  00000004            00046 ROWS EQU .4 ; total 4 rows to move
  00000005            00047 COLS EQU .5 ; total 5 cols in a row
  00000003            00048 MAXCLINROW EQU .3 ; max number of CLs possible in a row
  0000001E            00049 DCDOWNDELAY EQU .30 ; * 0.1s == elapse time for DC motor to drive down
  0000001C            00050 SMOTOR_STEPS EQU .28 ; * 4 == # of steps that stepper motor need to turn
  00000006            00051 SMOTOR_SPD_F EQU .6 ; speed fact: speed = 1 step / (SMOTOR_SPD_F * 5ms)
  00000050            00052 THD_CL3LED EQU .80 ; threshold to distinguish between 2 LEDs and 3LEDS
  0000001C            00053 THD_IRLED EQU .28 ; threshold for infrared reflected light
  00000005            00054 THD_BG EQU .5 ; threshold for background variation (add to light_bg)
  0000000C            00055 MAXLOG EQU .12 ; max number of log
  00000006            00056 MAXLOGBANK EQU .6 ; max number of log per bank = MAXLOG/2
  00000010            00057 LOGLENGTH EQU .16 ; length of each log entry
  00000004            00058 LIGHTAVGX EQU .4 ; number of sample light sensor reading to be averaged
                      00059 ;******************MACROS*******************************************************
                      00060 BANK0 macro
                      00061         bcf STATUS, RP0
                      00062         endm
                      00063 BANK1 macro
                      00064         bsf STATUS, RP0
                      00065         endm
                      00066 BANK00 macro
                      00067         bcf STATUS, IRP
                      00068         bcf STATUS, RP1
                      00069         bcf STATUS, RP0
                      00070         endm
                      00071         ;BANK02 macro
                      00072         ; bsf STATUS, IRP
                      00073         ; bsf STATUS, RP1
                      00074         ; bcf STATUS, RP0
                      00075         ; endm
                      00076         ;
                      00077         ;BANK03 macro
                      00078         ; bsf STATUS, IRP
                      00079         ; bsf STATUS, RP1
                      00080         ; bsf STATUS, RP0
                      00081         ; endm
                      00082         ; Affect W!
                      00083 MOVFF macro dest, orig
                      00084         movf orig, w
                      00085         movwf dest
                      00086         endm
                      00087 ; Affect W!
                      00088 MOVLF macro dest, literal
                      00089         movlw literal
                      00090         movwf dest
                      00091         endm
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00092         
  0000                00005         extern LCD_init, LCD_clear, LCD_line2, LCD_out, LCD_wt
  0000                00006         extern delay50us, delay5ms, delayX5msm, delay100ms, delayX100msm, delay1sl
                      00007 ;******************VARIABLES****************************************************
                      00008         cblock 0x20
  00000020            00009                 phase ; 0 = realtime, 1 = report, 2 = run
  00000021            00010                 report_num
  00000022            00011                 line_num
  00000023            00012                 LCDline : .17 ; 16 + null
  00000034            00013                 temp ; only local use: must be discard before calling/jumping
  00000035            00014                 temp2
  00000036            00015                 temp3
  00000037            00016                 temp4
  00000038            00017                 temp5
  00000039            00018                 temp6
  0000003A            00019                 temp7
  0000003B            00020                 arg ; argument
  0000003C            00021                 arg2
  0000003D            00022                 literal_addr
  0000003E            00023                 rowleft ; how many rows left to inspect
  0000003F            00024                 result_addr ; adress to store result of current row in "layout"
  00000040            00025                 rt_year ; realtime
  00000041            00026                 rt_month
  00000042            00027                 rt_day
  00000043            00028                 rt_hour
  00000044            00029                 rt_min
  00000045            00030                 rt_sec
  00000046            00031                 st_year ; start
  00000047            00032                 st_month
  00000048            00033                 st_day
  00000049            00034                 st_hour
  0000004A            00035                 st_min
  0000004B            00036                 st_sec
  0000004C            00037                 end_hour
  0000004D            00038                 end_min
  0000004E            00039                 end_sec
  0000004F            00040                 runtime
  00000050            00041                 cl_total
  00000051            00042                 cl_pass
  00000052            00043                 cl_fail
  00000053            00044                 layout : .20 ; result
  00000067            00045                 smotor_dir ; direction of stepper motor
  00000068            00046                 log_total ; total numbers of reports available
  00000069            00047                 log_next ; index of where next report will be written
  0000006A            00048                 arith_temp ; arithmetic temp
  0000006B            00049                 arith_temp2
  0000006C            00050                 newsec ; a new second occur (Bool from interrupt)
                      00051         endc
                      00052         cblock 0xB0
  000000B0            00053                 light_bg : 5 ; background light intensity of current row
  000000B5            00054                 light_pos : 5 ; position reflected light intensity of current row
  000000BA            00055                 light_cl : 5 ; closet light LEDs light intensity of current row
  000000BF            00056                 light_off : 5 ; closet light off light intensity of current row
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00057         endc
                      00058 
                      00059         udata_shr
0000                  00060 w_temp res 1
0001                  00061 status_temp res 1
                      00062 ;pclath_temp res 1
0002                  00063 FSR_temp res 1
0003                  00064 rt_counter res 1 ; real time counter
0004                  00065 table_temp res 1
                      00066 
                      00067 ;******************MACROS*******************************************************
                      00068 DIVLW macro L
                      00069         movwf arith_temp
                      00070         movlw L
                      00071         call divfn
Warning[205]: Found directive in column 1. (endm)
                      00072 endm
                      00073 
                      00074 MODLW macro L
                      00075         movwf arith_temp
                      00076         movlw L
                      00077         call divfn
                      00078         movf arith_temp, w
Warning[205]: Found directive in column 1. (endm)
                      00079 endm
                      00080 
                      00081 MULLW macro L
                      00082         movwf arith_temp
                      00083         movlw L
                      00084         call mulfn
Warning[205]: Found directive in column 1. (endm)
                      00085 endm
                      00086 
                      00087 COPY_STRING macro string_table
                      00088         movlw string_table
                      00089         call copystring
Warning[205]: Found directive in column 1. (endm)
                      00090 endm
                      00091 
                      00092 COPY_LAYOUT macro rownum
                      00093         movlw rownum
                      00094         call copylayout
Warning[205]: Found directive in column 1. (endm)
                      00095 endm
                      00096 
                      00097 COPY_DEC1 macro decnumber
                      00098         movf decnumber, w
                      00099         movwf arg
                      00100         movlw 0x01
                      00101         movwf arg2
                      00102         call copydec
Warning[205]: Found directive in column 1. (endm)
                      00103 endm
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00104 
                      00105 COPY_DEC2 macro decnumber
                      00106         movf decnumber, w
                      00107         movwf arg
                      00108         movlw 0x02
                      00109         movwf arg2
                      00110         call copydec
Warning[205]: Found directive in column 1. (endm)
                      00111 endm
                      00112 
                      00113 COPY_DEC3 macro decnumber
                      00114         movf decnumber, w
                      00115         movwf arg
                      00116         movlw 0x03
                      00117         movwf arg2
                      00118         call copydec
Warning[205]: Found directive in column 1. (endm)
                      00119 endm
                      00120 
                      00121 TABLE macro
                      00122         local tablename
                      00123         movwf table_temp
                      00124         movlw HIGH tablename
                      00125         movwf PCLATH
                      00126         movf table_temp, w
                      00127         addlw LOW tablename
                      00128         btfsc STATUS, C
                      00129         incf PCLATH, f
                      00130         movwf PCL
                      00131         tablename
Warning[205]: Found directive in column 1. (endm)
                      00132 endm
                      00133 
                      00134 STORE_LIGHT macro addr
                      00135         movlw addr
                      00136         call lightsensor
Warning[205]: Found directive in column 1. (endm)
                      00137 endm
                      00138 
                      00139 IRLED_ON macro
                      00140         movlw 0x01
                      00141         call ledcontrol
Warning[205]: Found directive in column 1. (endm)
                      00142 endm
                      00143 
                      00144 IRLED_OFF macro
                      00145         movlw 0x00
                      00146         call ledcontrol
Warning[205]: Found directive in column 1. (endm)
                      00147 endm
                      00148 
                      00149 CALC_POS macro threshold
                      00150         movwf temp
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151         movlw threshold
                      00152         movwf temp4
                      00153         call calcpos
Warning[205]: Found directive in column 1. (endm)
                      00154 endm
                      00155 
                      00156 PRINT_DOT macro
                      00157         MOVLF FSR, LCDline
                      00158         COPY_STRING str_dot
                      00159         call writeline
Warning[205]: Found directive in column 1. (endm)
                      00160 endm
                      00161 ;*******************************************************************************
                      00162 ;*******************************************************************************
                      00163         org 0x0000
                      00164         #IFNDEF DEBUG
                      00165         goto main
                      00166         #ELSE
0000   2???           00167         goto mac_test
                      00168         #ENDIF
                      00169         #IFNDEF DEBUG
                      00170         org 0x0004
                      00171         goto interrupt
                      00172         #ENDIF
                      00173 ;*******************************************************************************
                      00174 ; "literal": String Literal Function
                      00175 ; Func: Store all string literal in this project here, it return
                      00176 ; any char wanted
                      00177 ; Input: W = the program memory address of the wanted char
                      00178 ; Output: W = the corresponding char
                      00179 ;*******************************************************************************
                      00180         org 0x0005 ; make sure literal table is in first 256 lines
0005                  00181 literal
0005   00B4           00182         movwf temp
0006   018A           00183         clrf PCLATH
0007   0834           00184         movf temp, w
0008   0082           00185         movwf PCL
                      00186         ; max length 16 dt "0123456789ABCDEF", 0
0009   3449 344E 3449 00187 str_init dt "INITIALIZING...", 0
       3454 3449 3441 
       344C 3449 345A 
       3449 344E 3447 
       342E 342E 342E 
       3400 
0019   344E 344F 3420 00188 str_noreport dt "NO REPORT", 0
       3452 3445 3450 
       344F 3452 3454 
       3400 
0023   3445 344E 3454 00189 str_enterymd dt "ENTER 20YYMMDD:",0
       3445 3452 3420 
       3432 3430 3459 
       3459 344D 344D 
       3444 3444 343A 
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3400 
0033   3445 344E 3454 00190 str_enterhms dt "ENTER hhmmss:", 0
       3445 3452 3420 
       3468 3468 346D 
       346D 3473 3473 
       343A 3400 
0041   3432 3430 3400 00191 str_yearhead dt "20", 0 ; all years like 20XX
0044   342D 3400      00192 str_dash dt "-", 0
0046   343A 3400      00193 str_colon dt ":", 0
0048   344C 344F 3447 00194 str_entry dt "LOG ENTRY: ",0
       3420 3445 344E 
       3454 3452 3459 
       343A 3420 3400 
0054   3453 3454 3441 00195 str_start dt "START: ", 0
       3452 3454 343A 
       3420 3400 
005C   3446 3449 344E 00196 str_finish dt "FINISH: ", 0
       3449 3453 3448 
       343A 3420 3400 
0065   3452 3455 344E 00197 str_runtime dt "RUNTIME: ", 0
       3454 3449 344D 
       3445 343A 3420 
       3400 
006F   3473 3400      00198 str_s dt "s", 0 ; i.e. second
0071   3454 344F 3454 00199 str_total dt "TOTAL: ", 0
       3441 344C 343A 
       3420 3400 
0079   3450 3441 3453 00200 str_pass dt "PASS: ", 0
       3453 343A 3420 
       3400 
0080   3420 3446 3441 00201 str_fail dt " FAIL: ", 0
       3449 344C 343A 
       3420 3400 
0088   344C 3441 3459 00202 str_layout dt "LAYOUT:", 0
       344F 3455 3454 
       343A 3400 
0090   3420 3454 344F 00203 str_layout1 dt " TOP 1 ", 0
       3450 3420 3431 
       3420 3400 
0098   3420 3432 3420 00204 str_layout2 dt " 2 ", 0
       3400 
009C   3420 3433 3420 00205 str_layout3 dt " 3 ", 0
       3400 
00A0   3420 3442 344F 00206 str_layout4 dt " BOT 4 ", 0
       3454 3420 3434 
       3420 3400 
00A8   3452 3455 344E 00207 str_running dt "RUNNING", 0
       344E 3449 344E 
       3447 3400 
00B0   342E 3400      00208 str_dot dt ".", 0
00B2   3449 344E 3453 00209 str_insp_fin dt "INSPECTION FIN", 0
       3450 3445 3443 
       3454 3449 344F 
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       344E 3420 3446 
       3449 344E 3400 
00C1   3445 344D 3445 00210 str_emerstop dt "EMERGENCY STOP", 0
       3452 3447 3445 
       344E 3443 3459 
       3420 3453 3454 
       344F 3450 3400 
00D0   3400           00211 str_null dt 0
                      00212 ; corresponds to the layout byte
00D1   3458 3446 3446 00213 char_layout dt "XFFPXFFP" ;"XF2P4567" ; "XFEPEEEE"
       3450 3458 3446 
       3446 3450 
                      00214 ; corresponds to keypad
00D9   3431 3432 3433 00215 char_keynumber dt "123", 0, "456", 0, "789", 0, 0, "0", 0, 0
       3400 3434 3435 
       3436 3400 3437 
       3438 3439 3400 
       3400 3430 3400 
       3400 
00E9   342F 3400      00216 char_slash dt "/", 0
                      00217 ;????!!!!copy spaceX function
                      00218 
                      00219         code
                      00220 #IFNDEF DEBUG
                      00221 ;*******************************************************************************
                      00222 ; "main": Main Function
                      00223 ; Func: Call initialization and then keep polling the keypad for
                      00224 ; input (or interrupt)
                      00225 ; Input: None
                      00226 ; Output: None
                      00227 ; Affect: *
                      00228 ;*******************************************************************************
                      00229 main
                      00230         call init
                      00231 keypoll
                      00232         btfsc KEYPAD_DA
                      00233         call keyresp
                      00234         call keypad_timeout
                      00235         goto keypoll
                      00236 #ELSE
                      00237 ;*******************************************************************************
                      00238 ; "mac_test": Machenical System Test Function
                      00239 ; Func: Test the machenical system, each botton on keypad
                      00240 ; corresponds to a machine function (i.e. driver)
                      00241 ; Input: None
                      00242 ; Output: None
                      00243 ; Affect: *
                      00244 ;*******************************************************************************
0000                  00245 mac_test
0000   2???           00246         call init_pic
0001   2???           00247         call reset_software
                      00248         ;call reset_hardware
                      00249 ; PORT Reset/Initialization
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00250 ; BANK0
0002   0185           00251         clrf PORTA ; RA4 (Reserved) output 0
0003   0186           00252         clrf PORTB ; RB0, 2, 3 (Reserved) output 0
0004   0187           00253         clrf PORTC ; VMOTOR disable, LED off
0005   0188           00254         clrf PORTD ; clear S0, S1 of SMOTOR
0006   0189           00255         clrf PORTE ; SMOTOR disable, clear S2, S3 of SMOTOR
                      00256         ; LCD Reset/Initialization
0007   2???           00257         call LCD_init
0008   2???           00258         call display
0009                  00259 mac_test_loop
0009   2???           00260         call analogtest2
000A   1886           00261         btfsc KEYPAD_DA
000B   2???           00262         call keyresp_ma
000C   3064           00263         movlw 0x64
000D   2???           00264         call delayX5msm
000E   2???           00265         goto mac_test_loop
000F                  00266 keyresp_ma
000F   0E06           00267         swapf PORTB, w
0010   390F           00268         andlw 0x0F
                      00269         TABLE
  0000                    M         local tablename
0011   00??               M         movwf table_temp
0012   30??               M         movlw HIGH tablename
0013   008A               M         movwf PCLATH
0014   08??               M         movf table_temp, w
0015   3E??               M         addlw LOW tablename
0016   1803               M         btfsc STATUS, C
0017   0A8A               M         incf PCLATH, f
0018   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0019                      M         tablename
                      00270         ;keyresp_switch_table
0019   2???           00271         goto kma0 ; keypressed = 0 "1" = SM forward
001A   2???           00272         goto kma1 ; keypressed = 1 "2" = SM backward
001B   2???           00273         goto kma2 ; keypressed = 2 "3" = SM step
001C   2???           00274         goto kma3 ; keypressed = 3 "A"
001D   2???           00275         goto kma4 ; keypressed = 4 "4" = DC up
001E   2???           00276         goto kma5 ; keypressed = 5 "5" = DC down
001F   2???           00277         goto kma6 ; keypressed = 6 "6" = DC stop
0020   2???           00278         goto kma7 ; keypressed = 7 "B"
0021   2???           00279         goto kma8 ; keypressed = 8 "7" = IRLED on
0022   2???           00280         goto kma9 ; keypressed = 9 "8" = IRLED off
0023   2???           00281         goto kmaA ; keypressed = A "9"
0024   2???           00282         goto kmaB ; keypressed = B "C"
0025   2???           00283         goto kmaC ; keypressed = C "*"
0026   2???           00284         goto kmaD ; keypressed = D "0"
0027   2???           00285         goto kmaE ; keypressed = E "#"
0028   2???           00286         goto kmaF ; keypressed = F "D"
0029                  00287 kma_next
0029                  00288 kma3
0029                  00289 kma7
0029                  00290 kmaA
0029                  00291 kmaB
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0029                  00292 kmaC
0029                  00293 kmaD
0029                  00294 kmaE
0029                  00295 kmaF
0029                  00296 kma_release
0029   1886           00297         btfsc KEYPAD_DA ;Wait until key is released
002A   2???           00298         goto kma_release
002B   0008           00299         return
002C                  00300 kma0
002C   3000           00301         movlw 0x00
002D   00E7           00302         movwf smotor_dir
002E   2???           00303         call advancerow
002F   2???           00304         goto kma_next
0030                  00305 kma1
0030   3001           00306         movlw 0x01
0031   00E7           00307         movwf smotor_dir
0032   2???           00308         call advancerow
0033   2???           00309         goto kma_next
0034                  00310 kma2
0034   1109           00311         bcf SMOTOR_EN
0035   2???           00312         goto kma_next
0036                  00313 kma4
0036   2???           00314         call moveup
0037   2???           00315         goto kma_next
0038                  00316 kma5
0038   2???           00317         call movedown
0039   2???           00318         goto kma_next
003A                  00319 kma6
003A   1007           00320         bcf VMOTOR_C0
003B   1087           00321         bcf VMOTOR_C1
003C   2???           00322         goto kma_next
003D                  00323 kma8
                      00324         IRLED_ON
003D   3001               M         movlw 0x01
003E   2???               M         call ledcontrol
003F   2???           00325         goto kma_next
0040                  00326 kma9
                      00327         IRLED_OFF
0040   3000               M         movlw 0x00
0041   2???               M         call ledcontrol
0042   2???           00328         goto kma_next
                      00329 ;*******************************************************************************
                      00330 ; "analogtest2": Analog-to-Digital Test Function
                      00331 ; Func: Convert RA0 to digital and display its value every second
                      00332 ; Input:
                      00333 ; Output:
                      00334 ; Affect:
                      00335 ;*******************************************************************************
0043                  00336 analogtest2
                      00337         STORE_LIGHT light_bg
0043   30B0               M         movlw light_bg
0044   2???               M         call lightsensor
                      00338         MOVLF temp5, COLS ; counter
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0045   3005               M         movlw COLS
0046   00B8               M         movwf temp5
                      00339         MOVLF temp2, LCDline ; LCDline addr
0047   3023               M         movlw LCDline
0048   00B5               M         movwf temp2
                      00340         MOVLF temp3, light_bg ; storage addr
0049   30B0               M         movlw light_bg
004A   00B6               M         movwf temp3
                      00341 
                      00342         MOVFF FSR, temp3
004B   0836               M         movf temp3, w
004C   0084               M         movwf FSR
                      00343         MOVFF temp4, INDF ; temp storage
004D   0800               M         movf INDF, w
004E   00B7               M         movwf temp4
                      00344         MOVFF FSR, temp2
004F   0835               M         movf temp2, w
0050   0084               M         movwf FSR
                      00345         COPY_DEC3 temp4
0051   0837               M         movf temp4,     w
0052   00BB               M         movwf arg
0053   3003               M         movlw 0x03
0054   00BC               M         movwf arg2
0055   2???               M         call copydec
                      00346         COPY_STRING str_dot
0056   30??               M         movlw str_dot
0057   2???               M         call copystring
                      00347         COPY_STRING str_dot
0058   30??               M         movlw str_dot
0059   2???               M         call copystring
                      00348         COPY_STRING str_dot
005A   30??               M         movlw str_dot
005B   2???               M         call copystring
                      00349         MOVFF temp2, FSR
005C   0804               M         movf FSR,  w
005D   00B5               M         movwf temp2
005E   0AB6           00350         incf temp3, f
005F   0AB6           00351         incf temp3, f
                      00352         MOVFF FSR, temp3
0060   0836               M         movf temp3, w
0061   0084               M         movwf FSR
                      00353         MOVFF temp4, INDF ; temp storage
0062   0800               M         movf INDF, w
0063   00B7               M         movwf temp4
                      00354         MOVFF FSR, temp2
0064   0835               M         movf temp2, w
0065   0084               M         movwf FSR
                      00355         COPY_DEC3 temp4
0066   0837               M         movf temp4,     w
0067   00BB               M         movwf arg
0068   3003               M         movlw 0x03
0069   00BC               M         movwf arg2
006A   2???               M         call copydec
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00356         COPY_STRING str_dot
006B   30??               M         movlw str_dot
006C   2???               M         call copystring
                      00357         COPY_STRING str_dot
006D   30??               M         movlw str_dot
006E   2???               M         call copystring
                      00358         COPY_STRING str_dot
006F   30??               M         movlw str_dot
0070   2???               M         call copystring
                      00359         MOVFF temp2, FSR
0071   0804               M         movf FSR,  w
0072   00B5               M         movwf temp2
0073   0AB6           00360         incf temp3, f
0074   0AB6           00361         incf temp3, f
                      00362         MOVFF FSR, temp3
0075   0836               M         movf temp3, w
0076   0084               M         movwf FSR
                      00363         MOVFF temp4, INDF ; temp storage
0077   0800               M         movf INDF, w
0078   00B7               M         movwf temp4
                      00364         MOVFF FSR, temp2
0079   0835               M         movf temp2, w
007A   0084               M         movwf FSR
                      00365         COPY_DEC3 temp4
007B   0837               M         movf temp4,     w
007C   00BB               M         movwf arg
007D   3003               M         movlw 0x03
007E   00BC               M         movwf arg2
007F   2???               M         call copydec
                      00366         COPY_STRING str_dot
0080   30??               M         movlw str_dot
0081   2???               M         call copystring
                      00367         COPY_STRING str_dot
0082   30??               M         movlw str_dot
0083   2???               M         call copystring
                      00368         COPY_STRING str_dot
0084   30??               M         movlw str_dot
0085   2???               M         call copystring
                      00369         MOVFF temp2, FSR
0086   0804               M         movf FSR,  w
0087   00B5               M         movwf temp2
0088   2???           00370         call LCD_clear ; clear LCD display
0089   2???           00371         call writeline
008A   2???           00372         call LCD_line2
                      00373         MOVLF temp2, LCDline ; LCDline addr
008B   3023               M         movlw LCDline
008C   00B5               M         movwf temp2
                      00374         MOVLF temp3, light_bg ; storage addr
008D   30B0               M         movlw light_bg
008E   00B6               M         movwf temp3
008F   0AB6           00375         incf temp3, f
                      00376         MOVFF FSR, temp3
0090   0836               M         movf temp3, w
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0091   0084               M         movwf FSR
                      00377         MOVFF temp4, INDF ; temp storage
0092   0800               M         movf INDF, w
0093   00B7               M         movwf temp4
                      00378         MOVFF FSR, temp2
0094   0835               M         movf temp2, w
0095   0084               M         movwf FSR
                      00379         COPY_STRING str_dot
0096   30??               M         movlw str_dot
0097   2???               M         call copystring
                      00380         COPY_STRING str_dot
0098   30??               M         movlw str_dot
0099   2???               M         call copystring
                      00381         COPY_STRING str_dot
009A   30??               M         movlw str_dot
009B   2???               M         call copystring
                      00382         COPY_DEC3 temp4
009C   0837               M         movf temp4,     w
009D   00BB               M         movwf arg
009E   3003               M         movlw 0x03
009F   00BC               M         movwf arg2
00A0   2???               M         call copydec
                      00383         COPY_STRING str_dot
00A1   30??               M         movlw str_dot
00A2   2???               M         call copystring
                      00384         COPY_STRING str_dot
00A3   30??               M         movlw str_dot
00A4   2???               M         call copystring
                      00385         COPY_STRING str_dot
00A5   30??               M         movlw str_dot
00A6   2???               M         call copystring
                      00386         MOVFF temp2, FSR
00A7   0804               M         movf FSR,  w
00A8   00B5               M         movwf temp2
00A9   0AB6           00387         incf temp3, f
00AA   0AB6           00388         incf temp3, f
                      00389         MOVFF FSR, temp3
00AB   0836               M         movf temp3, w
00AC   0084               M         movwf FSR
                      00390         MOVFF temp4, INDF ; temp storage
00AD   0800               M         movf INDF, w
00AE   00B7               M         movwf temp4
                      00391         MOVFF FSR, temp2
00AF   0835               M         movf temp2, w
00B0   0084               M         movwf FSR
                      00392         COPY_DEC3 temp4
00B1   0837               M         movf temp4,     w
00B2   00BB               M         movwf arg
00B3   3003               M         movlw 0x03
00B4   00BC               M         movwf arg2
00B5   2???               M         call copydec
                      00393         MOVFF temp2, FSR
00B6   0804               M         movf FSR,  w
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B7   00B5               M         movwf temp2
00B8   2???           00394         call writeline
00B9   2???           00395         call LCD_out
                      00396 ;ADCtest2_loop2
                      00397 ; MOVFF FSR, temp3
                      00398 ; MOVFF temp4, INDF ; temp storage
                      00399 ; MOVFF FSR, temp2
                      00400 ; COPY_DEC3 temp4
                      00401 ;; COPY_STRING str_dot
                      00402 ; MOVFF temp2, FSR
                      00403 ; incf temp3, f
                      00404 ; decfsz temp5,f
                      00405 ; goto ADCtest2_loop2
                      00406 ;
                      00407 ; call LCD_clear ; clear LCD display
                      00408 ; call writeline
00BA   0008           00409         return
                      00410 
                      00411 ;*******************************************************************************
                      00412 ; "analogtest": Analog-to-Digital Test Function
                      00413 ; Func: Convert RA0 to digital and display its value every second
                      00414 ; Input:
                      00415 ; Output:
                      00416 ; Affect:
                      00417 ;*******************************************************************************
00BB                  00418 analogtest
Warning[207]: Found label after column 1. (ADCtest_loop)
00BB                  00419         ADCtest_loop
00BB   2???           00420         call delay50us ; require 2Tosc + Tacq = 28us
00BC   151F           00421         bsf ADCON0, GO
00BD                  00422 analog_poll ; about 40us
00BD   191F           00423         btfsc ADCON0, GO
00BE   2???           00424         goto analog_poll
00BF   081E           00425         movf ADRESH, w
                      00426         MOVLF FSR, LCDline
00C0   3023               M         movlw LCDline
00C1   0084               M         movwf FSR
                      00427         COPY_DEC1 ADRESH
00C2   081E               M         movf ADRESH,    w
00C3   00BB               M         movwf arg
00C4   3001               M         movlw 0x01
00C5   00BC               M         movwf arg2
00C6   2???               M         call copydec
00C7   2???           00428         call LCD_clear ; clear LCD display
00C8   2???           00429         call writeline
                      00430         ; delay 0.5s
00C9   3064           00431         movlw 0x64
00CA   00B4           00432         movwf temp
00CB                  00433 ADCtest_simpledelay
00CB   2???           00434         call delay5ms
00CC   0BB4           00435         decfsz temp, f
00CD   2???           00436         goto ADCtest_simpledelay
00CE   2???           00437         goto ADCtest_loop
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00438 #ENDIF
                      00439 
                      00440 #IFNDEF DEBUG
                      00441 ;*******************************************************************************
                      00442 ; "interrupt": Interrupt Handle Function
                      00443 ; Func: Handle all interrupt that occurs in runtime
                      00444 ; Input: INTCON
                      00445 ; Output: INTCON, rt_*, newsec
                      00446 ; Affect: None (w_temp, status_temp)
                      00447 ;*******************************************************************************
                      00448 interrupt
                      00449         movwf w_temp ; save W
                      00450         swapf STATUS, w ; save STATUS, note swapf will not affect STATUS
                      00451         BANK00
                      00452         movwf status_temp
                      00453         ; movf PCLATH, w ; save page information
                      00454         ; movwf pclath_temp
                      00455         ; clrf PCLATH
                      00456         movf FSR, w ; save FSR
                      00457         movwf FSR_temp
                      00458 
                      00459         ; Timer0 Interrupt Handle
                      00460         ; T0IE always on, no test
                      00461         btfss INTCON, T0IF
                      00462         goto int_tmr0_skip
                      00463         incf rt_counter, f
                      00464         movf rt_counter, w ; test with 98h, correponds to 996,147.2us
                      00465         sublw 0x98
                      00466         btfss STATUS, Z
                      00467         goto int_tmr0_end ; rt_counter <> 98h
                      00468         clrf rt_counter ; rt_counter == 98h
                      00469         movlw rt_sec
                      00470         call addsec
                      00471         movlw rt_day
                      00472         btfsc STATUS, C
                      00473         call addday ; addday if carry from addsec
                      00474         MOVLF newsec, TRUE
                      00475 int_tmr0_end
                      00476         bcf INTCON, T0IF
                      00477 int_tmr0_skip
                      00478         ; Keypad (PORTB) Change Interrupt
                      00479         btfss INTCON, RBIE ; interrept must be enabled first
                      00480         goto int_rb_skip
                      00481         btfss INTCON, RBIF
                      00482         goto int_rb_skip
                      00483         swapf PORTB, w ; test PORTB<7:4> against stop button
                      00484         andlw 0x0F
                      00485         sublw STOP_BUT
                      00486         btfss STATUS, Z
                      00487         goto int_rb_end
                      00488         ; Emergency Stop!!!!
                      00489         bcf IRLED ; turn off IRLEDs
                      00490         bcf VMOTOR_C0 ; turn off v motor
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00491         bcf VMOTOR_C1
                      00492         bcf SMOTOR_EN ; turn off s motor
                      00493         MOVLF FSR, LCDline ; display emergency stop
                      00494         COPY_STRING str_emerstop
                      00495         call LCD_clear ; clear LCD display
                      00496         call writeline
                      00497         call LCD_out
                      00498         stop goto stop ; hang the program
                      00499 int_rb_end
                      00500         bcf INTCON, RBIF
                      00501 int_rb_skip
                      00502         movf FSR_temp, w ; restore FSR
                      00503         movwf FSR
                      00504         ; movf pclath_temp, w ; restore page information
                      00505         ; movwf PCLATH
                      00506         swapf status_temp, w ; restore STATUS
                      00507         movwf STATUS
                      00508         swapf w_temp, f ; restore W, not affecting STATUS
                      00509         swapf w_temp, w
                      00510 retfie
                      00511 
                      00512 ;*******************************************************************************
                      00513 ; "init": Initialization Function
                      00514 ; Func: Initialize chip settings, variables and reset hardware
                      00515 ; position
                      00516 ; Input: None
                      00517 ; Output: *
                      00518 ; Affect: W, STATUS, temp, delaytemp, delaycount, delaytemp2,
                      00519 ; delaycount2, delaytemp3, delaycount3
                      00520 ;*******************************************************************************
                      00521 init
                      00522         call init_pic
                      00523         call reset_software
                      00524         ;call reset_hardware
                      00525         call reset_realtime
                      00526         clrf TMR0 ; start timing
                      00527         bsf INTCON, T0IE
                      00528         bsf INTCON, GIE
                      00529         movlw PHASE_REALTIME
                      00530         movwf phase
                      00531         call display
                      00532         return
                      00533 #ENDIF
                      00534 
                      00535 ;*******************************************************************************
                      00536 ; "init_pic": PIC Initialization Function
                      00537 ; Func: Initialize chip settings: Interrupt, TMR0, PORT, ADC
                      00538 ; Input: None
                      00539 ; Output: INTCON, TRISA, TRISB, TRISC, TRISD, TRISE, ADCCON0, ADCCON1
                      00540 ; Affect: W, STATUS
                      00541 ;*******************************************************************************
00CF                  00542 init_pic
                      00543 ; Interrupt Initialization
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00544 ; Disable Global interrupt, diable peripheral interrupt, enable timer0 and
                      00545 ; PORTB interrupton change (keypad), diable RB0 interrupt
                      00546 ; #define INITVAL_INTCON B'00101000'
                      00547 ; movlw INITVAL_INTCON
Warning[203]: Found opcode in column 1. (clrf)
00CF   018B           00548 clrf INTCON
                      00549 ;
                      00550 ;clrf SSPBUF
                      00551 ;BANK1
                      00552 ;clrf TXSTA
                      00553 ;clrf PIE1
                      00554 ;clrf PIE2
                      00555 ; Timer0 Initialization
                      00556         BANK0
00D0   1283               M         bcf STATUS, RP0
00D1   0181           00557         clrf TMR0
00D2   01??           00558         clrf rt_counter
                      00559         BANK1
00D3   1683               M         bsf STATUS, RP0
00D4   3085           00560         movlw INITVAL_OPTREG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D5   0081           00561         movwf OPTION_REG
                      00562         ; PORT Initialzation
                      00563         ; BANK1
00D6   302F           00564         movlw INITVAL_TRISA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D7   0085           00565         movwf TRISA
00D8   30F2           00566         movlw INITVAL_TRISB
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D9   0086           00567         movwf TRISB
00DA   30A0           00568         movlw INITVAL_TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00DB   0087           00569         movwf TRISC
00DC   3000           00570         movlw INITVAL_TRISD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00DD   0088           00571         movwf TRISD
00DE   3000           00572         movlw INITVAL_TRISE
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00DF   0089           00573         movwf TRISE
                      00574 
                      00575         ; Analog to Digital Convertor Initialization
                      00576         ; BANK1
00E0   3002           00577         movlw INITVAL_ADCON1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00E1   009F           00578         movwf ADCON1
                      00579         BANK0
00E2   1283               M         bcf STATUS, RP0
00E3   3081           00580         movlw INITVAL_ADCON0
00E4   009F           00581         movwf ADCON0
00E5   0008           00582         return
                      00583 
                      00584 ;*******************************************************************************
                      00585 ;"reset_software": Software Reset/Initialization Function
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00586 ; Func: Reset all variables
                      00587 ; Input: None
                      00588 ; Output: phase, report_num, line_num, log_total, log_next, smotor_dir
                      00589 ; Affect: STATUS
                      00590 ;*******************************************************************************
00E6                  00591 reset_software
00E6   3000           00592         movlw PHASE_HDINIT
00E7   00A0           00593         movwf phase
00E8   01A1           00594         clrf report_num
00E9   01A2           00595         clrf line_num
00EA   01E8           00596         clrf log_total
00EB   01E9           00597         clrf log_next
                      00598         MOVLF smotor_dir, 1
00EC   3001               M         movlw 1
00ED   00E7               M         movwf smotor_dir
00EE   0008           00599         return
                      00600 
                      00601 ;*******************************************************************************
                      00602 ;"reset_hardware": Hardware Reset/Initialization Function
                      00603 ; Func: Reset/Initialize hardwares to their default position:
                      00604 ; Pos Sensor Off, V DC Motor at top, S Motor at "Row 1",
                      00605 ; LCD, (RTC)
                      00606 ; Input: None
                      00607 ; Output: PORTA, PORTB, PORTC, PORTD, PORTE
                      00608 ; Affect: W, STATUS, temp, delaytemp, delaycount, delaytemp2,
                      00609 ; delaycount2, delaytemp3, delaycount3
                      00610 ;*******************************************************************************
00EF                  00611 reset_hardware
                      00612         ; PORT Reset/Initialization
                      00613         ; BANK0
00EF   0185           00614         clrf PORTA ; RA4 (Reserved) output 0
00F0   0186           00615         clrf PORTB ; RB0, 2, 3 (Reserved) output 0
00F1   0187           00616         clrf PORTC ; VMOTOR disable, LED off
00F2   0188           00617         clrf PORTD ; clear S0, S1 of SMOTOR
00F3   0189           00618         clrf PORTE ; SMOTOR disable, clear S2, S3 of SMOTOR
                      00619         ; LCD Reset/Initialization
00F4   2???           00620         call LCD_init
00F5   2???           00621         call display
                      00622         ; Position Sensor(IRLED) Reset/Initialization: all off
                      00623         ; Already done with PORT reset
                      00624         ; Vertical DC Motor Reset/Initialization: move to top
00F6   2???           00625         call moveup
                      00626         ; Stepper Motor Reset/Initialization: move to "Row 4"
00F7   01E7           00627         clrf smotor_dir
00F8   2???           00628         call advancerow ; 4 advance row to ensure to init pos
00F9   2???           00629         call advancerow
00FA   2???           00630         call advancerow
00FB   2???           00631         call advancerow
                      00632         MOVLF smotor_dir, 1
00FC   3001               M         movlw 1
00FD   00E7               M         movwf smotor_dir
00FE   0008           00633         return
                      00634 
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00635 ;*******************************************************************************
                      00636 ;"reset_realtime": Real Time Clock Reset/Initialization Function
                      00637 ; Func: Reset Real Time Clock
                      00638 ; Input: None (from Keypad)
                      00639 ; Output: rt_year, rt_month, rt_day, rt_hour, rt_min, rt_sec
                      00640 ; Affect:
                      00641 ;*******************************************************************************
Warning[207]: Found label after column 1. (reset_realtime)
00FF                  00642         reset_realtime
00FF   3001           00643         movlw PHASE_RTCINIT
0100   00A0           00644         movwf phase
0101   01C0           00645         clrf rt_year
0102   01C1           00646         clrf rt_month
0103   01C2           00647         clrf rt_day
0104   01C3           00648         clrf rt_hour
0105   01C4           00649         clrf rt_min
0106   01C5           00650         clrf rt_sec
                      00651         ; YYMMDD
0107   2???           00652         call LCD_clear ; clear LCD display
                      00653         MOVLF FSR, LCDline
0108   3023               M         movlw LCDline
0109   0084               M         movwf FSR
                      00654         COPY_STRING str_enterymd
010A   30??               M         movlw str_enterymd
010B   2???               M         call copystring
010C   2???           00655         call writeline
010D   2???           00656         call LCD_line2
                      00657         MOVLF FSR, LCDline
010E   3023               M         movlw LCDline
010F   0084               M         movwf FSR
                      00658         COPY_STRING str_yearhead
0110   30??               M         movlw str_yearhead
0111   2???               M         call copystring
0112   2???           00659         call writeline
0113   01B6           00660         clrf temp3 ; number of valid numbers entered
0114                  00661 reset_rt_ymd
0114   1C86           00662         btfss KEYPAD_DA ; Wait until data is available from the keypad
0115   2???           00663         goto reset_rt_ymd
0116   0E06           00664         swapf PORTB, W ; Read PortB<7:4> into W<3:0>
0117   390F           00665         andlw 0x0F
0118   3E??           00666         addlw char_keynumber
0119   2???           00667         call literal ; Convert keypad value to LCD character (value is still held in W)
011A   3E00           00668         addlw 0x00
011B   1903           00669         btfsc STATUS, Z ; test for valid input (number)
011C   2???           00670         goto reset_rt_ymdrl
011D   00B5           00671         movwf temp2 ; hold the value
011E   2???           00672         call LCD_wt ; Write the value in W to LCD
011F   3030           00673         movlw 0x30
0120   02B5           00674         subwf temp2, f ; convert ASCII to number
0121   0836           00675         movf temp3, w
                      00676         TABLE ; switch (temp)
  0000                    M         local tablename
0122   00??               M         movwf table_temp
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0123   30??               M         movlw HIGH tablename
0124   008A               M         movwf PCLATH
0125   08??               M         movf table_temp, w
0126   3E??               M         addlw LOW tablename
0127   1803               M         btfsc STATUS, C
0128   0A8A               M         incf PCLATH, f
0129   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
012A                      M         tablename
012A   2???           00677         goto reset_rt_ymd0
012B   2???           00678         goto reset_rt_ymd1
012C   2???           00679         goto reset_rt_ymd2
012D   2???           00680         goto reset_rt_ymd3
012E   2???           00681         goto reset_rt_ymd4
012F   2???           00682         goto reset_rt_ymd5
0130                  00683 reset_rt_ymd0
0130   0835           00684         movf temp2, w
                      00685         MULLW .10
0131   00EA               M         movwf arith_temp
0132   300A               M         movlw .10
0133   2???               M         call mulfn
0134   07C0           00686         addwf rt_year, f
0135   0AB6           00687         incf temp3, f
0136   2???           00688         goto reset_rt_ymdrl
0137                  00689 reset_rt_ymd1
0137   0835           00690         movf temp2, w
0138   07C0           00691         addwf rt_year, f
0139   0AB6           00692         incf temp3, f
013A   2???           00693         goto reset_rt_ymdrl
013B                  00694 reset_rt_ymd2
013B   0835           00695         movf temp2, w
                      00696         MULLW .10
013C   00EA               M         movwf arith_temp
013D   300A               M         movlw .10
013E   2???               M         call mulfn
013F   07C1           00697         addwf rt_month, f
0140   0AB6           00698         incf temp3, f
0141   2???           00699         goto reset_rt_ymdrl
0142                  00700 reset_rt_ymd3
0142   0835           00701         movf temp2, w
0143   07C1           00702         addwf rt_month, f
0144   0AB6           00703         incf temp3, f
0145   2???           00704         goto reset_rt_ymdrl
0146                  00705 reset_rt_ymd4
0146   0835           00706         movf temp2, w
                      00707         MULLW .10
0147   00EA               M         movwf arith_temp
0148   300A               M         movlw .10
0149   2???               M         call mulfn
014A   07C2           00708         addwf rt_day, f
014B   0AB6           00709         incf temp3, f
014C   2???           00710         goto reset_rt_ymdrl
014D                  00711 reset_rt_ymd5
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

014D   0835           00712         movf temp2, w
014E   07C2           00713         addwf rt_day, f
014F   0AB6           00714         incf temp3, f
0150                  00715 reset_rt_ymdrl
0150   1886           00716         btfsc KEYPAD_DA ; Wait until key is released
0151   2???           00717         goto reset_rt_ymdrl
0152   3006           00718         movlw 0x06 ; 6 chars entered
0153   0236           00719         subwf temp3, w
0154   1C03           00720         btfss STATUS, C
0155   2???           00721         goto reset_rt_ymd
                      00722         ; hhmmss
0156   2???           00723         call LCD_clear ; clear LCD display
                      00724         MOVLF FSR, LCDline
0157   3023               M         movlw LCDline
0158   0084               M         movwf FSR
                      00725         COPY_STRING str_enterhms
0159   30??               M         movlw str_enterhms
015A   2???               M         call copystring
015B   2???           00726         call writeline
015C   2???           00727         call LCD_line2
015D   01B6           00728         clrf temp3 ; number of valid numbers entered
015E                  00729 reset_rt_hms
015E   1C86           00730         btfss KEYPAD_DA ; Wait until data is available from the keypad
015F   2???           00731         goto reset_rt_hms
0160   0E06           00732         swapf PORTB, W ; Read PortB<7:4> into W<3:0>
0161   390F           00733         andlw 0x0F
0162   3E??           00734         addlw char_keynumber
0163   2???           00735         call literal ; Convert keypad value to LCD character (value is still held in W)
0164   3E00           00736         addlw 0x00
0165   1903           00737         btfsc STATUS, Z ; test for valid input (number)
0166   2???           00738         goto reset_rt_hmsrl
0167   00B5           00739         movwf temp2 ; hold the value
0168   2???           00740         call LCD_wt ; Write the value in W to LCD
0169   3030           00741         movlw 0x30
016A   02B5           00742         subwf temp2, f ; convert ASCII to number
016B   0836           00743         movf temp3, w
                      00744         TABLE ; switch (temp)
  0000                    M         local tablename
016C   00??               M         movwf table_temp
016D   30??               M         movlw HIGH tablename
016E   008A               M         movwf PCLATH
016F   08??               M         movf table_temp, w
0170   3E??               M         addlw LOW tablename
0171   1803               M         btfsc STATUS, C
0172   0A8A               M         incf PCLATH, f
0173   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0174                      M         tablename
0174   2???           00745         goto reset_rt_hms0
0175   2???           00746         goto reset_rt_hms1
0176   2???           00747         goto reset_rt_hms2
0177   2???           00748         goto reset_rt_hms3
0178   2???           00749         goto reset_rt_hms4
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0179   2???           00750         goto reset_rt_hms5
017A                  00751 reset_rt_hms0
017A   0835           00752         movf temp2, w
                      00753         MULLW .10
017B   00EA               M         movwf arith_temp
017C   300A               M         movlw .10
017D   2???               M         call mulfn
017E   07C3           00754         addwf rt_hour, f
017F   0AB6           00755         incf temp3, f
0180   2???           00756         goto reset_rt_hmsrl
0181                  00757 reset_rt_hms1
0181   0835           00758         movf temp2, w
0182   07C3           00759         addwf rt_hour, f
0183   0AB6           00760         incf temp3, f
0184   2???           00761         goto reset_rt_hmsrl
0185                  00762 reset_rt_hms2
0185   0835           00763         movf temp2, w
                      00764         MULLW .10
0186   00EA               M         movwf arith_temp
0187   300A               M         movlw .10
0188   2???               M         call mulfn
0189   07C4           00765         addwf rt_min, f
018A   0AB6           00766         incf temp3, f
018B   2???           00767         goto reset_rt_hmsrl
018C                  00768 reset_rt_hms3
018C   0835           00769         movf temp2, w
018D   07C4           00770         addwf rt_min, f
018E   0AB6           00771         incf temp3, f
018F   2???           00772         goto reset_rt_hmsrl
0190                  00773 reset_rt_hms4
0190   0835           00774         movf temp2, w
                      00775         MULLW .10
0191   00EA               M         movwf arith_temp
0192   300A               M         movlw .10
0193   2???               M         call mulfn
0194   07C5           00776         addwf rt_sec, f
0195   0AB6           00777         incf temp3, f
0196   2???           00778         goto reset_rt_hmsrl
Warning[207]: Found label after column 1. (reset_rt_hms5)
0197                  00779         reset_rt_hms5
0197   0835           00780         movf temp2, w
0198   07C5           00781         addwf rt_sec, f
0199   0AB6           00782         incf temp3, f
Warning[207]: Found label after column 1. (reset_rt_hmsrl)
019A                  00783         reset_rt_hmsrl
019A   1886           00784         btfsc KEYPAD_DA ; Wait until key is released
019B   2???           00785         goto reset_rt_hmsrl
019C   3006           00786         movlw 0x06 ; 6 chars entered
019D   0236           00787         subwf temp3, w
019E   1C03           00788         btfss STATUS, C
019F   2???           00789         goto reset_rt_hms
01A0   0008           00790         return
                      00791 
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00792 ;*******************************************************************************
                      00793 ; "keyresp": Key Response Function
                      00794 ; Func: Display information or run an inspection according to the
                      00795 ; pressed key
                      00796 ; Input: W: Index of the key that being pressed
                      00797 ; Output: All actions
                      00798 ; Affect:
                      00799 ;*******************************************************************************
01A1                  00800 keyresp
01A1   0E06           00801         swapf PORTB, w
01A2   390F           00802         andlw 0x0F
                      00803         TABLE
  0000                    M         local tablename
01A3   00??               M         movwf table_temp
01A4   30??               M         movlw HIGH tablename
01A5   008A               M         movwf PCLATH
01A6   08??               M         movf table_temp, w
01A7   3E??               M         addlw LOW tablename
01A8   1803               M         btfsc STATUS, C
01A9   0A8A               M         incf PCLATH, f
01AA   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
01AB                      M         tablename
                      00804 ;keyresp_switch_table
01AB   2???           00805         goto realtime ; keypressed = 0 "1" = "real time"
01AC   2???           00806         goto report ; keypressed = 1 "2" = "report"
01AD   2???           00807         goto unused_key ; keypressed = 2 "3"
01AE   2???           00808         goto unused_key ; keypressed = 3 "A"
01AF   2???           00809         goto unused_key ; keypressed = 4 "4"
01B0   2???           00810         goto unused_key ; keypressed = 5 "5"
01B1   2???           00811         goto unused_key ; keypressed = 6 "6"
01B2   2???           00812         goto unused_key ; keypressed = 7 "B"
01B3   2???           00813         goto scroll_up ; keypressed = 8 "7" = "scroll up"
01B4   2???           00814         goto report_last ; keypressed = 9 "8" = "report last"
01B5   2???           00815         goto unused_key ; keypressed = A "9"
01B6   2???           00816         goto stoprun ; keypressed = B "C" = "stop"
01B7   2???           00817         goto scroll_down ; keypressed = C "*" = "scroll down"
01B8   2???           00818         goto report_next ; keypressed = D "0" = "scroll up"
01B9   2???           00819         goto unused_key ; keypressed = E "#"
01BA   2???           00820         goto startrun ; keypressed = F "D" = "run"
01BB                  00821 unused_key
01BB                  00822 keyresp_next
01BB                  00823 wait_release
01BB   1886           00824         btfsc KEYPAD_DA ; Wait until key is released????
01BC   2???           00825         goto wait_release ; !!!!!!!!!!time
01BD   2???           00826         call display
                      00827         ; reset timeout!!!!!!!!!!
01BE   0008           00828         return
                      00829 
01BF                  00830 realtime
01BF   3002           00831         movlw PHASE_REALTIME
01C0   00A0           00832         movwf phase
01C1   01A2           00833         clrf line_num
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01C2   2???           00834         goto keyresp_next
01C3                  00835 report
01C3   3004           00836         movlw PHASE_REPORT ; assuem log_total <> 0
01C4   08E8           00837         movf log_total, f
01C5   1903           00838         btfsc STATUS, Z
01C6   3003           00839         movlw PHASE_NOREPORT ; log_total == 0, no report
01C7   00A0           00840         movwf phase
01C8   01A2           00841         clrf line_num
01C9   2???           00842         goto keyresp_next
01CA                  00843 report_last
                      00844 ; !!!! some ideas: must in REPORT phase; no change in line_num if at last report;
                      00845 ; do not go through report; if enter from other phase same fn to report;
                      00846 ; display report# and can go across upper/lower limit
01CA   08E8           00847         movf log_total, f
01CB   1903           00848         btfsc STATUS, Z
01CC   2???           00849         goto report ; log_total == 0, no report!!!!
                      00850         ; lower bound = (log_next - log_total + MAXLOG) MOD MAXLOG
01CD   0868           00851         movf log_total, w ; get lower bound
01CE   0269           00852         subwf log_next, w
01CF   3E0C           00853         addlw MAXLOG
                      00854         MODLW MAXLOG
01D0   00EA               M         movwf arith_temp
01D1   300C               M         movlw MAXLOG
01D2   2???               M         call divfn
01D3   086A               M         movf arith_temp, w
01D4   0221           00855         subwf report_num, w
01D5   1903           00856         btfsc STATUS, Z
01D6   2???           00857         goto report ; current report at lower bound!!!!"This is the last report"!!!!
01D7   0321           00858         decf report_num, w ; get last report
01D8   3E0C           00859         addlw MAXLOG ; make sure report_num between 0 and MAXLOG - 1
                      00860         MODLW MAXLOG
01D9   00EA               M         movwf arith_temp
01DA   300C               M         movlw MAXLOG
01DB   2???               M         call divfn
01DC   086A               M         movf arith_temp, w
01DD   00A1           00861         movwf report_num
01DE   2???           00862         call readlog
01DF   2???           00863         goto report
01E0                  00864 report_next
01E0   08E8           00865         movf log_total, f
01E1   1903           00866         btfsc STATUS, Z
01E2   2???           00867         goto report ; log_total == 0, no report!!!!
                      00868         ; upper bound = (log_next - 1 + MAXLOG) MOD MAXLOG
01E3   0369           00869         decf log_next, w ; get upper bound
01E4   3E0C           00870         addlw MAXLOG
                      00871         MODLW MAXLOG
01E5   00EA               M         movwf arith_temp
01E6   300C               M         movlw MAXLOG
01E7   2???               M         call divfn
01E8   086A               M         movf arith_temp, w
01E9   0221           00872         subwf report_num, w
01EA   1903           00873         btfsc STATUS, Z
01EB   2???           00874         goto report ; current report at upper bound!!!!
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01EC   0A21           00875         incf report_num, w ; get next report
                      00876         MODLW MAXLOG ; make sure report_num between 0 and MAXLOG - 1
01ED   00EA               M         movwf arith_temp
01EE   300C               M         movlw MAXLOG
01EF   2???               M         call divfn
01F0   086A               M         movf arith_temp, w
01F1   00A1           00877         movwf report_num
01F2   2???           00878         call readlog
01F3   2???           00879         goto report
01F4                  00880 scroll_up
01F4   3004           00881         movlw PHASE_REPORT ; test phase == PHASE_REPORT
01F5   0220           00882         subwf phase, w
01F6   1D03           00883         btfss STATUS, Z
01F7   2???           00884         goto keyresp_next ; phase <> PHASE_REPORT, do nothing
01F8   08A2           00885         movf line_num, f ; phase == PHASE_REPORT, test line_num == 0
01F9   1D03           00886         btfss STATUS, Z
01FA   03A2           00887         decf line_num, f ; line_num <> 0, decrease line_num (scroll up)
01FB   2???           00888         goto keyresp_next
01FC                  00889 scroll_down
01FC   3004           00890         movlw PHASE_REPORT ; test phase == PHASE_REPORT
01FD   0220           00891         subwf phase, w
01FE   1D03           00892         btfss STATUS, Z
01FF   2???           00893         goto keyresp_next ; phase <> PHASE_REPORT, do nothing
0200   3009           00894         movlw MAXLINE ; phase == PHASE_REPORT, test line_num == MAXLINE????
0201   0222           00895         subwf line_num, w
0202   1D03           00896         btfss STATUS, Z
0203   0AA2           00897         incf line_num, f ; line_num <> MAXLINE, increase line_num (scroll down)
0204   2???           00898         goto keyresp_next
0205                  00899 startrun
0205   3005           00900         movlw PHASE_RUN
0206   00A0           00901         movwf phase
0207   01A2           00902         clrf line_num
                      00903         ;!!!! call display
0208   2???           00904         call LCD_clear ; clear LCD display
                      00905         MOVLF FSR, LCDline
0209   3023               M         movlw LCDline
020A   0084               M         movwf FSR
                      00906         COPY_STRING str_running
020B   30??               M         movlw str_running
020C   2???               M         call copystring
020D   2???           00907         call writeline
020E   2???           00908         call run
                      00909         MOVLF phase, PHASE_FINISH
020F   3006               M         movlw 6
0210   00A0               M         movwf phase
0211   01A2           00910         clrf line_num
0212   2???           00911         call display
                      00912         ; call delay1sl
                      00913         MOVLF phase, PHASE_REPORT
0213   3004               M         movlw 4
0214   00A0               M         movwf phase
0215   01A2           00914         clrf line_num
0216   2???           00915         call display
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00916         ; assume run time is very long, key has been released
0217   0008           00917         return
0218                  00918 stoprun
0218   2???           00919         goto keyresp_next
                      00920 
                      00921 ;*******************************************************************************
                      00922 ;"keypad_timeout":
                      00923 ; Func:
                      00924 ; Input:
                      00925 ; Output:
                      00926 ; Affect:
                      00927 ;*******************************************************************************
0219                  00928 keypad_timeout
0219   08EC           00929         movf newsec, f
021A   1903           00930         btfsc STATUS, Z
021B   2???           00931         goto kp_to_nonewsec ; newsec == 0(FALSE), skip
021C   2???           00932         call display ; newsec == TRUE, display the new sec
021D   01EC           00933         clrf newsec
021E                  00934 kp_to_nonewsec
                      00935 ; SLEEP test goes here!!!!
021E   0008           00936         return
                      00937 
                      00938 ;*******************************************************************************
                      00939 ; "display": Display Function (User Interface)
                      00940 ; Func: First make up the content to be displayed into LCDline
                      00941 ; according to phase and line_num, then print the string
                      00942 ; to the LCD
                      00943 ; Input: phase, line_num
                      00944 ; Output: None (to LCD)
                      00945 ; Affect: W, STATUS, FSR, temp2, table_temp, arg, arg2,
                      00946 ; delaytemp, delaycount, lcd_temp
                      00947 ;*******************************************************************************
021F                  00948 display
                      00949 ; run phase does not use general display function
021F   0820           00950         movf phase, w
0220   3C05           00951         sublw PHASE_RUN
0221   1903           00952         btfsc STATUS, Z
0222   0008           00953         return
0223   0822           00954         movf line_num, w ; current line#
0224   2???           00955         call makeline
0225   2???           00956         call LCD_clear ; clear LCD display
0226   2???           00957         call writeline
0227   0A22           00958         incf line_num, w ; next line# in W, but not inc line#
0228   2???           00959         call makeline
0229   2???           00960         call LCD_line2
022A   2???           00961         call writeline
022B   2???           00962         call LCD_out ; move the cursor out of screen
022C   0008           00963         return
                      00964 ;*******************************************************************************
                      00965 ; "makeline": Displayable Line Make & Copy Function
                      00966 ; Func: Make lines to be displayed according to the phase and
                      00967 ; line number (W), copy it to the LCDline array
                      00968 ; Input: W = line # to be displayed, phase
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00969 ; Output: FSR = point to the null termination of the line made &
                      00970 ; copied, (Copied line in LCDline)
                      00971 ; Affect: W, STATUS, temp2, temp3, table_temp, arg, arg2, literal_addr
                      00972 ;*******************************************************************************
022D                  00973 makeline
022D   00B5           00974         movwf temp2 ; line#
                      00975         MOVLF FSR, LCDline ; start from LCDline
022E   3023               M         movlw LCDline
022F   0084               M         movwf FSR
0230   0820           00976         movf phase, w
                      00977         TABLE ; switch (phase)
  0000                    M         local tablename
0231   00??               M         movwf table_temp
0232   30??               M         movlw HIGH tablename
0233   008A               M         movwf PCLATH
0234   08??               M         movf table_temp, w
0235   3E??               M         addlw LOW tablename
0236   1803               M         btfsc STATUS, C
0237   0A8A               M         incf PCLATH, f
0238   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0239                      M         tablename
0239   2???           00978         goto ML_hdinit ; phase == 0
023A   2???           00979         goto ML_rtcinit ; phase == 1
023B   2???           00980         goto ML_realtime ; phase == 2
023C   2???           00981         goto ML_noreport ; phase == 3
023D   2???           00982         goto ML_report ; phase == 4
023E   2???           00983         goto ML_run ; phase == 5
023F   2???           00984         goto ML_finish ; phase == 6
0240                  00985 ML_hdinit
0240   0835           00986         movf temp2, w
                      00987         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
0241   00??               M         movwf table_temp
0242   30??               M         movlw HIGH tablename
0243   008A               M         movwf PCLATH
0244   08??               M         movf table_temp, w
0245   3E??               M         addlw LOW tablename
0246   1803               M         btfsc STATUS, C
0247   0A8A               M         incf PCLATH, f
0248   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0249                      M         tablename
0249   2???           00988         goto ML_hdinit_0 ; line# == 0
024A   2???           00989         goto ML_hdinit_1 ; line# == 1
024B                  00990 ML_rtcinit ; display do not use this function
                      00991         COPY_STRING str_null ; null termination
024B   30??               M         movlw str_null
024C   2???               M         call copystring
024D   0008           00992         return
024E                  00993 ML_realtime
024E   0835           00994         movf temp2, w
                      00995         TABLE ; switch (temp2(line#))
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M         local tablename
024F   00??               M         movwf table_temp
0250   30??               M         movlw HIGH tablename
0251   008A               M         movwf PCLATH
0252   08??               M         movf table_temp, w
0253   3E??               M         addlw LOW tablename
0254   1803               M         btfsc STATUS, C
0255   0A8A               M         incf PCLATH, f
0256   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0257                      M         tablename
0257   2???           00996         goto ML_realtime_0 ; line# == 0
0258   2???           00997         goto ML_realtime_1 ; line# == 1
0259                  00998 ML_noreport
0259   0835           00999         movf temp2, w
                      01000         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
025A   00??               M         movwf table_temp
025B   30??               M         movlw HIGH tablename
025C   008A               M         movwf PCLATH
025D   08??               M         movf table_temp, w
025E   3E??               M         addlw LOW tablename
025F   1803               M         btfsc STATUS, C
0260   0A8A               M         incf PCLATH, f
0261   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0262                      M         tablename
0262   2???           01001         goto ML_noreport_0 ; line# == 0
0263   2???           01002         goto ML_noreport_1 ; line# == 1
0264                  01003 ML_report
0264   0835           01004         movf temp2, w
                      01005         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
0265   00??               M         movwf table_temp
0266   30??               M         movlw HIGH tablename
0267   008A               M         movwf PCLATH
0268   08??               M         movf table_temp, w
0269   3E??               M         addlw LOW tablename
026A   1803               M         btfsc STATUS, C
026B   0A8A               M         incf PCLATH, f
026C   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
026D                      M         tablename
026D   2???           01006         goto ML_report_0 ; line# == 0
026E   2???           01007         goto ML_report_1 ; line# == 1
026F   2???           01008         goto ML_report_2 ; line# == 2
0270   2???           01009         goto ML_report_3 ; line# == 3
0271   2???           01010         goto ML_report_4 ; line# == 4
0272   2???           01011         goto ML_report_5 ; line# == 5
0273   2???           01012         goto ML_report_6 ; line# == 6
0274   2???           01013         goto ML_report_7 ; line# == 7
0275   2???           01014         goto ML_report_8 ; line# == 8
0276   2???           01015         goto ML_report_9 ; line# == 9
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0277   2???           01016         goto ML_report_10 ; line# == 10
0278                  01017 ML_run
0278   0835           01018         movf temp2, w
                      01019         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
0279   00??               M         movwf table_temp
027A   30??               M         movlw HIGH tablename
027B   008A               M         movwf PCLATH
027C   08??               M         movf table_temp, w
027D   3E??               M         addlw LOW tablename
027E   1803               M         btfsc STATUS, C
027F   0A8A               M         incf PCLATH, f
0280   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0281                      M         tablename
0281   2???           01020         goto ML_run_0 ; line# == 0
0282   2???           01021         goto ML_run_1 ; line# == 1
0283                  01022 ML_finish
0283   0835           01023         movf temp2, w
                      01024         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
0284   00??               M         movwf table_temp
0285   30??               M         movlw HIGH tablename
0286   008A               M         movwf PCLATH
0287   08??               M         movf table_temp, w
0288   3E??               M         addlw LOW tablename
0289   1803               M         btfsc STATUS, C
028A   0A8A               M         incf PCLATH, f
028B   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
028C                      M         tablename
028C   2???           01025         goto ML_finish_0 ; line# == 0
028D   2???           01026         goto ML_finish_1 ; line# == 1
028E                  01027 ML_hdinit_0
                      01028         COPY_STRING str_init
028E   30??               M         movlw str_init
028F   2???               M         call copystring
0290   0008           01029         return
0291                  01030 ML_hdinit_1
                      01031         COPY_STRING str_null
0291   30??               M         movlw str_null
0292   2???               M         call copystring
0293   0008           01032         return
0294                  01033 ML_realtime_0
                      01034         COPY_STRING str_yearhead
0294   30??               M         movlw str_yearhead
0295   2???               M         call copystring
                      01035         COPY_DEC2 rt_year
0296   0840               M         movf rt_year,   w
0297   00BB               M         movwf arg
0298   3002               M         movlw 0x02
0299   00BC               M         movwf arg2
029A   2???               M         call copydec
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01036         COPY_STRING str_dash
029B   30??               M         movlw str_dash
029C   2???               M         call copystring
                      01037         COPY_DEC2 rt_month
029D   0841               M         movf rt_month,  w
029E   00BB               M         movwf arg
029F   3002               M         movlw 0x02
02A0   00BC               M         movwf arg2
02A1   2???               M         call copydec
                      01038         COPY_STRING str_dash
02A2   30??               M         movlw str_dash
02A3   2???               M         call copystring
                      01039         COPY_DEC2 rt_day
02A4   0842               M         movf rt_day,    w
02A5   00BB               M         movwf arg
02A6   3002               M         movlw 0x02
02A7   00BC               M         movwf arg2
02A8   2???               M         call copydec
02A9   0008           01040         return
02AA                  01041 ML_realtime_1
                      01042         COPY_DEC2 rt_hour
02AA   0843               M         movf rt_hour,   w
02AB   00BB               M         movwf arg
02AC   3002               M         movlw 0x02
02AD   00BC               M         movwf arg2
02AE   2???               M         call copydec
                      01043         COPY_STRING str_colon
02AF   30??               M         movlw str_colon
02B0   2???               M         call copystring
                      01044         COPY_DEC2 rt_min
02B1   0844               M         movf rt_min,    w
02B2   00BB               M         movwf arg
02B3   3002               M         movlw 0x02
02B4   00BC               M         movwf arg2
02B5   2???               M         call copydec
                      01045         COPY_STRING str_colon
02B6   30??               M         movlw str_colon
02B7   2???               M         call copystring
                      01046         COPY_DEC2 rt_sec
02B8   0845               M         movf rt_sec,    w
02B9   00BB               M         movwf arg
02BA   3002               M         movlw 0x02
02BB   00BC               M         movwf arg2
02BC   2???               M         call copydec
02BD   0008           01047         return
02BE                  01048 ML_noreport_0
                      01049         COPY_STRING str_noreport
02BE   30??               M         movlw str_noreport
02BF   2???               M         call copystring
02C0   0008           01050         return
02C1                  01051 ML_noreport_1
                      01052         COPY_STRING str_null
02C1   30??               M         movlw str_null
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02C2   2???               M         call copystring
02C3   0008           01053         return
02C4                  01054 ML_report_0
                      01055         COPY_STRING str_entry
02C4   30??               M         movlw str_entry
02C5   2???               M         call copystring
                      01056         ; log# = (log_total - log_next + report_num + 1 + MAXLOG) MOD MAXLOG
                      01057         ; also log# = MAXLOG if result == 0
02C6   0869           01058         movf log_next, w
02C7   0268           01059         subwf log_total, w
02C8   0721           01060         addwf report_num, w
02C9   3E01           01061         addlw 0x01
02CA   3E0C           01062         addlw MAXLOG
                      01063         MODLW MAXLOG
02CB   00EA               M         movwf arith_temp
02CC   300C               M         movlw MAXLOG
02CD   2???               M         call divfn
02CE   086A               M         movf arith_temp, w
02CF   1903           01064         btfsc STATUS, Z
02D0   300C           01065         movlw MAXLOG ; result == 0, log# = MAXLOG
02D1   00B6           01066         movwf temp3
                      01067         COPY_DEC2 temp3
02D2   0836               M         movf temp3,     w
02D3   00BB               M         movwf arg
02D4   3002               M         movlw 0x02
02D5   00BC               M         movwf arg2
02D6   2???               M         call copydec
                      01068         COPY_STRING char_slash
02D7   30??               M         movlw char_slash
02D8   2???               M         call copystring
                      01069         COPY_DEC2 log_total
02D9   0868               M         movf log_total, w
02DA   00BB               M         movwf arg
02DB   3002               M         movlw 0x02
02DC   00BC               M         movwf arg2
02DD   2???               M         call copydec
02DE   0008           01070         return
02DF                  01071 ML_report_1
                      01072         COPY_STRING str_start
02DF   30??               M         movlw str_start
02E0   2???               M         call copystring
                      01073         COPY_DEC2 st_hour
02E1   0849               M         movf st_hour,   w
02E2   00BB               M         movwf arg
02E3   3002               M         movlw 0x02
02E4   00BC               M         movwf arg2
02E5   2???               M         call copydec
                      01074         COPY_STRING str_colon
02E6   30??               M         movlw str_colon
02E7   2???               M         call copystring
                      01075         COPY_DEC2 st_min
02E8   084A               M         movf st_min,    w
02E9   00BB               M         movwf arg
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02EA   3002               M         movlw 0x02
02EB   00BC               M         movwf arg2
02EC   2???               M         call copydec
                      01076         COPY_STRING str_colon
02ED   30??               M         movlw str_colon
02EE   2???               M         call copystring
                      01077         COPY_DEC2 st_sec
02EF   084B               M         movf st_sec,    w
02F0   00BB               M         movwf arg
02F1   3002               M         movlw 0x02
02F2   00BC               M         movwf arg2
02F3   2???               M         call copydec
02F4   0008           01078         return
02F5                  01079 ML_report_2
                      01080         COPY_STRING str_finish
02F5   30??               M         movlw str_finish
02F6   2???               M         call copystring
                      01081         COPY_DEC2 end_hour
02F7   084C               M         movf end_hour,  w
02F8   00BB               M         movwf arg
02F9   3002               M         movlw 0x02
02FA   00BC               M         movwf arg2
02FB   2???               M         call copydec
                      01082         COPY_STRING str_colon
02FC   30??               M         movlw str_colon
02FD   2???               M         call copystring
                      01083         COPY_DEC2 end_min
02FE   084D               M         movf end_min,   w
02FF   00BB               M         movwf arg
0300   3002               M         movlw 0x02
0301   00BC               M         movwf arg2
0302   2???               M         call copydec
                      01084         COPY_STRING str_colon
0303   30??               M         movlw str_colon
0304   2???               M         call copystring
                      01085         COPY_DEC2 end_sec
0305   084E               M         movf end_sec,   w
0306   00BB               M         movwf arg
0307   3002               M         movlw 0x02
0308   00BC               M         movwf arg2
0309   2???               M         call copydec
030A   0008           01086         return
030B                  01087 ML_report_3
                      01088         COPY_STRING str_runtime
030B   30??               M         movlw str_runtime
030C   2???               M         call copystring
                      01089         COPY_DEC1 runtime
030D   084F               M         movf runtime,   w
030E   00BB               M         movwf arg
030F   3001               M         movlw 0x01
0310   00BC               M         movwf arg2
0311   2???               M         call copydec
                      01090         COPY_STRING str_s
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0312   30??               M         movlw str_s
0313   2???               M         call copystring
0314   0008           01091         return
0315                  01092 ML_report_4
                      01093         COPY_STRING str_total
0315   30??               M         movlw str_total
0316   2???               M         call copystring
                      01094         COPY_DEC1 cl_total
0317   0850               M         movf cl_total,  w
0318   00BB               M         movwf arg
0319   3001               M         movlw 0x01
031A   00BC               M         movwf arg2
031B   2???               M         call copydec
031C   0008           01095         return
031D                  01096 ML_report_5
                      01097         COPY_STRING str_pass
031D   30??               M         movlw str_pass
031E   2???               M         call copystring
                      01098         COPY_DEC1 cl_pass
031F   0851               M         movf cl_pass,   w
0320   00BB               M         movwf arg
0321   3001               M         movlw 0x01
0322   00BC               M         movwf arg2
0323   2???               M         call copydec
                      01099         COPY_STRING str_fail
0324   30??               M         movlw str_fail
0325   2???               M         call copystring
                      01100         COPY_DEC1 cl_fail
0326   0852               M         movf cl_fail,   w
0327   00BB               M         movwf arg
0328   3001               M         movlw 0x01
0329   00BC               M         movwf arg2
032A   2???               M         call copydec
032B   0008           01101         return
032C                  01102 ML_report_6
                      01103         COPY_STRING str_layout
032C   30??               M         movlw str_layout
032D   2???               M         call copystring
032E   0008           01104         return
032F                  01105 ML_report_7
                      01106         COPY_STRING str_layout1
032F   30??               M         movlw str_layout1
0330   2???               M         call copystring
                      01107         COPY_LAYOUT 0
0331   3000               M         movlw 0
0332   2???               M         call copylayout
0333   0008           01108         return
0334                  01109 ML_report_8
                      01110         COPY_STRING str_layout2
0334   30??               M         movlw str_layout2
0335   2???               M         call copystring
                      01111         COPY_LAYOUT 1
0336   3001               M         movlw 1
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0337   2???               M         call copylayout
0338   0008           01112         return
0339                  01113 ML_report_9
                      01114         COPY_STRING str_layout3
0339   30??               M         movlw str_layout3
033A   2???               M         call copystring
                      01115         COPY_LAYOUT 2
033B   3002               M         movlw 2
033C   2???               M         call copylayout
033D   0008           01116         return
033E                  01117 ML_report_10
                      01118         COPY_STRING str_layout4
033E   30??               M         movlw str_layout4
033F   2???               M         call copystring
                      01119         COPY_LAYOUT 3
0340   3003               M         movlw 3
0341   2???               M         call copylayout
0342   0008           01120         return
0343                  01121 ML_run_0
                      01122         COPY_STRING str_running
0343   30??               M         movlw str_running
0344   2???               M         call copystring
0345   0008           01123         return
0346                  01124 ML_run_1
                      01125         COPY_STRING str_null
0346   30??               M         movlw str_null
0347   2???               M         call copystring
0348   0008           01126         return
0349                  01127 ML_finish_0
                      01128         COPY_STRING str_insp_fin
0349   30??               M         movlw str_insp_fin
034A   2???               M         call copystring
034B   0008           01129         return
034C                  01130 ML_finish_1 ; ALL PASS????!!!!
                      01131         COPY_STRING str_runtime
034C   30??               M         movlw str_runtime
034D   2???               M         call copystring
                      01132         COPY_DEC1 runtime
034E   084F               M         movf runtime,   w
034F   00BB               M         movwf arg
0350   3001               M         movlw 0x01
0351   00BC               M         movwf arg2
0352   2???               M         call copydec
                      01133         COPY_STRING str_s
0353   30??               M         movlw str_s
0354   2???               M         call copystring
0355   0008           01134         return
                      01135 ;*******************************************************************************
                      01136 ; "copystring": String Copy Function
                      01137 ; Func: Copy the string literal (null terminated) pointed by W
                      01138 ; to position pointed by FSR (indirect pointer)
                      01139 ; Input: W = address of the string literal wanted,
                      01140 ; FSR = adress of destination
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01141 ; Output: FSR = adress of the null terminator of the copyed string
                      01142 ; Affect: W, STATUS, literal_addr
                      01143 ;*******************************************************************************
0356                  01144 copystring
0356   00BD           01145         movwf literal_addr
0357                  01146 copystring_loop
0357   083D           01147         movf literal_addr, w
0358   2???           01148         call literal
0359   0080           01149         movwf INDF
035A   0880           01150         movf INDF, f ; test INDF(last char) == 0(NULL)
035B   1903           01151         btfsc STATUS, Z
035C   0008           01152         return ; if end of string is reached (NULL)
035D   0A84           01153         incf FSR, f
035E   0ABD           01154         incf literal_addr, f
035F   2???           01155         goto copystring_loop
                      01156 ;*******************************************************************************
                      01157 ; "copylayout": Layout Row Translate & Copy Function
                      01158 ; Func: Translate a row in layout array into printable format,
                      01159 ; copy it to position pointed by FSR,
                      01160 ; and add a null termination after the copied charactor
                      01161 ; Input: W = raw number, FSR = adress of destination
                      01162 ; Output: FSR = adress of the null terminator after copied layout
                      01163 ; Affect:
                      01164 ;*******************************************************************************
0360                  01165 copylayout
0360   00B4           01166         movwf temp ; raw number, later hold translated layout byte
0361   3053           01167         movlw layout
0362   08B4           01168         movf temp, f ; test if temp == 0
0363   1903           01169         btfsc STATUS, Z
0364   2???           01170         goto copylayout_next ; temp == 0, starting position = layout
0365                  01171 copylayout_startloop
0365   3E05           01172         addlw COLS
0366   0BB4           01173         decfsz temp, f
0367   2???           01174         goto copylayout_startloop
0368                  01175 copylayout_next
0368   00B5           01176         movwf temp2 ; address of layout byte
0369   0804           01177         movf FSR, w
036A   00B6           01178         movwf temp3 ; address of destination
036B   3005           01179         movlw COLS
036C   00B7           01180         movwf temp4 ; colume counter
036D                  01181 copylayout_charloop
036D   0835           01182         movf temp2, w ; get layout byte
036E   0084           01183         movwf FSR
036F   30??           01184         movlw char_layout ; get translated layout byte address
0370   0700           01185         addwf INDF, w
0371   2???           01186         call literal ; translate char
0372   00B4           01187         movwf temp ; save the translated layout byte into temp
0373   0836           01188         movf temp3, w ; get destination
0374   0084           01189         movwf FSR
0375   0834           01190         movf temp, w ; copy translated byte to destination
Warning[203]: Found opcode in column 1. (movwf)
0376   0080           01191 movwf INDF
0377   0AB5           01192         incf temp2, f
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0378   0AB6           01193         incf temp3, f
0379   0BB7           01194         decfsz temp4, f
037A   2???           01195         goto copylayout_charloop
037B   0836           01196         movf temp3, w
037C   0084           01197         movwf FSR ; FSR will now have the address after last byte
037D   3000           01198         movlw NULL ; add null terminator
037E   0080           01199         movwf INDF
037F   0008           01200         return
                      01201 ;*******************************************************************************
                      01202 ; "copydec": Byte Display Conversion & Copy Function
                      01203 ; Func: Convert a number store in a byte to a printable decimal
                      01204 ; ASCII string with null termination and copy it to a position
                      01205 ; pointed by FSR
                      01206 ; Input: arg = number to be converted,
                      01207 ; arg2 = minimum number of digits displayed
                      01208 ; FSR = adress of destination
                      01209 ; Output: FSR = adress of the null terminator of the decimal display
                      01210 ; Affect: W, STATUS, arith_temp, arith_temp2
                      01211 ;*******************************************************************************
0380                  01212 copydec
0380   083B           01213         movf arg, w
                      01214         DIVLW 0x64 ; 100
0381   00EA               M         movwf arith_temp
0382   3064               M         movlw 0x64
0383   2???               M         call divfn
0384   1D03           01215         btfss STATUS, Z ; test if quotient is 0
0385   2???           01216         goto copydec_copyhundreds ; quotient <> 0, normal display
0386   3003           01217         movlw 0x03 ; quotient == 0, depends on arg2
0387   023C           01218         subwf arg2, w
0388   1C03           01219         btfss STATUS, C ; test if arg2 < 3
0389   2???           01220         goto copydec_tens ; arg2 < 3, skip 0 hundred
038A   3000           01221         movlw 0x00 ; arg2 >= 3, display 0
038B                  01222 copydec_copyhundreds
038B   3E30           01223         addlw 0x30 ; num+0x30 = its ASCII
038C   0080           01224         movwf INDF
038D   0A84           01225         incf FSR, f
038E   3003           01226         movlw 0x03 ; hundreds already displayed, set arg2 to 3
038F   00BC           01227         movwf arg2 ; because all following digit shall be seen
0390                  01228 copydec_tens
0390   083B           01229         movf arg, w
                      01230         MODLW 0x64 ; 100
0391   00EA               M         movwf arith_temp
0392   3064               M         movlw 0x64
0393   2???               M         call divfn
0394   086A               M         movf arith_temp, w
                      01231         DIVLW 0x0A ; 10
0395   00EA               M         movwf arith_temp
0396   300A               M         movlw 0x0A
0397   2???               M         call divfn
0398   1D03           01232         btfss STATUS, Z ; test if quotient is 0
0399   2???           01233         goto copydec_copytens ; quotient <> 0, normal display
039A   3002           01234         movlw 0x02 ; quotient == 0, depends on arg2
039B   023C           01235         subwf arg2, w
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

039C   1C03           01236         btfss STATUS, C ; test if arg2 < 2
039D   2???           01237         goto copydec_ones ; arg2 < 2, skip 0 tens
039E   3000           01238         movlw 0x00 ; arg2 >= 2, display 0
039F                  01239 copydec_copytens
039F   3E30           01240         addlw 0x30 ; num+0x30 = its ASCII
03A0   0080           01241         movwf INDF
03A1   0A84           01242         incf FSR, f
                      01243         ; movlw 0x02 ; tens already displayed, set arg2 to 2
                      01244         ; movwf arg2 ; because all following digit shall be seen
03A2                  01245 copydec_ones
03A2   083B           01246         movf arg, w
                      01247         MODLW 0x0A ; 10
03A3   00EA               M         movwf arith_temp
03A4   300A               M         movlw 0x0A
03A5   2???               M         call divfn
03A6   086A               M         movf arith_temp, w
                      01248         ; ones shall be displayed anyways
03A7   3E30           01249         addlw 0x30 ; num+0x30 = its ASCII
03A8   0080           01250         movwf INDF
03A9   0A84           01251         incf FSR, f
03AA                  01252 copydec_ending ; write a null ending
03AA   3000           01253         movlw NULL
03AB   0080           01254         movwf INDF
03AC   0008           01255         return
                      01256 ;*******************************************************************************
                      01257 ; "writeline": Write Displayable Line to LCD Function
                      01258 ; Func: Send LCDline string to LCD charactor by charactor
                      01259 ; Input: None (string prepared in LCDline)
                      01260 ; Output: None (to LCD)
                      01261 ; Affect: W, STATUS, FSR, delaytemp, delaycount
                      01262 ; Runtime: (3.2 + 216.0 * N) us, N = # of char, not including NULL
                      01263 ;*******************************************************************************
03AD                  01264 writeline
                      01265         MOVLF FSR, LCDline
03AD   3023               M         movlw LCDline
03AE   0084               M         movwf FSR
03AF                  01266 writeline_loop
03AF   0800           01267         movf INDF, w ; test INDF(char pointer to the string)==0(NULL)
03B0   1903           01268         btfsc STATUS, Z
03B1   0008           01269         return ; if end of string is reached (NULL)
03B2   2???           01270         call LCD_wt
03B3   0A84           01271         incf FSR, f
03B4   2???           01272         goto writeline_loop
                      01273 ;*******************************************************************************
                      01274 ; "Run": Run Inspection Function
                      01275 ; Func: Control the entire process of inspection
                      01276 ; Input: None
                      01277 ; Output: st_year, st_month, st_day, st_hour, st_min, st_sec,
                      01278 ; end_hour, end_min, end_sec, runtime, cl_total, cl_pass,
                      01279 ; cl_fail, layout, smotor_dir, log!!!!
                      01280 ; Affect:
                      01281 ;*******************************************************************************
03B5                  01282 run
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01283         ; store sarting time
                      01284         MOVFF st_year, rt_year
03B5   0840               M         movf rt_year, w
03B6   00C6               M         movwf st_year
                      01285         MOVFF st_month, rt_month
03B7   0841               M         movf rt_month, w
03B8   00C7               M         movwf st_month
                      01286         MOVFF st_day, rt_day
03B9   0842               M         movf rt_day, w
03BA   00C8               M         movwf st_day
                      01287         MOVFF st_hour, rt_hour
03BB   0843               M         movf rt_hour, w
03BC   00C9               M         movwf st_hour
                      01288         MOVFF st_min, rt_min
03BD   0844               M         movf rt_min, w
03BE   00CA               M         movwf st_min
                      01289         MOVFF st_sec, rt_sec
03BF   0845               M         movf rt_sec, w
03C0   00CB               M         movwf st_sec
                      01290         ; reset all layouts
                      01291         MOVLF FSR, layout
03C1   3053               M         movlw layout
03C2   0084               M         movwf FSR
                      01292         MOVLF temp, MAXPOS
03C3   3014               M         movlw MAXPOS
03C4   00B4               M         movwf temp
03C5                  01293 run_clearlayoutloop
03C5   0180           01294         clrf INDF
03C6   0A84           01295         incf FSR, f
03C7   0BB4           01296         decfsz temp, f
03C8   2???           01297         goto run_clearlayoutloop
                      01298         ; initialize variables
03C9   3053           01299         movlw layout
03CA   08E7           01300         movf smotor_dir, f
03CB   1903           01301         btfsc STATUS, Z
03CC   2???           01302         goto run_init_smotornext; smotor_dir == 0, "row1" to "row4"
03CD   3E14           01303         addlw MAXPOS ; smotor_dir <> 0, "row4" to "row1"
03CE   00B4           01304         movwf temp ; temperary storage
03CF   3005           01305         movlw COLS
03D0   0234           01306         subwf temp, w ; layout + MAXPOS - COLS, at last row
03D1                  01307 run_init_smotornext
03D1   00BF           01308         movwf result_addr
                      01309         MOVLF rowleft, ROWS
03D2   3004               M         movlw ROWS
03D3   00BE               M         movwf rowleft
03D4   01D0           01310         clrf cl_total
03D5   01D1           01311         clrf cl_pass
03D6   01D2           01312         clrf cl_fail
03D7   100B           01313         bcf INTCON, RBIF
03D8   158B           01314         bsf INTCON, RBIE ; enable keypad interrept
                      01315         STORE_LIGHT light_bg
03D9   30B0               M         movlw light_bg
03DA   2???               M         call lightsensor
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01316         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
03DB   3023               M         movlw LCDline
03DC   0084               M         movwf FSR
                          M         COPY_STRING str_dot
03DD   30??               M         movlw str_dot
03DE   2???               M         call copystring
03DF   2???               M         call writeline
03E0                  01317 run_loop
                      01318         IRLED_ON
03E0   3001               M         movlw 0x01
03E1   2???               M         call ledcontrol
                      01319         STORE_LIGHT light_pos
03E2   30B5               M         movlw light_pos
03E3   2???               M         call lightsensor
                      01320         IRLED_OFF
03E4   3000               M         movlw 0x00
03E5   2???               M         call ledcontrol
03E6   083F           01321         movf result_addr, w
                      01322         CALC_POS THD_IRLED
03E7   00B4               M         movwf temp
03E8   301C               M         movlw THD_IRLED
03E9   00B7               M         movwf temp4
03EA   2???               M         call calcpos
03EB   1903           01323         btfsc STATUS, Z
03EC   2???           01324         goto run_noextrarow ; return value == 0, no lights in this row
                      01325         ;PRESS_CL
03ED   2???           01326         call movedown
                      01327         STORE_LIGHT light_pos
03EE   30B5               M         movlw light_pos
03EF   2???               M         call lightsensor
                      01328         CALC_POS THD_CL3LED
03F0   00B4               M         movwf temp
03F1   3050               M         movlw THD_CL3LED
03F2   00B7               M         movwf temp4
03F3   2???               M         call calcpos
03F4   2???           01329         call moveup
                      01330         STORE_LIGHT light_cl
03F5   30BA               M         movlw light_cl
03F6   2???               M         call lightsensor
                      01331         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
03F7   3023               M         movlw LCDline
03F8   0084               M         movwf FSR
                          M         COPY_STRING str_dot
03F9   30??               M         movlw str_dot
03FA   2???               M         call copystring
03FB   2???               M         call writeline
                      01332         ;PRESS_CL
03FC   2???           01333         call movedown
03FD   2???           01334         call moveup
                      01335         STORE_LIGHT light_off
03FE   30BF               M         movlw light_off
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03FF   2???               M         call lightsensor
                      01336         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
0400   3023               M         movlw LCDline
0401   0084               M         movwf FSR
                          M         COPY_STRING str_dot
0402   30??               M         movlw str_dot
0403   2???               M         call copystring
0404   2???               M         call writeline
0405   083F           01337         movf result_addr, w
0406   2???           01338         call calcfunc
0407   3E00           01339         addlw 0x00
0408   1903           01340         btfsc STATUS, Z
0409   2???           01341         goto run_noextrarow ; return value == 0, no extra row
                      01342         ; return value <> 0, advance extra row
                      01343         ; advance to next RAM location
040A   3005           01344         movlw COLS
040B   08E7           01345         movf smotor_dir, f
040C   1D03           01346         btfss STATUS, Z
040D   2???           01347         goto run_nextRAM_reverse; smotor_dir<>0, "row4" to "row1", sub COLS
040E   07BF           01348         addwf result_addr, f ; smotor_dir == 0, "row1" to "row4", add COLS
040F   2???           01349         goto run_nextRAM_next
0410                  01350 run_nextRAM_reverse
0410   02BF           01351         subwf result_addr, f
0411                  01352 run_nextRAM_next
0411   03BE           01353         decf rowleft, f
0412   1903           01354         btfsc STATUS, Z
0413   2???           01355         goto run_end ; no row left, end run
0414   2???           01356         call advancerow ; advance to next machine location
                      01357         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
0415   3023               M         movlw LCDline
0416   0084               M         movwf FSR
                          M         COPY_STRING str_dot
0417   30??               M         movlw str_dot
0418   2???               M         call copystring
0419   2???               M         call writeline
041A                  01358 run_noextrarow
                      01359         ; advance to next RAM location
041A   3005           01360         movlw COLS
041B   08E7           01361         movf smotor_dir, f
041C   1D03           01362         btfss STATUS, Z
041D   2???           01363         goto run_nextRAM_reverse2 ; smotor_dir <> 0, "row4" to "row1"
041E   07BF           01364         addwf result_addr, f ; smotor_dir == 0, "row1" to "row4", add COLS
041F   2???           01365         goto run_nextRAM_next2
0420                  01366 run_nextRAM_reverse2
0420   02BF           01367         subwf result_addr, f
0421                  01368 run_nextRAM_next2
0421   03BE           01369         decf rowleft, f
0422   1903           01370         btfsc STATUS, Z
0423   2???           01371         goto run_end ; no row left, end run
0424   2???           01372         call advancerow ; advance to next machine location
                      01373         PRINT_DOT ; !!!!
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         MOVLF FSR, LCDline
0425   3023               M         movlw LCDline
0426   0084               M         movwf FSR
                          M         COPY_STRING str_dot
0427   30??               M         movlw str_dot
0428   2???               M         call copystring
0429   2???               M         call writeline
042A   2???           01374         goto run_loop
042B                  01375 run_end
042B   118B           01376         bcf INTCON, RBIE ; disable keypad interrept
042C   3001           01377         movlw 0x01 ; mask last bit
042D   06E7           01378         xorwf smotor_dir, f ; logic NOT last digit, reverse direction
                      01379         ; store end time
                      01380         MOVFF end_hour, rt_hour
042E   0843               M         movf rt_hour, w
042F   00CC               M         movwf end_hour
                      01381         MOVFF end_min, rt_min
0430   0844               M         movf rt_min, w
0431   00CD               M         movwf end_min
                      01382         MOVFF end_sec, rt_sec
0432   0845               M         movf rt_sec, w
0433   00CE               M         movwf end_sec
0434   2???           01383         call calcruntime
0435   2???           01384         call writelog
0436   00A1           01385         movwf report_num
0437   0008           01386         return
                      01387 ;*******************************************************************************
                      01388 ; "calcpos": Row Position Calculation Function
                      01389 ; Func: Determine the existance of closet light at any positions in
                      01390 ; current row: result CL_POS_BIT = (light_pos >= THD_IRLED)
                      01391 ; Input: W = the starting address where the result will be stored,
                      01392 ; temp = address of the result, temp4 = threshold, light_pos[]
                      01393 ; Output: W = number of lights in current row, result bytes,
                      01394 ; STATUS is set according to W
                      01395 ; Affect: FSR, temp, temp2, temp3, temp4
                      01396 ;*******************************************************************************
0438                  01397 calcpos
                      01398         ; movwf temp ; address of the result
0438   01B5           01399         clrf temp2 ; colume number
0439   01B6           01400         clrf temp3 ; number of CLs in current row
043A                  01401 calcpos_loop
                      01402         MOVFF FSR, temp
043A   0834               M         movf temp, w
043B   0084               M         movwf FSR
043C   30B5           01403         movlw light_pos
043D   0735           01404         addwf temp2, w
043E   0084           01405         movwf FSR ; get current light_pos
043F   0837           01406         movf temp4, w
0440   0200           01407         subwf INDF, w ; light_pos - threshold
0441   1C03           01408         btfss STATUS, C
0442   2???           01409         goto calcpos_next ; light_pos < threshold, no light
                      01410         MOVFF FSR, temp ; light_pos >= threshold, has light
0443   0834               M         movf temp, w
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0444   0084               M         movwf FSR
0445   1400           01411         bsf INDF, CL_POS_BIT ; set pos bit
0446   0AB6           01412         incf temp3, f
0447                  01413 calcpos_next
0447   0AB4           01414         incf temp, f
0448   0AB5           01415         incf temp2, f
0449   3005           01416         movlw COLS
044A   0235           01417         subwf temp2, w ; temp2(col#) - COLS(max col#)
044B   1C03           01418         btfss STATUS, C
044C   2???           01419         goto calcpos_loop ; temp2(col#) < COLS(max col#)
044D   0836           01420         movf temp3, w
044E   0008           01421         return
                      01422 ;*******************************************************************************
                      01423 ; "calcfunc": Row Functionality Calculation Function
                      01424 ; Func: Determine the functionality of closet light at ANY positions
                      01425 ; (not only those maked pos) of current row, also determine
                      01426 ; whether next row can physically have any CL
                      01427 ; Input: W = the starting address where the result will be stored,
                      01428 ; light_bg[], light_cl[], light_off[], result bytes
                      01429 ; Output: W = whether the machine need to advance one more row
                      01430 ; (0 = advance one row; 1 = advance two rows),
                      01431 ; cl_total, cl_pass, cl_fail, layout[]
                      01432 ; Affect: STATUS, FSR, temp, temp2, temp3, temp4, temp5, temp6, temp7
                      01433 ;*******************************************************************************
044F                  01434 calcfunc
Warning[203]: Found opcode in column 1. (movwf)
044F   00B4           01435 movwf temp ; address of the result
Warning[203]: Found opcode in column 1. (clrf)
0450   01B5           01436 clrf temp2 ; colume number
Warning[203]: Found opcode in column 1. (clrf)
0451   01B6           01437 clrf temp3 ; C0 = light_pos >= THD_IRLED
Warning[203]: Found opcode in column 1. (clrf)
0452   01B7           01438 clrf temp4 ; C1 = light_cl >= THD_CL3LED
Warning[203]: Found opcode in column 1. (clrf)
0453   01B8           01439 clrf temp5 ; C2 = light_off >= (lihgt_bg + THD_BG)
Warning[203]: Found opcode in column 1. (clrf)
0454   01B9           01440 clrf temp6 ; number of CLs in current row
Warning[203]: Found opcode in column 1. (clrf)
0455   01BA           01441 clrf temp7 ; temperaty storage
0456                  01442 calcfunc_loop
                      01443 ; get C0 = CL_POS_BIT from calcpos
Warning[206]: Found call to macro in column 1. (MOVFF)
                      01444 MOVFF FSR, temp
0456   0834               M         movf temp, w
0457   0084               M         movwf FSR
Warning[203]: Found opcode in column 1. (movlw)
0458   3000           01445 movlw FALSE
Warning[203]: Found opcode in column 1. (btfsc)
0459   1800           01446 btfsc INDF, CL_POS_BIT
Warning[203]: Found opcode in column 1. (movlw)
045A   30FF           01447 movlw TRUE ; CL_POS_BIT set, C0 = true
Warning[203]: Found opcode in column 1. (movwf)
045B   00B6           01448 movwf temp3
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01449 ; get C1 = light_cl >= THD_CL3LED
Warning[203]: Found opcode in column 1. (movlw)
045C   30BA           01450 movlw light_cl
Warning[203]: Found opcode in column 1. (addwf)
045D   0735           01451 addwf temp2, w
Warning[203]: Found opcode in column 1. (movwf)
045E   0084           01452 movwf FSR ; get current light_cl
Warning[203]: Found opcode in column 1. (movlw)
045F   3050           01453 movlw THD_CL3LED
Warning[203]: Found opcode in column 1. (subwf)
0460   0200           01454 subwf INDF, w ; light_cl - THD_CL3LED
Warning[203]: Found opcode in column 1. (btfss)
0461   1C03           01455 btfss STATUS, C
Warning[203]: Found opcode in column 1. (goto)
0462   2???           01456 goto calcfunc_C1false ; light_pos < THD_IRLED, C1 = false
Warning[203]: Found opcode in column 1. (movlw)
0463   30FF           01457 movlw TRUE ; light_pos >= THD_IRLED, C1 = ture
Warning[203]: Found opcode in column 1. (goto)
0464   2???           01458 goto calcfunc_C1next
0465                  01459 calcfunc_C1false
Warning[203]: Found opcode in column 1. (movlw)
0465   3000           01460 movlw FALSE
0466                  01461 calcfunc_C1next
Warning[203]: Found opcode in column 1. (movwf)
0466   00B7           01462 movwf temp4
                      01463 ; get C2 = light_off >= (lihgt_bg + THD_BG)
Warning[203]: Found opcode in column 1. (movlw)
0467   30B0           01464 movlw light_bg
Warning[203]: Found opcode in column 1. (addwf)
0468   0735           01465 addwf temp2, w
Warning[203]: Found opcode in column 1. (movwf)
0469   0084           01466 movwf FSR ; get current light_bg
Warning[203]: Found opcode in column 1. (movlw)
046A   3005           01467 movlw THD_BG
Warning[203]: Found opcode in column 1. (addwf)
046B   0700           01468 addwf INDF, w ; lihgt_bg + THD_BG
Warning[203]: Found opcode in column 1. (movwf)
046C   00BA           01469 movwf temp7 ; temperally save
Warning[203]: Found opcode in column 1. (movlw)
046D   30BF           01470 movlw light_off
Warning[203]: Found opcode in column 1. (addwf)
046E   0735           01471 addwf temp2, w
Warning[203]: Found opcode in column 1. (movwf)
046F   0084           01472 movwf FSR ; get current light_off
Warning[203]: Found opcode in column 1. (movf)
0470   083A           01473 movf temp7, w ; put (lihgt_bg + THD_BG) back
Warning[203]: Found opcode in column 1. (subwf)
0471   0200           01474 subwf INDF, w ; light_off - (lihgt_bg + THD_BG)
Warning[203]: Found opcode in column 1. (btfss)
0472   1C03           01475 btfss STATUS, C
Warning[203]: Found opcode in column 1. (goto)
0473   2???           01476 goto calcfunc_C2false ; light_off < (lihgt_bg - THD_BG), C2 = false
Warning[203]: Found opcode in column 1. (movlw)
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0474   30FF           01477 movlw TRUE ; light_off >= (lihgt_bg - THD_BG), C2 = true
Warning[203]: Found opcode in column 1. (goto)
0475   2???           01478 goto calcfunc_C2next
0476                  01479 calcfunc_C2false
Warning[203]: Found opcode in column 1. (movlw)
0476   3000           01480 movlw FALSE
0477                  01481 calcfunc_C2next
Warning[203]: Found opcode in column 1. (movwf)
0477   00B8           01482 movwf temp5
                      01483 ; determine the functionality of CL:
Warning[206]: Found call to macro in column 1. (MOVFF)
                      01484 MOVFF FSR, temp
0478   0834               M         movf temp, w
0479   0084               M         movwf FSR
Warning[203]: Found opcode in column 1. (clrf)
047A   0180           01485 clrf INDF ; reset layout byte
                      01486 ; CL_POS_BIT = C0 IOR C1 IOR C2
Warning[203]: Found opcode in column 1. (movf)
047B   0836           01487 movf temp3, w ; W = C0
Warning[203]: Found opcode in column 1. (iorwf)
047C   0437           01488 iorwf temp4, w ; W = C0 IOR C1
Warning[203]: Found opcode in column 1. (iorwf)
047D   0438           01489 iorwf temp5, w ; W = C0 IOR C1 IOR C2
Warning[203]: Found opcode in column 1. (btfsc)
047E   1903           01490 btfsc STATUS, Z
Warning[203]: Found opcode in column 1. (goto)
047F   2???           01491 goto calcfunc_POSfalse ; W == 0, false
Warning[203]: Found opcode in column 1. (bsf)
0480   1400           01492 bsf INDF, CL_POS_BIT ; W <> 0, true
Warning[203]: Found opcode in column 1. (incf)
0481   0AD0           01493 incf cl_total, f
Warning[203]: Found opcode in column 1. (incf)
0482   0AB9           01494 incf temp6, f
0483                  01495 calcfunc_POSfalse
                      01496 ; CL_FN_BIT = (C1 AND (NOT C2)) IOR (C0 AND (NOT C1) AND C2)
Warning[203]: Found opcode in column 1. (movf)
0483   0838           01497 movf temp5, w ; W = C2
Warning[203]: Found opcode in column 1. (xorlw)
0484   3AFF           01498 xorlw 0xFF ; W = NOT C2
Warning[203]: Found opcode in column 1. (andwf)
0485   0537           01499 andwf temp4, w ; W = C1 AND (NOT C2)
0486   00BA           01500  movwf temp7 ; temperally save
Warning[203]: Found opcode in column 1. (movf)
0487   0837           01501 movf temp4, w ; W = C1
Warning[203]: Found opcode in column 1. (xorlw)
0488   3AFF           01502 xorlw 0xFF ; W = NOT C1
Warning[203]: Found opcode in column 1. (andwf)
0489   0536           01503 andwf temp3, w ; W = C0 AND (NOT C1)
Warning[203]: Found opcode in column 1. (andwf)
048A   0538           01504 andwf temp5, w ; W = C0 AND (NOT C1) AND C2
Warning[203]: Found opcode in column 1. (iorwf)
048B   043A           01505 iorwf temp7, w ; W = (C1 AND(NOT C2))IOR(C0 AND(NOT C1)AND C2)
Warning[203]: Found opcode in column 1. (btfsc)
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

048C   1903           01506 btfsc STATUS, Z
Warning[203]: Found opcode in column 1. (goto)
048D   2???           01507 goto calcfunc_FNfalse ; W == 0, false
Warning[203]: Found opcode in column 1. (bsf)
048E   1480           01508 bsf INDF, CL_FN_BIT ; W <> 0, true
Warning[203]: Found opcode in column 1. (incf)
048F   0AD1           01509 incf cl_pass, f
0490                  01510 calcfunc_FNfalse
                      01511 ; CL_ERR_BIT = (C1 AND (NOT C0)) IOR (C2 AND (NOT C1))
Warning[203]: Found opcode in column 1. (movf)
0490   0837           01512 movf temp4, w ; W = C1
Warning[203]: Found opcode in column 1. (xorlw)
0491   3AFF           01513 xorlw 0xFF ; W = NOT C1
Warning[203]: Found opcode in column 1. (andwf)
0492   0538           01514 andwf temp5, w ; W = C2 AND (NOT C1)
Warning[203]: Found opcode in column 1. (movwf)
0493   00BA           01515 movwf temp7 ; temperally save
Warning[203]: Found opcode in column 1. (movf)
0494   0836           01516 movf temp3, w ; W = C0
Warning[203]: Found opcode in column 1. (xorlw)
0495   3AFF           01517 xorlw 0xFF ; W = NOT C0
Warning[203]: Found opcode in column 1. (andwf)
0496   0537           01518 andwf temp4, w ; W = C1 AND (NOT C0)
Warning[203]: Found opcode in column 1. (iorwf)
0497   043A           01519 iorwf temp7, w ; W = (C1 AND (NOT C0)) IOR (C2 AND (NOT C1))
Warning[203]: Found opcode in column 1. (btfss)
0498   1D03           01520 btfss STATUS, Z
Warning[203]: Found opcode in column 1. (bsf)
0499   1500           01521 bsf INDF, CL_ERR_BIT ; W <> 0, true
Warning[203]: Found opcode in column 1. (incf)
049A   0AB4           01522 incf temp, f
Warning[203]: Found opcode in column 1. (incf)
049B   0AB5           01523 incf temp2, f
Warning[203]: Found opcode in column 1. (movlw)
049C   3005           01524 movlw COLS
Warning[203]: Found opcode in column 1. (subwf)
049D   0235           01525 subwf temp2, w ; temp2(col#) - COLS(max col#)
Warning[203]: Found opcode in column 1. (btfss)
049E   1C03           01526 btfss STATUS, C
Warning[203]: Found opcode in column 1. (goto)
049F   2???           01527 goto calcfunc_loop ; temp2(col#) < COLS(max col#)
                      01528 ; cl_fail = cl_total - cl_pass
Warning[203]: Found opcode in column 1. (movf)
04A0   0851           01529 movf cl_pass, w
Warning[203]: Found opcode in column 1. (subwf)
04A1   0250           01530 subwf cl_total, w ; cl_total - cl_pass
Warning[203]: Found opcode in column 1. (movwf)
04A2   00D2           01531 movwf cl_fail
                      01532 ; advance two rows if "CLs in this row" >= MAXCLINROW
Warning[203]: Found opcode in column 1. (movlw)
04A3   3003           01533 movlw MAXCLINROW
Warning[203]: Found opcode in column 1. (subwf)
04A4   0239           01534 subwf temp6, w ; "CLs in this row" - MAXCLINROW
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[203]: Found opcode in column 1. (btfss)
04A5   1C03           01535 btfss STATUS, C
Warning[203]: Found opcode in column 1. (retlw)
04A6   3400           01536 retlw 0x00 ; "CLs in this row" < MAXCLINROW
Warning[203]: Found opcode in column 1. (retlw)
04A7   3401           01537 retlw 0x01 ; "CLs in this row" >= MAXCLINROW
                      01538 ;*******************************************************************************
                      01539 ; "calcruntime": Runtime Calculation Function
                      01540 ; Func: Calculate the running time of the run = endtime - starttime
                      01541 ; Input: st_min, st_sec, end_min, end_sec
                      01542 ; Output: runtime
                      01543 ; Affect: W, STATUS, temp
                      01544 ;*******************************************************************************
04A8                  01545 calcruntime
04A8   084A           01546     movf st_min, w ; temp = end_min - st_min
04A9   024D           01547     subwf end_min, w
04AA   1803           01548     btfsc STATUS, C
04AB   2???           01549     goto calcruntime_next1
04AC   3E3C           01550     addlw .60 ; borrow occur, +60min
04AD                  01551 calcruntime_next1
04AD   00B4           01552     movwf temp
04AE   084B           01553     movf st_sec, w ; W = end_sec - st_sec
04AF   024E           01554     subwf end_sec, w
04B0   1803           01555     btfsc STATUS, C
04B1   2???           01556     goto calcruntime_next2
04B2   3E3C           01557     addlw .60 ; borrow occur, +60sec
04B3   03B4           01558     decf temp, f ; -1min
04B4                  01559 calcruntime_next2
04B4   08B4           01560     movf temp, f
04B5   1903           01561     btfsc STATUS, Z
04B6   2???           01562     goto calcruntime_next3 ; temp == 0, runtime = W
04B7                  01563 calcruntime_loop ; runtime = W + .60*temp
04B7   3E3C           01564     addlw .60
04B8   1803           01565     btfsc STATUS, C
04B9   2???           01566     goto calcruntime_overflow ; W>255 overflow
04BA   0BB4           01567     decfsz temp, f
04BB   2???           01568     goto calcruntime_loop
04BC                  01569 calcruntime_next3
04BC   00CF           01570     movwf runtime
04BD   0008           01571     return
04BE                  01572 calcruntime_overflow
04BE   30FF           01573     movlw 0xFF ; !!!!
04BF   00CF           01574     movwf runtime
Warning[203]: Found opcode in column 1. (return)
04C0   0008           01575 return
                      01576 ;*******************************************************************************
                      01577 ; "lightsensor": Light Sensor Read, A/D Convert, and Store Function
                      01578 ; Func: Read in analog signal from light sensor, convert it to
                      01579 ; digital, and store the most significant 8-bit result to
                      01580 ; designated address, convert voltage reading to intensity,
                      01581 ; take average of LIGHTAVGX readings,
                      01582 ; repeat COLS times for a row
                      01583 ; Input: W = the staring address where the readings will be stored
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01584 ; Output: readings store into designated bytes
                      01585 ; Affect: W, STATUS, FSR, ADCON0, ADRESH, ADRESL, temp, temp2, temp3
                      01586 ; delaytemp, delaycount, arith_temp, arith_temp2
                      01587 ;*******************************************************************************
04C1                  01588 lightsensor
04C1   0084           01589     movwf FSR
04C2   01B4           01590     clrf temp ; CHS (Channel Select) bits
                      01591     MOVLF temp2, COLS ; number of colume left
04C3   3005               M         movlw COLS
04C4   00B5               M         movwf temp2
04C5                  01592 lightsensor_loop_col
04C5   30C7           01593     movlw B'11000111' ; mask CHS bits
04C6   059F           01594     andwf ADCON0, f ; clear CHS bits
04C7   0834           01595     movf temp, w
04C8   049F           01596     iorwf ADCON0, f ; set CHS bits
                      01597     ; avergae = (X1/n) + (X2/n) + ... + (Xn/n)
                      01598     MOVLF temp3, LIGHTAVGX ; count of sample light sensor reading
04C9   3004               M         movlw LIGHTAVGX
04CA   00B6               M         movwf temp3
04CB   0180           01599     clrf INDF
04CC                  01600 lightsensor_loop_avg
04CC   2???           01601     call delay50us ; require 2Tosc + Tacq = 28us
04CD   151F           01602     bsf ADCON0, GO
04CE                  01603 lightsensor_poll ; about 40us
04CE   191F           01604     btfsc ADCON0, GO
04CF   2???           01605     goto lightsensor_poll
04D0   081E           01606     movf ADRESH, w ; the most significant 8-bit result
04D1   3AFF           01607     xorlw 0xFF ; invert result, since 5V = 0 intensity!!!!
                      01608     DIVLW LIGHTAVGX
04D2   00EA               M         movwf arith_temp
04D3   3004               M         movlw LIGHTAVGX
04D4   2???               M         call divfn
04D5   0780           01609     addwf INDF, f
04D6   0BB6           01610     decfsz temp3, f
04D7   2???           01611     goto lightsensor_loop_avg
04D8   3008           01612     movlw B'00001000'
04D9   07B4           01613     addwf temp, f ; advance CHS
04DA   0A84           01614     incf FSR, f
04DB   0BB5           01615     decfsz temp2, f
04DC   2???           01616     goto lightsensor_loop_col
Warning[203]: Found opcode in column 1. (return)
04DD   0008           01617 return
                      01618 
                      01619 ;*******************************************************************************
                      01620 ; "ledcontrol": IR LEDs Control Function
                      01621 ; Func: Turn on or off the infrared LEDs according to W
                      01622 ; Input: W = turn on or off the LED (0=off or else=on)
                      01623 ; Output: None
                      01624 ; Affect: STATUS
                      01625 ; Runtime: 3.2 us
                      01626 ;*******************************************************************************
04DE                  01627 ledcontrol
04DE   1107           01628     bcf IRLED
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04DF   3E00           01629     addlw 0x00
04E0   1D03           01630     btfss STATUS, Z
04E1   1507           01631     bsf IRLED ; if w <> 0, set IRLED
Warning[203]: Found opcode in column 1. (return)
04E2   0008           01632 return
                      01633 ;*******************************************************************************
                      01634 ; "movedown": Arm Move Down Control Function
                      01635 ; Func: Order the test arm to move down to the Closet Lights
                      01636 ; Input: None
                      01637 ; Output: None
                      01638 ; Affect: VMOTOR_C0, VMOTOR_C1
                      01639 ; Runtime: ???? us
                      01640 ;*******************************************************************************
04E3                  01641 movedown
04E3   1509           01642     bsf SMOTOR_EN ; power s_motor to hold position
04E4   1087           01643     bcf VMOTOR_C1 ; to be safe
04E5   1407           01644     bsf VMOTOR_C0
                      01645     ;movedown_poll
                      01646     ; btfsc FB_BOT
                      01647     ; goto movedown_poll
04E6   301E           01648     movlw DCDOWNDELAY
04E7   2???           01649     call delayX100msm
04E8   1007           01650     bcf VMOTOR_C0
04E9   1109           01651     bcf SMOTOR_EN
Warning[203]: Found opcode in column 1. (return)
04EA   0008           01652 return
                      01653 ;*******************************************************************************
                      01654 ; "moveup": Arm Move Up Control Function
                      01655 ; Func: Order the test arm to move up to its default position
                      01656 ; Input: None
                      01657 ; Output: None
                      01658 ; Affect: VMOTOR_C0, VMOTOR_C1
                      01659 ; Runtime: ???? us
                      01660 ;*******************************************************************************
04EB                  01661 moveup
04EB   1509           01662     bsf SMOTOR_EN ; power s_motor to hold position
04EC   1007           01663     bcf VMOTOR_C0 ; to be safe
04ED   1487           01664     bsf VMOTOR_C1
Warning[207]: Found label after column 1. (moveup_poll)
04EE                  01665     moveup_poll
04EE   1A87           01666     btfsc FB_TOP
04EF   2???           01667     goto moveup_poll
04F0   1087           01668     bcf VMOTOR_C1
04F1   1109           01669     bcf SMOTOR_EN
Warning[203]: Found opcode in column 1. (return)
04F2   0008           01670 return
                      01671 ;*******************************************************************************
                      01672 ; "advancerow": Arm Advance-to-Next-Row Control Function
                      01673 ; Func: Order the test arm to the next(determined by smotor_dir) row
                      01674 ; Input: smotor_dir = direction of stpper motor
                      01675 ; (0 = "Row 1" to "Row 4"; 1 = "Row 4" to "Row 1")
                      01676 ; Output: None
                      01677 ; Affect: W, STATUS, temp, SMOTOR_EN, SMOTOR_S0, SMOTOR_S1, SMOTOR_S2,
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01678 ; SMOTOR_S3, delaytemp, delaycount, delaytemp2, delaycount2,
                      01679 ; delaytemp3, delaycount3
                      01680 ;*******************************************************************************
04F3                  01681 advancerow
04F3   1088           01682     bcf SMOTOR_S1 ; state init
04F4   1489           01683     bsf SMOTOR_S3
04F5   1509           01684     bsf SMOTOR_EN ; start motor
04F6   301C           01685     movlw SMOTOR_STEPS
04F7   00B4           01686     movwf temp
04F8   3006           01687     movlw SMOTOR_SPD_F ; note: w must keep its value until very end
04F9   08E7           01688     movf smotor_dir, f
04FA   1D03           01689     btfss STATUS, Z
04FB   2???           01690     goto advancerow_backwardloop
Warning[207]: Found label after column 1. (advancerow_forwardloop)
04FC                  01691     advancerow_forwardloop ; smotor_dir == 0, "Row 1" to "Row 4"
04FC   1008           01692     bcf SMOTOR_S0
04FD   1409           01693     bsf SMOTOR_S2
04FE   1F87           01694     btfss FB_ROW4
04FF   2???           01695     goto advancerow_end
0500   2???           01696     call delayX5msm
0501   1089           01697     bcf SMOTOR_S3
0502   1488           01698     bsf SMOTOR_S1
0503   1F87           01699     btfss FB_ROW4
0504   2???           01700     goto advancerow_end
0505   2???           01701     call delayX5msm
0506   1009           01702     bcf SMOTOR_S2
0507   1408           01703     bsf SMOTOR_S0
0508   1F87           01704     btfss FB_ROW4
0509   2???           01705     goto advancerow_end
050A   2???           01706     call delayX5msm
050B   1088           01707     bcf SMOTOR_S1
050C   1489           01708     bsf SMOTOR_S3
050D   1F87           01709     btfss FB_ROW4
050E   2???           01710     goto advancerow_end
050F   2???           01711     call delayX5msm
0510   0BB4           01712     decfsz temp, f
0511   2???           01713     goto advancerow_forwardloop
0512   2???           01714     goto advancerow_end
Warning[207]: Found label after column 1. (advancerow_backwardloop)
0513                  01715     advancerow_backwardloop ; smotor_dir <> 0, "Row 4" to "Row 1"
0513   1089           01716     bcf SMOTOR_S3
0514   1488           01717     bsf SMOTOR_S1
0515   2???           01718     call delayX5msm
0516   1008           01719     bcf SMOTOR_S0
0517   1409           01720     bsf SMOTOR_S2
0518   2???           01721     call delayX5msm
0519   1088           01722     bcf SMOTOR_S1
051A   1489           01723     bsf SMOTOR_S3
051B   2???           01724     call delayX5msm
051C   1009           01725     bcf SMOTOR_S2
051D   1408           01726     bsf SMOTOR_S0
051E   2???           01727     call delayX5msm
051F   0BB4           01728     decfsz temp, f
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0520   2???           01729     goto advancerow_backwardloop
Warning[207]: Found label after column 1. (advancerow_end)
0521                  01730     advancerow_end
0521   1109           01731     bcf SMOTOR_EN
Warning[203]: Found opcode in column 1. (return)
0522   0008           01732 return
                      01733 ;*******************************************************************************
                      01734 ; "writelog": Log Write Function
                      01735 ; Func: Write the result of current run to log
                      01736 ; Input: st_year, st_month, st_day, st_hour, st_min, st_sec,
                      01737 ; runtime, layout[], log_total, log_next
                      01738 ; Output: W = current log index, log_total, log_next, Log Entry
                      01739 ; Affect: STATUS, FSR, temp, temp2, temp3, temp4,
                      01740 ; arith_temp, arith_temp2
                      01741 ;*******************************************************************************
0523                  01742 writelog
                      01743         ; starting address (indirect) offset = (log_next / MAXLOGBANK) * 0x80 + 0x10
0523   0869           01744         movf log_next, w
                      01745         DIVLW MAXLOGBANK
0524   00EA               M         movwf arith_temp
0525   3006               M         movlw MAXLOGBANK
0526   2???               M         call divfn
                      01746         MULLW 0x80
0527   00EA               M         movwf arith_temp
0528   3080               M         movlw 0x80
0529   2???               M         call mulfn
052A   3E10           01747         addlw 0x10
052B   00B4           01748         movwf temp ; save in temp
                      01749         ; starting address (indirect) = (log_next MOD MAXLOGBANK)*LOGLENGTH + offset
052C   0869           01750         movf log_next, w
                      01751         MODLW MAXLOGBANK ; W = log_next mod MAXLOGBANK
052D   00EA               M         movwf arith_temp
052E   3006               M         movlw MAXLOGBANK
052F   2???               M         call divfn
0530   086A               M         movf arith_temp, w
                      01752         MULLW LOGLENGTH
0531   00EA               M         movwf arith_temp
0532   3010               M         movlw LOGLENGTH
0533   2???               M         call mulfn
0534   0734           01753         addwf temp, w
                      01754         ; store easy-access variables
0535   1783           01755         bsf STATUS, IRP ; BANK2&3 indirect access
0536   0084           01756         movwf FSR ; log addr + 0
                      01757         MOVFF INDF, runtime
0537   084F               M         movf runtime, w
0538   0080               M         movwf INDF
0539   0A84           01758         incf FSR, f ; log addr + 1
053A   0E46           01759         swapf st_year, w
053B   0747           01760         addwf st_month, w
053C   0080           01761         movwf INDF
053D   0A84           01762         incf FSR, f ; log addr + 2
                      01763         MOVFF INDF, st_day
053E   0848               M         movf st_day, w
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

053F   0080               M         movwf INDF
0540   0A84           01764         incf FSR, f ; log addr + 3
                      01765         MOVFF INDF, st_hour
0541   0849               M         movf st_hour, w
0542   0080               M         movwf INDF
0543   0A84           01766         incf FSR, f ; log addr + 4
                      01767         MOVFF INDF, st_min
0544   084A               M         movf st_min, w
0545   0080               M         movwf INDF
0546   0A84           01768         incf FSR, f ; log addr + 5
                      01769         MOVFF INDF, st_sec
0547   084B               M         movf st_sec, w
0548   0080               M         movwf INDF
0549   0A84           01770         incf FSR, f ; log addr + 6
                      01771         ; store layout
                      01772         MOVFF temp, FSR ; the address of log entry (start at + 6)
054A   0804               M         movf FSR,  w
054B   00B4               M         movwf temp
                      01773         MOVLF temp2, layout ; address of layout bytes
054C   3053               M         movlw layout
054D   00B5               M         movwf temp2
                      01774         MOVLF temp3, MAXPOS ; position counter
054E   3014               M         movlw MAXPOS
054F   00B6               M         movwf temp3
0550                  01775 writelog_layoutloop ; copy layout bytes in pairs
                      01776         ; write upper ribble
                      01777         MOVFF FSR, temp2 ; get first layout byte
0550   0835               M         movf temp2, w
0551   0084               M         movwf FSR
0552   1383           01778         bcf STATUS, IRP ; BANK0&1 indirect access
0553   0E00           01779         swapf INDF, w
0554   00B7           01780         movwf temp4 ; temp4 hold the swaped layout byte temperally
                      01781         MOVFF FSR, temp ; log entry
0555   0834               M         movf temp, w
0556   0084               M         movwf FSR
0557   1783           01782         bsf STATUS, IRP ; BANK2&3 indirect access
                      01783         MOVFF INDF, temp4
0558   0837               M         movf temp4, w
0559   0080               M         movwf INDF
055A   0AB5           01784         incf temp2, f
055B   03B6           01785         decf temp3, f
055C   1903           01786         btfsc STATUS, Z
055D   2???           01787         goto writelog_layoutnext
                      01788         ; write lower ribble
                      01789         MOVFF FSR, temp2 ; get second layout byte
055E   0835               M         movf temp2, w
055F   0084               M         movwf FSR
0560   1383           01790         bcf STATUS, IRP ; BANK0&1 indirect access
                      01791         MOVFF temp4, INDF ; temp4 hold the layout byte temperally
0561   0800               M         movf INDF, w
0562   00B7               M         movwf temp4
                      01792         MOVFF FSR, temp ; log entry
0563   0834               M         movf temp, w
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0564   0084               M         movwf FSR
0565   1783           01793         bsf STATUS, IRP ; BANK2&3 indirect access
0566   0837           01794         movf temp4, w
0567   0780           01795         addwf INDF, f
0568   0AB5           01796         incf temp2, f
0569   0AB4           01797         incf temp, f
056A   0BB6           01798         decfsz temp3, f
056B   2???           01799         goto writelog_layoutloop
056C                  01800 writelog_layoutnext
                      01801         ; calculate new log_next = (log_next + 1) MOD MAXLOG
                      01802         MOVFF temp, log_next ; save current log index in temp
056C   0869               M         movf log_next, w
056D   00B4               M         movwf temp
056E   0AE9           01803         incf log_next, f
056F   300C           01804         movlw MAXLOG ; test if max log reached
0570   0269           01805         subwf log_next, w ; log_next + 1 - MAXLOG
0571   1C03           01806         btfss STATUS, C
0572   3E0C           01807         addlw MAXLOG ; log_next + 1 < MAXLOG, add MAXLOG back
0573   00E9           01808         movwf log_next ; log_next = (log_next + 1) MOD MAXLOG
                      01809         ; calculate new log_total
0574   300C           01810         movlw MAXLOG
0575   0268           01811         subwf log_total, w ; log_total - MAXLOG
0576   1C03           01812         btfss STATUS, C
0577   0AE8           01813         incf log_total, f ; log_total < MAXLOG, increase total number
0578   0834           01814         movf temp, w ; resume current log entry index
0579   1383           01815         bcf STATUS, IRP ; back to BANK0&1 indirect access
057A   0008           01816         return
                      01817 ;*******************************************************************************
                      01818 ; "readlog": Log Read Function
                      01819 ; Func: Read the log of specified run
                      01820 ; Input: W = index of wanted report
                      01821 ; Output: st_year, st_month, st_day, st_hour, st_min, st_sec,
                      01822 ; end_hour, end_min, end_sec, runtime, cl_total, cl_pass,
                      01823 ; cl_fail, layout[]
                      01824 ; Affect: W, STATUS, FSR, temp, temp2, temp3, temp4,
                      01825 ; arith_temp, arith_temp2
                      01826 ;*******************************************************************************
057B                  01827 readlog
057B   00B5           01828         movwf temp2 ; save the index in temp2
057C   01D0           01829         clrf cl_total
057D   01D1           01830         clrf cl_pass
                      01831         ; starting address (indirect) offset = (index / MAXLOGBANK) * 0x80 + 0x10
                      01832         DIVLW MAXLOGBANK
057E   00EA               M         movwf arith_temp
057F   3006               M         movlw MAXLOGBANK
0580   2???               M         call divfn
                      01833         MULLW 0x80
0581   00EA               M         movwf arith_temp
0582   3080               M         movlw 0x80
0583   2???               M         call mulfn
0584   3E10           01834         addlw 0x10
0585   00B4           01835         movwf temp ; save in temp
                      01836         ; starting address (indirect) = (index MOD MAXLOGBANK)*LOGLENGTH + offset
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0586   0835           01837         movf temp2, w ; resume index
                      01838         MODLW MAXLOGBANK ; W = index mod MAXLOGBANK
0587   00EA               M         movwf arith_temp
0588   3006               M         movlw MAXLOGBANK
0589   2???               M         call divfn
058A   086A               M         movf arith_temp, w
                      01839         MULLW LOGLENGTH
058B   00EA               M         movwf arith_temp
058C   3010               M         movlw LOGLENGTH
058D   2???               M         call mulfn
058E   0734           01840         addwf temp, w
                      01841         ; read easy-access variables
058F   1783           01842         bsf STATUS, IRP ; BANK2&3 indirect access
0590   0084           01843         movwf FSR ; log addr + 0
                      01844         MOVFF runtime, INDF
0591   0800               M         movf INDF, w
0592   00CF               M         movwf runtime
0593   0A84           01845         incf FSR, f ; log addr + 1
0594   0E00           01846         swapf INDF, w ; swap upper 4 bits and lower 4 bits
0595   390F           01847         andlw 0x0F ; mask the lower 4 bits only
0596   00C6           01848         movwf st_year
0597   0800           01849         movf INDF, w
0598   390F           01850         andlw 0x0F ; mask the lower 4 bits only
0599   00C7           01851         movwf st_month
059A   0A84           01852         incf FSR, f ; log addr + 2
                      01853         MOVFF st_day, INDF
059B   0800               M         movf INDF, w
059C   00C8               M         movwf st_day
059D   0A84           01854         incf FSR, f ; log addr + 3
                      01855         MOVFF st_hour, INDF
059E   0800               M         movf INDF, w
059F   00C9               M         movwf st_hour
05A0   0A84           01856         incf FSR, f ; log addr + 4
                      01857         MOVFF st_min, INDF
05A1   0800               M         movf INDF, w
05A2   00CA               M         movwf st_min
05A3   0A84           01858         incf FSR, f ; log addr + 5
                      01859         MOVFF st_sec, INDF
05A4   0800               M         movf INDF, w
05A5   00CB               M         movwf st_sec
05A6   0A84           01860         incf FSR, f ; log addr + 6
                      01861          ; read layout[], cl_total and cl_pass
                      01862         MOVFF temp, FSR ; the address of log entry (start at + 6)
05A7   0804               M         movf FSR,  w
05A8   00B4               M         movwf temp
                      01863         MOVLF temp2, layout ; address of layout bytes
05A9   3053               M         movlw layout
05AA   00B5               M         movwf temp2
                      01864         MOVLF temp3, MAXPOS ; position counter
05AB   3014               M         movlw MAXPOS
05AC   00B6               M         movwf temp3
05AD                  01865 readlog_layoutloop ; read layout bytes in pairs
                      01866         ; read upper ribble
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01867         MOVFF FSR, temp ; log entry
05AD   0834               M         movf temp, w
05AE   0084               M         movwf FSR
05AF   1783           01868         bsf STATUS, IRP ; BANK2&3 indirect access
05B0   0E00           01869         swapf INDF, w
05B1   390F           01870         andlw 0x0F ; mask the lower 4 bits only (not 3 bits!!!!)
05B2   00B7           01871         movwf temp4 ; temp4 hold the swaped layout byte temperally
                      01872         MOVFF FSR, temp2 ; get first layout byte
05B3   0835               M         movf temp2, w
05B4   0084               M         movwf FSR
05B5   1383           01873         bcf STATUS, IRP ; BANK0&1 indirect access
                      01874         MOVFF INDF, temp4
05B6   0837               M         movf temp4, w
05B7   0080               M         movwf INDF
05B8   1800           01875         btfsc INDF, CL_POS_BIT
05B9   0AD0           01876         incf cl_total, f
05BA   1880           01877         btfsc INDF, CL_FN_BIT
05BB   0AD1           01878         incf cl_pass, f
05BC   0AB5           01879         incf temp2, f
05BD   03B6           01880         decf temp3, f
05BE   1903           01881         btfsc STATUS, Z
05BF   2???           01882         goto readlog_layoutnext
                      01883         ; read lower ribble
                      01884         MOVFF FSR, temp ; log entry
05C0   0834               M         movf temp, w
05C1   0084               M         movwf FSR
05C2   1783           01885         bsf STATUS, IRP ; BANK2&3 indirect access
05C3   0800           01886         movf INDF, w
05C4   390F           01887         andlw 0x0F ; mask the lower 4 bits only (not 3 bits!!!!)
05C5   00B7           01888         movwf temp4 ; temp4 hold the layout byte temperally
                      01889         MOVFF FSR, temp2 ; get second layout byte
05C6   0835               M         movf temp2, w
05C7   0084               M         movwf FSR
05C8   1383           01890         bcf STATUS, IRP ; BANK0&1 indirect access
                      01891         MOVFF INDF, temp4
05C9   0837               M         movf temp4, w
05CA   0080               M         movwf INDF
05CB   1800           01892         btfsc INDF, CL_POS_BIT
05CC   0AD0           01893         incf cl_total, f
05CD   1880           01894         btfsc INDF, CL_FN_BIT
05CE   0AD1           01895         incf cl_pass, f
05CF   0AB5           01896         incf temp2, f
05D0   0AB4           01897         incf temp, f
05D1   0BB6           01898         decfsz temp3, f
05D2   2???           01899         goto readlog_layoutloop
05D3                  01900 readlog_layoutnext
                      01901         ; calculate end time
                      01902         MOVFF end_hour, st_hour
05D3   0849               M         movf st_hour, w
05D4   00CC               M         movwf end_hour
                      01903         MOVFF end_min, st_min
05D5   084A               M         movf st_min, w
05D6   00CD               M         movwf end_min
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01904         MOVFF end_sec, st_sec
05D7   084B               M         movf st_sec, w
05D8   00CE               M         movwf end_sec
05D9   084F           01905         movf runtime, w
                      01906         DIVLW .60
05DA   00EA               M         movwf arith_temp
05DB   303C               M         movlw .60
05DC   2???               M         call divfn
05DD   07CD           01907         addwf end_min, f ; end_min = st_min + runtime / .60
05DE   084F           01908         movf runtime, w
                      01909         MODLW .60
05DF   00EA               M         movwf arith_temp
05E0   303C               M         movlw .60
05E1   2???               M         call divfn
05E2   086A               M         movf arith_temp, w
05E3   07CE           01910         addwf end_sec, f ; end_sec = st_sec + runtime MOD .60
05E4   303C           01911         movlw .60 ; test if 60s
05E5   024E           01912         subwf end_sec, w ; w = end_sec - 60
05E6   1C03           01913         btfss STATUS, C
05E7   2???           01914         goto readlog_endsec_next; end_sec < 60, end_sec OK
05E8   303C           01915         movlw .60 ; end_sec >= 60, +1min, -60s
05E9   02CE           01916         subwf end_sec, f
05EA   0ACD           01917         incf end_min, f
05EB                  01918 readlog_endsec_next
05EB   303C           01919         movlw .60 ; test if 60min
05EC   024D           01920         subwf end_min, w
05ED   1C03           01921         btfss STATUS, C
05EE   2???           01922         goto readlog_next ; end_min < 60, end_min OK, end_hour should OK
05EF   303C           01923         movlw .60 ; end_min >= 60, +1h, -60min
05F0   02CD           01924         subwf end_min, f
05F1   0ACC           01925         incf end_hour, f
05F2   3018           01926         movlw .24 ; test if 24h
05F3   024C           01927         subwf end_hour, w
05F4   1C03           01928         btfss STATUS, C
05F5   2???           01929         goto readlog_next
05F6   3018           01930         movlw .24 ; >24h, -24h
05F7   02CC           01931         subwf end_hour, f
05F8                  01932 readlog_next
                      01933         ; cl_fail = cl_total - cl_pass
05F8   0851           01934         movf cl_pass, w
05F9   0250           01935         subwf cl_total, w
05FA   00D2           01936         movwf cl_fail
05FB   1383           01937         bcf STATUS, IRP ; back to BANK0&1 indirect access
05FC   0008           01938         return
                      01939 ;*******************************************************************************
                      01940 ; "addsec": Add One Second Function
                      01941 ; Func: Add one second to the second byte of a timer,!!!!!!!!!!!!!!
                      01942 ; increase minute and hour bytes if necessary,
                      01943 ; carry out if day increment occur
                      01944 ; Input: W = Address of the second byte, min byte and hour byte
                      01945 ; should be at address W-1 and W-2, respectively
                      01946 ; Output: set STATUS C for day carry out
                      01947 ; Affect: W, FSR
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01948 ; Runtime: 3.6us/6.4us/9.2us/10.0us
                      01949 ;*******************************************************************************
05FD                  01950 addsec
05FD   0084           01951         movwf FSR
05FE   0A80           01952         incf INDF, f ; +1sec
05FF   303C           01953         movlw .60
0600   0200           01954         subwf INDF, w ; W = INDF - 60, test if 60s
0601   1C03           01955         btfss STATUS, C
0602   0008           01956         return ; INDF < 60, C==0, function done
0603   0180           01957         clrf INDF ; >=60s, clear sec
0604   0384           01958         decf FSR, f ; now FSR has address of min byte
0605   0A80           01959         incf INDF, f ; +1min
0606   303C           01960         movlw .60
0607   0200           01961         subwf INDF, w ; W = INDF - 60, test if 60min
0608   1C03           01962         btfss STATUS, C
0609   0008           01963         return ; INDF < 60, C==0, function done
060A   0180           01964         clrf INDF ; >=60min, clear min
060B   0384           01965         decf FSR, f ; now FSR has address of hour byte
060C   0A80           01966         incf INDF, f ; +1hour
060D   3018           01967         movlw .24
060E   0200           01968         subwf INDF, w ; W = INDF - 24, test if 24hour
060F   1C03           01969         btfss STATUS, C
0610   0008           01970         return ; INDF < 24, C==0, function done
0611   0180           01971         clrf INDF ; >=24h, clear hour
0612   0008           01972         return ; C has been set
                      01973 ;*******************************************************************************
                      01974 ; "addday": Add One Day Function
                      01975 ; Func: Add one day to the day byte of a timer,
                      01976 ; increase month and year bytes if necessary, !!!!unfinish
                      01977 ; Input: W = Address of the day byte, month byte and year byte
                      01978 ; should be at address W-1 and W-2, respectively
                      01979 ; Output: None
                      01980 ; Affect: W, STATUS, FSR
                      01981 ; Runtime: 3.6us/6.4us/8.0us
                      01982 ;*******************************************************************************
0613                  01983 addday
0613   0084           01984         movwf FSR
0614   0A80           01985         incf INDF, f ; +1day
0615   301F           01986         movlw .31 ; assume 1 month always= 30 days !!!!
0616   0200           01987         subwf INDF, w ; W = INDF - 31, test if over 30days
0617   1C03           01988         btfss STATUS, C
0618   0008           01989         return ; INDF < 31, C==0, function done
0619   0180           01990         clrf INDF ; >=31s, clear day
Message[305]: Using default destination of 1 (file).
061A   0A80           01991         incf INDF ; day default at 1
061B   0384           01992         decf FSR, f ; now FSR has address of month byte
061C   0A80           01993         incf INDF, f ; +1month
061D   300D           01994         movlw .13
061E   0200           01995         subwf INDF, w ; W = INDF - 13, test if over 12month
061F   1C03           01996         btfss STATUS, C
0620   0008           01997         return ; INDF < 13, C==0, function done
0621   0180           01998         clrf INDF ; >=13month, clear month
Message[305]: Using default destination of 1 (file).
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0622   0A80           01999         incf INDF ; month default at 1
0623   0384           02000         decf FSR, f ; now FSR has address of year byte
0624   0A80           02001         incf INDF, f ; +1year
0625   0008           02002         return
                      02003 ;*******************************************************************************
                      02004 ; "divfn": Byte Integer Division Function
                      02005 ; Func: Devide temp by W and store result in W, not efficient
                      02006 ; Input: Temp = Dividend, W = Dividor
                      02007 ; Output: W = Quotient, arith_temp = reminder,
                      02008 ; set STATUS Z for zero quotient, C for error
                      02009 ; Affect: arith_temp2
                      02010 ;*******************************************************************************
0626                  02011 divfn
0626   3E00           02012         addlw 0x00
0627   1403           02013         bsf STATUS, C ; set carry in case of error
0628   1903           02014         btfsc STATUS, Z ; if zero
0629   0008           02015         return ; return (error C,Z)
062A   01EB           02016         clrf arith_temp2
062B                  02017 divfn_loop
062B   02EA           02018         subwf arith_temp, f
062C   1C03           02019         btfss STATUS, C
062D   2???           02020         goto divfn_next
062E   0AEB           02021         incf arith_temp2, f
062F   2???           02022         goto divfn_loop
0630                  02023 divfn_next
0630   07EA           02024         addwf arith_temp, f
0631   086B           02025         movf arith_temp2, w
0632   0008           02026         return
                      02027 ;*******************************************************************************
                      02028 ; "mulfn": Byte Integer Multiplication Function
                      02029 ; Func: Multiple W by temp and return result in W, not efficient
                      02030 ; Input: Temp, W
                      02031 ; Output: W = Result, set STATUS Z for zero, C for overflow
                      02032 ; Affect: arith_temp, arith_temp2
                      02033 ;*******************************************************************************
0633                  02034 mulfn
0633   1003           02035         bcf STATUS, C ; clr C bit for arith_temp == 0
0634   00EB           02036         movwf arith_temp2 ; store W in arith_temp2
0635   3000           02037         movlw 0x00 ; W = 0 + arith_tempp * arith_temp2
0636   08EA           02038         movf arith_temp, f
0637   1903           02039         btfsc STATUS, Z
0638   0008           02040         return ; arith_temp == 0, return 0
0639                  02041 mulfn_loop
0639   076B           02042         addwf arith_temp2, w
063A   1803           02043         btfsc STATUS, C
063B   2???           02044         goto mulfn_overflow ; W>255 overflow
063C   0BEA           02045         decfsz arith_temp, f
063D   2???           02046         goto mulfn_loop
063E                  02047 mulfn_overflow
063E   0008           02048         return
3F72                  02049         end
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADCtest_loop                      000000BB
ADCtest_simpledelay               000000CB
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BANK0                             
BANK00                            
BANK1                             
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CALC_POS                          
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

CKP                               00000004
CL_ERR_BIT                        2
CL_FN_BIT                         1
CL_POS_BIT                        0
COLS                              00000005
COPY_DEC1                         
COPY_DEC2                         
COPY_DEC3                         
COPY_LAYOUT                       
COPY_STRING                       
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DCDOWNDELAY                       0000001E
DEBUG                             
DIVLW                             
D_A                               00000005
D_NOT_A                           00000005
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FALSE                             0x00
FB_ROW4                           PORTC, 7
FB_TOP                            PORTC, 5
FERR                              00000002
FSR                               00000004
FSR_temp                          00000002
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INITVAL_ADCON0                    B'10000001'
INITVAL_ADCON1                    B'00000010'
INITVAL_OPTREG                    B'10000101'
INITVAL_TRISA                     B'00101111'
INITVAL_TRISB                     B'11110010'
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

INITVAL_TRISC                     B'10100000'
INITVAL_TRISD                     B'00000000'
INITVAL_TRISE                     B'00000000'
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRLED                             PORTC, 2
IRLED_OFF                         
IRLED_ON                          
IRP                               00000007
KEYPAD_DA                         PORTB, 1
LCD_E                             PORTD, 3
LCD_PORT                          PORTD
LCD_RS                            PORTD, 2
LCD_clear                         00000000
LCD_init                          00000000
LCD_line2                         00000000
LCD_out                           00000000
LCD_wt                            00000000
LCDline                           00000023
LIGHTAVGX                         00000004
LOGLENGTH                         00000010
MAXCLINROW                        00000003
MAXLINE                           00000009
MAXLOG                            0000000C
MAXLOGBANK                        00000006
MAXPOS                            00000014
ML_finish                         00000283
ML_finish_0                       00000349
ML_finish_1                       0000034C
ML_hdinit                         00000240
ML_hdinit_0                       0000028E
ML_hdinit_1                       00000291
ML_noreport                       00000259
ML_noreport_0                     000002BE
ML_noreport_1                     000002C1
ML_realtime                       0000024E
ML_realtime_0                     00000294
ML_realtime_1                     000002AA
ML_report                         00000264
ML_report_0                       000002C4
ML_report_1                       000002DF
ML_report_10                      0000033E
ML_report_2                       000002F5
ML_report_3                       0000030B
ML_report_4                       00000315
ML_report_5                       0000031D
ML_report_6                       0000032C
ML_report_7                       0000032F
ML_report_8                       00000334
ML_report_9                       00000339
ML_rtcinit                        0000024B
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

ML_run                            00000278
ML_run_0                          00000343
ML_run_1                          00000346
MODLW                             
MOVFF                             
MOVLF                             
MULLW                             
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NULL                              0x00
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHASE_FINISH                      6
PHASE_HDINIT                      0
PHASE_NOREPORT                    3
PHASE_REALTIME                    2
PHASE_REPORT                      4
PHASE_RTCINIT                     1
PHASE_RUN                         5
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PRINT_DOT                         
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 63


SYMBOL TABLE
  LABEL                             VALUE 

ROWS                              00000004
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMOTOR_EN                         PORTE, 2
SMOTOR_S0                         PORTD, 0
SMOTOR_S1                         PORTD, 1
SMOTOR_S2                         PORTE, 0
SMOTOR_S3                         PORTE, 1
SMOTOR_SPD_F                      00000006
SMOTOR_STEPS                      0000001C
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STOP_BUT                          0x0B
STORE_LIGHT                       
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TABLE                             
THD_BG                            00000005
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 64


SYMBOL TABLE
  LABEL                             VALUE 

THD_CL3LED                        00000050
THD_IRLED                         0000001C
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 65


SYMBOL TABLE
  LABEL                             VALUE 

TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TRUE                              0xFF
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
VMOTOR_C0                         PORTC, 0
VMOTOR_C1                         PORTC, 1
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 66


SYMBOL TABLE
  LABEL                             VALUE 

_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
addday                            00000613
addsec                            000005FD
advancerow                        000004F3
advancerow_backwardloop           00000513
advancerow_end                    00000521
advancerow_forwardloop            000004FC
analog_poll                       000000BD
analogtest                        000000BB
analogtest2                       00000043
arg                               0000003B
arg2                              0000003C
arith_temp                        0000006A
arith_temp2                       0000006B
calcfunc                          0000044F
calcfunc_C1false                  00000465
calcfunc_C1next                   00000466
calcfunc_C2false                  00000476
calcfunc_C2next                   00000477
calcfunc_FNfalse                  00000490
calcfunc_POSfalse                 00000483
calcfunc_loop                     00000456
calcpos                           00000438
calcpos_loop                      0000043A
calcpos_next                      00000447
calcruntime                       000004A8
calcruntime_loop                  000004B7
calcruntime_next1                 000004AD
calcruntime_next2                 000004B4
calcruntime_next3                 000004BC
calcruntime_overflow              000004BE
char_keynumber                    000000D9
char_layout                       000000D1
char_slash                        000000E9
cl_fail                           00000052
cl_pass                           00000051
cl_total                          00000050
copydec                           00000380
copydec_copyhundreds              0000038B
copydec_copytens                  0000039F
copydec_ending                    000003AA
copydec_ones                      000003A2
copydec_tens                      00000390
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 67


SYMBOL TABLE
  LABEL                             VALUE 

copylayout                        00000360
copylayout_charloop               0000036D
copylayout_next                   00000368
copylayout_startloop              00000365
copystring                        00000356
copystring_loop                   00000357
delay100ms                        00000000
delay1sl                          00000000
delay50us                         00000000
delay5ms                          00000000
delayX100msm                      00000000
delayX5msm                        00000000
display                           0000021F
divfn                             00000626
divfn_loop                        0000062B
divfn_next                        00000630
end_hour                          0000004C
end_min                           0000004D
end_sec                           0000004E
init_pic                          000000CF
keypad_timeout                    00000219
keyresp                           000001A1
keyresp_ma                        0000000F
keyresp_next                      000001BB
kma0                              0000002C
kma1                              00000030
kma2                              00000034
kma3                              00000029
kma4                              00000036
kma5                              00000038
kma6                              0000003A
kma7                              00000029
kma8                              0000003D
kma9                              00000040
kmaA                              00000029
kmaB                              00000029
kmaC                              00000029
kmaD                              00000029
kmaE                              00000029
kmaF                              00000029
kma_next                          00000029
kma_release                       00000029
kp_to_nonewsec                    0000021E
layout                            00000053
ledcontrol                        000004DE
light_bg                          000000B0
light_cl                          000000BA
light_off                         000000BF
light_pos                         000000B5
lightsensor                       000004C1
lightsensor_loop_avg              000004CC
lightsensor_loop_col              000004C5
lightsensor_poll                  000004CE
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 68


SYMBOL TABLE
  LABEL                             VALUE 

line_num                          00000022
literal                           00000005
literal_addr                      0000003D
log_next                          00000069
log_total                         00000068
mac_test                          00000000
mac_test_loop                     00000009
makeline                          0000022D
movedown                          000004E3
moveup                            000004EB
moveup_poll                       000004EE
mulfn                             00000633
mulfn_loop                        00000639
mulfn_overflow                    0000063E
newsec                            0000006C
phase                             00000020
readlog                           0000057B
readlog_endsec_next               000005EB
readlog_layoutloop                000005AD
readlog_layoutnext                000005D3
readlog_next                      000005F8
realtime                          000001BF
report                            000001C3
report_last                       000001CA
report_next                       000001E0
report_num                        00000021
reset_hardware                    000000EF
reset_realtime                    000000FF
reset_rt_hms                      0000015E
reset_rt_hms0                     0000017A
reset_rt_hms1                     00000181
reset_rt_hms2                     00000185
reset_rt_hms3                     0000018C
reset_rt_hms4                     00000190
reset_rt_hms5                     00000197
reset_rt_hmsrl                    0000019A
reset_rt_ymd                      00000114
reset_rt_ymd0                     00000130
reset_rt_ymd1                     00000137
reset_rt_ymd2                     0000013B
reset_rt_ymd3                     00000142
reset_rt_ymd4                     00000146
reset_rt_ymd5                     0000014D
reset_rt_ymdrl                    00000150
reset_software                    000000E6
result_addr                       0000003F
rowleft                           0000003E
rt_counter                        00000003
rt_day                            00000042
rt_hour                           00000043
rt_min                            00000044
rt_month                          00000041
rt_sec                            00000045
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 69


SYMBOL TABLE
  LABEL                             VALUE 

rt_year                           00000040
run                               000003B5
run_clearlayoutloop               000003C5
run_end                           0000042B
run_init_smotornext               000003D1
run_loop                          000003E0
run_nextRAM_next                  00000411
run_nextRAM_next2                 00000421
run_nextRAM_reverse               00000410
run_nextRAM_reverse2              00000420
run_noextrarow                    0000041A
runtime                           0000004F
scroll_down                       000001FC
scroll_up                         000001F4
smotor_dir                        00000067
st_day                            00000048
st_hour                           00000049
st_min                            0000004A
st_month                          00000047
st_sec                            0000004B
st_year                           00000046
startrun                          00000205
status_temp                       00000001
stoprun                           00000218
str_colon                         00000046
str_dash                          00000044
str_dot                           000000B0
str_emerstop                      000000C1
str_enterhms                      00000033
str_enterymd                      00000023
str_entry                         00000048
str_fail                          00000080
str_finish                        0000005C
str_init                          00000009
str_insp_fin                      000000B2
str_layout                        00000088
str_layout1                       00000090
str_layout2                       00000098
str_layout3                       0000009C
str_layout4                       000000A0
str_noreport                      00000019
str_null                          000000D0
str_pass                          00000079
str_running                       000000A8
str_runtime                       00000065
str_s                             0000006F
str_start                         00000054
str_total                         00000071
str_yearhead                      00000041
table_temp                        00000004
temp                              00000034
temp2                             00000035
temp3                             00000036
MPASM  5.48                          TEST.ASM   2-9-2013  18:13:39         PAGE 70


SYMBOL TABLE
  LABEL                             VALUE 

temp4                             00000037
temp5                             00000038
temp6                             00000039
temp7                             0000003A
unused_key                        000001BB
w_temp                            00000000
wait_release                      000001BB
writeline                         000003AD
writeline_loop                    000003AF
writelog                          00000523
writelog_layoutloop               00000550
writelog_layoutnext               0000056C

Errors   :     0
Warnings :   127 reported,     0 suppressed
Messages :     9 reported,     0 suppressed

