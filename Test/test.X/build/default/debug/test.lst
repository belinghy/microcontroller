MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001         list p=16f877 ; list directive to define processor
                      00002         #include <p16f877.inc> ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2012 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003         __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP
                            _OFF
                      00004         #include <common.inc>
                      00001         ;extern LCD_init, LCD_clear, LCD_line2s, LCD_out, LCD_wt, delay50us, delay5ms, delayX5msm, delay
                            100ms, delayX100msm, delay1sl
                      00002 
                      00003 
                      00004         #define DEBUG
                      00005         #define NULL 0x00 ; must not change
                      00006         #define FALSE 0x00 ; must not change
                      00007         #define TRUE 0xFF ; must not change
                      00008         #define KEYPAD_DA PORTB, 1
                      00009         #define SMOTOR_S0 PORTD, 0
                      00010         #define SMOTOR_S1 PORTD, 1
                      00011         #define SMOTOR_S2 PORTE, 0
                      00012         #define SMOTOR_S3 PORTE, 1
                      00013         #define SMOTOR_EN PORTE, 2
                      00014         #define VMOTOR_C0 PORTC, 0
                      00015         #define VMOTOR_C1 PORTC, 1
                      00016         #define IRLED PORTC, 2
                      00017         #define FB_TOP PORTC, 5
                      00018         ; #define FB_BOT PORTC, 6
                      00019         #define FB_ROW4 PORTC, 7
                      00020         #define LCD_RS PORTD, 2
                      00021         #define LCD_E PORTD, 3
                      00022         #define LCD_PORT PORTD
                      00023         #define CL_POS_BIT 0
                      00024         #define CL_FN_BIT 1
                      00025         #define CL_ERR_BIT 2
                      00026         #define STOP_BUT 0x0B ; stop buttom
                      00027         #define PHASE_HDINIT 0 ; Phase 0: Hardware Initialization/Reset
                      00028         #define PHASE_RTCINIT 1 ; Phase 1: RTC Initialization/Reset
                      00029         #define PHASE_REALTIME 2 ; Phase 2: Real Time
                      00030         #define PHASE_NOREPORT 3 ; Phase 3: No Report
                      00031         #define PHASE_REPORT 4 ; Phase 4: Report Review
                      00032         #define PHASE_RUN 5 ; Phase 5: Inspection Run
                      00033         #define PHASE_FINISH 6 ; Phase 6: Inspection Finish
                      00034         ; pull-up diable, Timer0 internal clk, pos edge, 1:64
                      00035         #define INITVAL_OPTREG B'10000101'
                      00036         #define INITVAL_TRISA B'00101111'
                      00037         #define INITVAL_TRISB B'11110010'
                      00038         #define INITVAL_TRISC B'10100000' ;B'11100000'!!!!
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039         #define INITVAL_TRISD B'00000000'
                      00040         #define INITVAL_TRISE B'00000000'
                      00041         #define INITVAL_ADCON0 B'10000001' ; 32Tosc, AN0, ADC on
                      00042         #define INITVAL_ADCON1 B'00000010' ; left justified, 5 channel, 0 Vref
                      00043 ;******************CONSTANTS****************************************************
  00000009            00044 MAXLINE EQU .9 ; (max "line_num" - 1) in report phase
  00000014            00045 MAXPOS EQU .20 ; total positions = ROWS*COLS
  00000004            00046 ROWS EQU .4 ; total 4 rows to move
  00000005            00047 COLS EQU .5 ; total 5 cols in a row
  00000003            00048 MAXCLINROW EQU .3 ; max number of CLs possible in a row
  0000001E            00049 DCDOWNDELAY EQU .30 ; * 0.1s == elapse time for DC motor to drive down
  0000001C            00050 SMOTOR_STEPS EQU .28 ; * 4 == # of steps that stepper motor need to turn
  00000006            00051 SMOTOR_SPD_F EQU .6 ; speed fact: speed = 1 step / (SMOTOR_SPD_F * 5ms)
  00000050            00052 THD_CL3LED EQU .80 ; threshold to distinguish between 2 LEDs and 3LEDS
  0000001C            00053 THD_IRLED EQU .28 ; threshold for infrared reflected light
  00000005            00054 THD_BG EQU .5 ; threshold for background variation (add to light_bg)
  0000000C            00055 MAXLOG EQU .12 ; max number of log
  00000006            00056 MAXLOGBANK EQU .6 ; max number of log per bank = MAXLOG/2
  00000010            00057 LOGLENGTH EQU .16 ; length of each log entry
  00000004            00058 LIGHTAVGX EQU .4 ; number of sample light sensor reading to be averaged
                      00059 ;******************MACROS*******************************************************
                      00060 BANK0 macro
                      00061         bcf STATUS, RP0
                      00062         endm
                      00063 BANK1 macro
                      00064         bsf STATUS, RP0
                      00065         endm
                      00066 BANK00 macro
                      00067         bcf STATUS, IRP
                      00068         bcf STATUS, RP1
                      00069         bcf STATUS, RP0
                      00070         endm
                      00071         ;BANK02 macro
                      00072         ; bsf STATUS, IRP
                      00073         ; bsf STATUS, RP1
                      00074         ; bcf STATUS, RP0
                      00075         ; endm
                      00076         ;
                      00077         ;BANK03 macro
                      00078         ; bsf STATUS, IRP
                      00079         ; bsf STATUS, RP1
                      00080         ; bsf STATUS, RP0
                      00081         ; endm
                      00082         ; Affect W!
                      00083 MOVFF macro dest, orig
                      00084         movf orig, w
                      00085         movwf dest
                      00086         endm
                      00087 ; Affect W!
                      00088 MOVLF macro dest, literal
                      00089         movlw literal
                      00090         movwf dest
                      00091         endm
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00092         
                      00005     ;#include <common2.inc>
  0000                00006         extern LCD_init, LCD_clear, LCD_line2, LCD_out, LCD_wt
  0000                00007         extern delay50us, delay5ms, delayX5msm, delay100ms, delayX100msm, delay1sl
                      00008 ;******************VARIABLES****************************************************
                      00009         cblock 0x20
  00000020            00010                 phase ; 0 = realtime, 1 = report, 2 = run
  00000021            00011                 report_num
  00000022            00012                 line_num
  00000023            00013                 LCDline : .17 ; 16 + null
  00000034            00014                 temp ; only local use: must be discard before calling/jumping
  00000035            00015                 temp2
  00000036            00016                 temp3
  00000037            00017                 temp4
  00000038            00018                 temp5
  00000039            00019                 temp6
  0000003A            00020                 temp7
  0000003B            00021                 arg ; argument
  0000003C            00022                 arg2
  0000003D            00023                 literal_addr
  0000003E            00024                 rowleft ; how many rows left to inspect
  0000003F            00025                 result_addr ; adress to store result of current row in "layout"
  00000040            00026                 rt_year ; realtime
  00000041            00027                 rt_month
  00000042            00028                 rt_day
  00000043            00029                 rt_hour
  00000044            00030                 rt_min
  00000045            00031                 rt_sec
  00000046            00032                 st_year ; start
  00000047            00033                 st_month
  00000048            00034                 st_day
  00000049            00035                 st_hour
  0000004A            00036                 st_min
  0000004B            00037                 st_sec
  0000004C            00038                 end_hour
  0000004D            00039                 end_min
  0000004E            00040                 end_sec
  0000004F            00041                 runtime
  00000050            00042                 cl_total
  00000051            00043                 cl_pass
  00000052            00044                 cl_fail
  00000053            00045                 layout : .20 ; result
  00000067            00046                 smotor_dir ; direction of stepper motor
  00000068            00047                 log_total ; total numbers of reports available
  00000069            00048                 log_next ; index of where next report will be written
  0000006A            00049                 arith_temp ; arithmetic temp
  0000006B            00050                 arith_temp2
  0000006C            00051                 newsec ; a new second occur (Bool from interrupt)
                      00052         endc
                      00053         cblock 0xB0
  000000B0            00054                 light_bg : 5 ; background light intensity of current row
  000000B5            00055                 light_pos : 5 ; position reflected light intensity of current row
  000000BA            00056                 light_cl : 5 ; closet light LEDs light intensity of current row
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  000000BF            00057                 light_off : 5 ; closet light off light intensity of current row
                      00058         endc
                      00059 
                      00060         udata_shr
0000                  00061 w_temp res 1
0001                  00062 status_temp res 1
                      00063 ;pclath_temp res 1
0002                  00064 FSR_temp res 1
0003                  00065 rt_counter res 1 ; real time counter
0004                  00066 table_temp res 1
                      00067 
                      00068 ;******************MACROS*******************************************************
                      00069 DIVLW macro L
                      00070         movwf arith_temp
                      00071         movlw L
                      00072         call divfn
Warning[205]: Found directive in column 1. (endm)
                      00073 endm
                      00074 
                      00075 MODLW macro L
                      00076         movwf arith_temp
                      00077         movlw L
                      00078         call divfn
                      00079         movf arith_temp, w
Warning[205]: Found directive in column 1. (endm)
                      00080 endm
                      00081 
                      00082 MULLW macro L
                      00083         movwf arith_temp
                      00084         movlw L
                      00085         call mulfn
Warning[205]: Found directive in column 1. (endm)
                      00086 endm
                      00087 
                      00088 COPY_STRING macro string_table
                      00089         movlw string_table
                      00090         call copystring
Warning[205]: Found directive in column 1. (endm)
                      00091 endm
                      00092 
                      00093 COPY_LAYOUT macro rownum
                      00094         movlw rownum
                      00095         call copylayout
Warning[205]: Found directive in column 1. (endm)
                      00096 endm
                      00097 
                      00098 COPY_DEC1 macro decnumber
                      00099         movf decnumber, w
                      00100         movwf arg
                      00101         movlw 0x01
                      00102         movwf arg2
                      00103         call copydec
Warning[205]: Found directive in column 1. (endm)
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00104 endm
                      00105 
                      00106 COPY_DEC2 macro decnumber
                      00107         movf decnumber, w
                      00108         movwf arg
                      00109         movlw 0x02
                      00110         movwf arg2
                      00111         call copydec
Warning[205]: Found directive in column 1. (endm)
                      00112 endm
                      00113 
                      00114 COPY_DEC3 macro decnumber
                      00115         movf decnumber, w
                      00116         movwf arg
                      00117         movlw 0x03
                      00118         movwf arg2
                      00119         call copydec
Warning[205]: Found directive in column 1. (endm)
                      00120 endm
                      00121 
                      00122 TABLE macro
                      00123         local tablename
                      00124         movwf table_temp
                      00125         movlw HIGH tablename
                      00126         movwf PCLATH
                      00127         movf table_temp, w
                      00128         addlw LOW tablename
                      00129         btfsc STATUS, C
                      00130         incf PCLATH, f
                      00131         movwf PCL
                      00132         tablename
Warning[205]: Found directive in column 1. (endm)
                      00133 endm
                      00134 
                      00135 STORE_LIGHT macro addr
                      00136         movlw addr
                      00137         call lightsensor
Warning[205]: Found directive in column 1. (endm)
                      00138 endm
                      00139 
                      00140 IRLED_ON macro
                      00141         movlw 0x01
                      00142         call ledcontrol
Warning[205]: Found directive in column 1. (endm)
                      00143 endm
                      00144 
                      00145 IRLED_OFF macro
                      00146         movlw 0x00
                      00147         call ledcontrol
Warning[205]: Found directive in column 1. (endm)
                      00148 endm
                      00149 
                      00150 CALC_POS macro threshold
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151         movwf temp
                      00152         movlw threshold
                      00153         movwf temp4
                      00154         call calcpos
Warning[205]: Found directive in column 1. (endm)
                      00155 endm
                      00156 
                      00157 PRINT_DOT macro
                      00158         MOVLF FSR, LCDline
                      00159         COPY_STRING str_dot
                      00160         call writeline
Warning[205]: Found directive in column 1. (endm)
                      00161 endm
                      00162 ;*******************************************************************************
                      00163 ;*******************************************************************************
                      00164         org 0x0000
                      00165         #IFNDEF DEBUG
                      00166         goto main
                      00167         #ELSE
0000   2???           00168         goto mac_test
                      00169         #ENDIF
                      00170         #IFNDEF DEBUG
                      00171         org 0x0004
                      00172         goto interrupt
                      00173         #ENDIF
                      00174 ;*******************************************************************************
                      00175 ; "literal": String Literal Function
                      00176 ; Func: Store all string literal in this project here, it return
                      00177 ; any char wanted
                      00178 ; Input: W = the program memory address of the wanted char
                      00179 ; Output: W = the corresponding char
                      00180 ;*******************************************************************************
                      00181         org 0x0005 ; make sure literal table is in first 256 lines
0005                  00182 literal
0005   00B4           00183         movwf temp
0006   018A           00184         clrf PCLATH
0007   0834           00185         movf temp, w
0008   0082           00186         movwf PCL
                      00187         ; max length 16 dt "0123456789ABCDEF", 0
0009   3449 344E 3449 00188 str_init dt "INITIALIZING...", 0
       3454 3449 3441 
       344C 3449 345A 
       3449 344E 3447 
       342E 342E 342E 
       3400 
0019   344E 344F 3420 00189 str_noreport dt "NO REPORT", 0
       3452 3445 3450 
       344F 3452 3454 
       3400 
0023   3445 344E 3454 00190 str_enterymd dt "ENTER 20YYMMDD:",0
       3445 3452 3420 
       3432 3430 3459 
       3459 344D 344D 
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3444 3444 343A 
       3400 
0033   3445 344E 3454 00191 str_enterhms dt "ENTER hhmmss:", 0
       3445 3452 3420 
       3468 3468 346D 
       346D 3473 3473 
       343A 3400 
0041   3432 3430 3400 00192 str_yearhead dt "20", 0 ; all years like 20XX
0044   342D 3400      00193 str_dash dt "-", 0
0046   343A 3400      00194 str_colon dt ":", 0
0048   344C 344F 3447 00195 str_entry dt "LOG ENTRY: ",0
       3420 3445 344E 
       3454 3452 3459 
       343A 3420 3400 
0054   3453 3454 3441 00196 str_start dt "START: ", 0
       3452 3454 343A 
       3420 3400 
005C   3446 3449 344E 00197 str_finish dt "FINISH: ", 0
       3449 3453 3448 
       343A 3420 3400 
0065   3452 3455 344E 00198 str_runtime dt "RUNTIME: ", 0
       3454 3449 344D 
       3445 343A 3420 
       3400 
006F   3473 3400      00199 str_s dt "s", 0 ; i.e. second
0071   3454 344F 3454 00200 str_total dt "TOTAL: ", 0
       3441 344C 343A 
       3420 3400 
0079   3450 3441 3453 00201 str_pass dt "PASS: ", 0
       3453 343A 3420 
       3400 
0080   3420 3446 3441 00202 str_fail dt " FAIL: ", 0
       3449 344C 343A 
       3420 3400 
0088   344C 3441 3459 00203 str_layout dt "LAYOUT:", 0
       344F 3455 3454 
       343A 3400 
0090   3420 3454 344F 00204 str_layout1 dt " TOP 1 ", 0
       3450 3420 3431 
       3420 3400 
0098   3420 3432 3420 00205 str_layout2 dt " 2 ", 0
       3400 
009C   3420 3433 3420 00206 str_layout3 dt " 3 ", 0
       3400 
00A0   3420 3442 344F 00207 str_layout4 dt " BOT 4 ", 0
       3454 3420 3434 
       3420 3400 
00A8   3452 3455 344E 00208 str_running dt "RUNNING", 0
       344E 3449 344E 
       3447 3400 
00B0   342E 3400      00209 str_dot dt ".", 0
00B2   3449 344E 3453 00210 str_insp_fin dt "INSPECTION FIN", 0
       3450 3445 3443 
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3454 3449 344F 
       344E 3420 3446 
       3449 344E 3400 
00C1   3445 344D 3445 00211 str_emerstop dt "EMERGENCY STOP", 0
       3452 3447 3445 
       344E 3443 3459 
       3420 3453 3454 
       344F 3450 3400 
00D0   3400           00212 str_null dt 0
                      00213 ; corresponds to the layout byte
00D1   3458 3446 3446 00214 char_layout dt "XFFPXFFP" ;"XF2P4567" ; "XFEPEEEE"
       3450 3458 3446 
       3446 3450 
                      00215 ; corresponds to keypad
00D9   3431 3432 3433 00216 char_keynumber dt "123", 0, "456", 0, "789", 0, 0, "0", 0, 0
       3400 3434 3435 
       3436 3400 3437 
       3438 3439 3400 
       3400 3430 3400 
       3400 
00E9   342F 3400      00217 char_slash dt "/", 0
                      00218 ;????!!!!copy spaceX function
                      00219 
                      00220         code
                      00221 #IFNDEF DEBUG
                      00222 ;*******************************************************************************
                      00223 ; "main": Main Function
                      00224 ; Func: Call initialization and then keep polling the keypad for
                      00225 ; input (or interrupt)
                      00226 ; Input: None
                      00227 ; Output: None
                      00228 ; Affect: *
                      00229 ;*******************************************************************************
                      00230 main
                      00231         call init
                      00232 keypoll
                      00233         btfsc KEYPAD_DA
                      00234         call keyresp
                      00235         call keypad_timeout
                      00236         goto keypoll
                      00237 #ELSE
                      00238 ;*******************************************************************************
                      00239 ; "mac_test": Machenical System Test Function
                      00240 ; Func: Test the machenical system, each botton on keypad
                      00241 ; corresponds to a machine function (i.e. driver)
                      00242 ; Input: None
                      00243 ; Output: None
                      00244 ; Affect: *
                      00245 ;*******************************************************************************
0000                  00246 mac_test
0000   2???           00247         call init_pic
0001   2???           00248         call reset_software
                      00249         ;call reset_hardware
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00250 ; PORT Reset/Initialization
                      00251 ; BANK0
0002   0185           00252         clrf PORTA ; RA4 (Reserved) output 0
0003   0186           00253         clrf PORTB ; RB0, 2, 3 (Reserved) output 0
0004   0187           00254         clrf PORTC ; VMOTOR disable, LED off
0005   0188           00255         clrf PORTD ; clear S0, S1 of SMOTOR
0006   0189           00256         clrf PORTE ; SMOTOR disable, clear S2, S3 of SMOTOR
                      00257         ; LCD Reset/Initialization
0007   2???           00258         call LCD_init
0008   2???           00259         call display
0009                  00260 mac_test_loop
0009   2???           00261         call analogtest2
000A   1886           00262         btfsc KEYPAD_DA
000B   2???           00263         call keyresp_ma
000C   3064           00264         movlw 0x64
000D   2???           00265         call delayX5msm
000E   2???           00266         goto mac_test_loop
000F                  00267 keyresp_ma
000F   0E06           00268         swapf PORTB, w
0010   390F           00269         andlw 0x0F
                      00270         TABLE
  0000                    M         local tablename
0011   00??               M         movwf table_temp
0012   30??               M         movlw HIGH tablename
0013   008A               M         movwf PCLATH
0014   08??               M         movf table_temp, w
0015   3E??               M         addlw LOW tablename
0016   1803               M         btfsc STATUS, C
0017   0A8A               M         incf PCLATH, f
0018   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0019                      M         tablename
                      00271         ;keyresp_switch_table
0019   2???           00272         goto kma0 ; keypressed = 0 "1" = SM forward
001A   2???           00273         goto kma1 ; keypressed = 1 "2" = SM backward
001B   2???           00274         goto kma2 ; keypressed = 2 "3" = SM step
001C   2???           00275         goto kma3 ; keypressed = 3 "A"
001D   2???           00276         goto kma4 ; keypressed = 4 "4" = DC up
001E   2???           00277         goto kma5 ; keypressed = 5 "5" = DC down
001F   2???           00278         goto kma6 ; keypressed = 6 "6" = DC stop
0020   2???           00279         goto kma7 ; keypressed = 7 "B"
0021   2???           00280         goto kma8 ; keypressed = 8 "7" = IRLED on
0022   2???           00281         goto kma9 ; keypressed = 9 "8" = IRLED off
0023   2???           00282         goto kmaA ; keypressed = A "9"
0024   2???           00283         goto kmaB ; keypressed = B "C"
0025   2???           00284         goto kmaC ; keypressed = C "*"
0026   2???           00285         goto kmaD ; keypressed = D "0"
0027   2???           00286         goto kmaE ; keypressed = E "#"
0028   2???           00287         goto kmaF ; keypressed = F "D"
0029                  00288 kma_next
0029                  00289 kma3
0029                  00290 kma7
0029                  00291 kmaA
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0029                  00292 kmaB
0029                  00293 kmaC
0029                  00294 kmaD
0029                  00295 kmaE
0029                  00296 kmaF
0029                  00297 kma_release
0029   1886           00298         btfsc KEYPAD_DA ;Wait until key is released
002A   2???           00299         goto kma_release
002B   0008           00300         return
002C                  00301 kma0
002C   3000           00302         movlw 0x00
002D   00E7           00303         movwf smotor_dir
002E   2???           00304         call advancerow
002F   2???           00305         goto kma_next
0030                  00306 kma1
0030   3001           00307         movlw 0x01
0031   00E7           00308         movwf smotor_dir
0032   2???           00309         call advancerow
0033   2???           00310         goto kma_next
0034                  00311 kma2
0034   1109           00312         bcf SMOTOR_EN
0035   2???           00313         goto kma_next
0036                  00314 kma4
0036   2???           00315         call moveup
0037   2???           00316         goto kma_next
0038                  00317 kma5
0038   2???           00318         call movedown
0039   2???           00319         goto kma_next
003A                  00320 kma6
003A   1007           00321         bcf VMOTOR_C0
003B   1087           00322         bcf VMOTOR_C1
003C   2???           00323         goto kma_next
003D                  00324 kma8
                      00325         IRLED_ON
003D   3001               M         movlw 0x01
003E   2???               M         call ledcontrol
003F   2???           00326         goto kma_next
0040                  00327 kma9
                      00328         IRLED_OFF
0040   3000               M         movlw 0x00
0041   2???               M         call ledcontrol
0042   2???           00329         goto kma_next
                      00330 ;*******************************************************************************
                      00331 ; "analogtest2": Analog-to-Digital Test Function
                      00332 ; Func: Convert RA0 to digital and display its value every second
                      00333 ; Input:
                      00334 ; Output:
                      00335 ; Affect:
                      00336 ;*******************************************************************************
0043                  00337 analogtest2
                      00338         STORE_LIGHT light_bg
0043   30B0               M         movlw light_bg
0044   2???               M         call lightsensor
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00339         MOVLF temp5, COLS ; counter
0045   3005               M         movlw COLS
0046   00B8               M         movwf temp5
                      00340         MOVLF temp2, LCDline ; LCDline addr
0047   3023               M         movlw LCDline
0048   00B5               M         movwf temp2
                      00341         MOVLF temp3, light_bg ; storage addr
0049   30B0               M         movlw light_bg
004A   00B6               M         movwf temp3
                      00342 
                      00343         MOVFF FSR, temp3
004B   0836               M         movf temp3, w
004C   0084               M         movwf FSR
                      00344         MOVFF temp4, INDF ; temp storage
004D   0800               M         movf INDF, w
004E   00B7               M         movwf temp4
                      00345         MOVFF FSR, temp2
004F   0835               M         movf temp2, w
0050   0084               M         movwf FSR
                      00346         COPY_DEC3 temp4
0051   0837               M         movf temp4,     w
0052   00BB               M         movwf arg
0053   3003               M         movlw 0x03
0054   00BC               M         movwf arg2
0055   2???               M         call copydec
                      00347         COPY_STRING str_dot
0056   30??               M         movlw str_dot
0057   2???               M         call copystring
                      00348         COPY_STRING str_dot
0058   30??               M         movlw str_dot
0059   2???               M         call copystring
                      00349         COPY_STRING str_dot
005A   30??               M         movlw str_dot
005B   2???               M         call copystring
                      00350         MOVFF temp2, FSR
005C   0804               M         movf FSR,  w
005D   00B5               M         movwf temp2
005E   0AB6           00351         incf temp3, f
005F   0AB6           00352         incf temp3, f
                      00353         MOVFF FSR, temp3
0060   0836               M         movf temp3, w
0061   0084               M         movwf FSR
                      00354         MOVFF temp4, INDF ; temp storage
0062   0800               M         movf INDF, w
0063   00B7               M         movwf temp4
                      00355         MOVFF FSR, temp2
0064   0835               M         movf temp2, w
0065   0084               M         movwf FSR
                      00356         COPY_DEC3 temp4
0066   0837               M         movf temp4,     w
0067   00BB               M         movwf arg
0068   3003               M         movlw 0x03
0069   00BC               M         movwf arg2
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

006A   2???               M         call copydec
                      00357         COPY_STRING str_dot
006B   30??               M         movlw str_dot
006C   2???               M         call copystring
                      00358         COPY_STRING str_dot
006D   30??               M         movlw str_dot
006E   2???               M         call copystring
                      00359         COPY_STRING str_dot
006F   30??               M         movlw str_dot
0070   2???               M         call copystring
                      00360         MOVFF temp2, FSR
0071   0804               M         movf FSR,  w
0072   00B5               M         movwf temp2
0073   0AB6           00361         incf temp3, f
0074   0AB6           00362         incf temp3, f
                      00363         MOVFF FSR, temp3
0075   0836               M         movf temp3, w
0076   0084               M         movwf FSR
                      00364         MOVFF temp4, INDF ; temp storage
0077   0800               M         movf INDF, w
0078   00B7               M         movwf temp4
                      00365         MOVFF FSR, temp2
0079   0835               M         movf temp2, w
007A   0084               M         movwf FSR
                      00366         COPY_DEC3 temp4
007B   0837               M         movf temp4,     w
007C   00BB               M         movwf arg
007D   3003               M         movlw 0x03
007E   00BC               M         movwf arg2
007F   2???               M         call copydec
                      00367         COPY_STRING str_dot
0080   30??               M         movlw str_dot
0081   2???               M         call copystring
                      00368         COPY_STRING str_dot
0082   30??               M         movlw str_dot
0083   2???               M         call copystring
                      00369         COPY_STRING str_dot
0084   30??               M         movlw str_dot
0085   2???               M         call copystring
                      00370         MOVFF temp2, FSR
0086   0804               M         movf FSR,  w
0087   00B5               M         movwf temp2
0088   2???           00371         call LCD_clear ; clear LCD display
0089   2???           00372         call writeline
008A   2???           00373         call LCD_line2
                      00374         MOVLF temp2, LCDline ; LCDline addr
008B   3023               M         movlw LCDline
008C   00B5               M         movwf temp2
                      00375         MOVLF temp3, light_bg ; storage addr
008D   30B0               M         movlw light_bg
008E   00B6               M         movwf temp3
008F   0AB6           00376         incf temp3, f
                      00377         MOVFF FSR, temp3
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0090   0836               M         movf temp3, w
0091   0084               M         movwf FSR
                      00378         MOVFF temp4, INDF ; temp storage
0092   0800               M         movf INDF, w
0093   00B7               M         movwf temp4
                      00379         MOVFF FSR, temp2
0094   0835               M         movf temp2, w
0095   0084               M         movwf FSR
                      00380         COPY_STRING str_dot
0096   30??               M         movlw str_dot
0097   2???               M         call copystring
                      00381         COPY_STRING str_dot
0098   30??               M         movlw str_dot
0099   2???               M         call copystring
                      00382         COPY_STRING str_dot
009A   30??               M         movlw str_dot
009B   2???               M         call copystring
                      00383         COPY_DEC3 temp4
009C   0837               M         movf temp4,     w
009D   00BB               M         movwf arg
009E   3003               M         movlw 0x03
009F   00BC               M         movwf arg2
00A0   2???               M         call copydec
                      00384         COPY_STRING str_dot
00A1   30??               M         movlw str_dot
00A2   2???               M         call copystring
                      00385         COPY_STRING str_dot
00A3   30??               M         movlw str_dot
00A4   2???               M         call copystring
                      00386         COPY_STRING str_dot
00A5   30??               M         movlw str_dot
00A6   2???               M         call copystring
                      00387         MOVFF temp2, FSR
00A7   0804               M         movf FSR,  w
00A8   00B5               M         movwf temp2
00A9   0AB6           00388         incf temp3, f
00AA   0AB6           00389         incf temp3, f
                      00390         MOVFF FSR, temp3
00AB   0836               M         movf temp3, w
00AC   0084               M         movwf FSR
                      00391         MOVFF temp4, INDF ; temp storage
00AD   0800               M         movf INDF, w
00AE   00B7               M         movwf temp4
                      00392         MOVFF FSR, temp2
00AF   0835               M         movf temp2, w
00B0   0084               M         movwf FSR
                      00393         COPY_DEC3 temp4
00B1   0837               M         movf temp4,     w
00B2   00BB               M         movwf arg
00B3   3003               M         movlw 0x03
00B4   00BC               M         movwf arg2
00B5   2???               M         call copydec
                      00394         MOVFF temp2, FSR
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B6   0804               M         movf FSR,  w
00B7   00B5               M         movwf temp2
00B8   2???           00395         call writeline
00B9   2???           00396         call LCD_out
                      00397 ;ADCtest2_loop2
                      00398 ; MOVFF FSR, temp3
                      00399 ; MOVFF temp4, INDF ; temp storage
                      00400 ; MOVFF FSR, temp2
                      00401 ; COPY_DEC3 temp4
                      00402 ;; COPY_STRING str_dot
                      00403 ; MOVFF temp2, FSR
                      00404 ; incf temp3, f
                      00405 ; decfsz temp5,f
                      00406 ; goto ADCtest2_loop2
                      00407 ;
                      00408 ; call LCD_clear ; clear LCD display
                      00409 ; call writeline
00BA   0008           00410         return
                      00411 
                      00412 ;*******************************************************************************
                      00413 ; "analogtest": Analog-to-Digital Test Function
                      00414 ; Func: Convert RA0 to digital and display its value every second
                      00415 ; Input:
                      00416 ; Output:
                      00417 ; Affect:
                      00418 ;*******************************************************************************
00BB                  00419 analogtest
Warning[207]: Found label after column 1. (ADCtest_loop)
00BB                  00420         ADCtest_loop
00BB   2???           00421         call delay50us ; require 2Tosc + Tacq = 28us
00BC   151F           00422         bsf ADCON0, GO
00BD                  00423 analog_poll ; about 40us
00BD   191F           00424         btfsc ADCON0, GO
00BE   2???           00425         goto analog_poll
00BF   081E           00426         movf ADRESH, w
                      00427         MOVLF FSR, LCDline
00C0   3023               M         movlw LCDline
00C1   0084               M         movwf FSR
                      00428         COPY_DEC1 ADRESH
00C2   081E               M         movf ADRESH,    w
00C3   00BB               M         movwf arg
00C4   3001               M         movlw 0x01
00C5   00BC               M         movwf arg2
00C6   2???               M         call copydec
00C7   2???           00429         call LCD_clear ; clear LCD display
00C8   2???           00430         call writeline
                      00431         ; delay 0.5s
00C9   3064           00432         movlw 0x64
00CA   00B4           00433         movwf temp
00CB                  00434 ADCtest_simpledelay
00CB   2???           00435         call delay5ms
00CC   0BB4           00436         decfsz temp, f
00CD   2???           00437         goto ADCtest_simpledelay
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CE   2???           00438         goto ADCtest_loop
                      00439 #ENDIF
                      00440 
                      00441 #IFNDEF DEBUG
                      00442 ;*******************************************************************************
                      00443 ; "interrupt": Interrupt Handle Function
                      00444 ; Func: Handle all interrupt that occurs in runtime
                      00445 ; Input: INTCON
                      00446 ; Output: INTCON, rt_*, newsec
                      00447 ; Affect: None (w_temp, status_temp)
                      00448 ;*******************************************************************************
                      00449 interrupt
                      00450         movwf w_temp ; save W
                      00451         swapf STATUS, w ; save STATUS, note swapf will not affect STATUS
                      00452         BANK00
                      00453         movwf status_temp
                      00454         ; movf PCLATH, w ; save page information
                      00455         ; movwf pclath_temp
                      00456         ; clrf PCLATH
                      00457         movf FSR, w ; save FSR
                      00458         movwf FSR_temp
                      00459 
                      00460         ; Timer0 Interrupt Handle
                      00461         ; T0IE always on, no test
                      00462         btfss INTCON, T0IF
                      00463         goto int_tmr0_skip
                      00464         incf rt_counter, f
                      00465         movf rt_counter, w ; test with 98h, correponds to 996,147.2us
                      00466         sublw 0x98
                      00467         btfss STATUS, Z
                      00468         goto int_tmr0_end ; rt_counter <> 98h
                      00469         clrf rt_counter ; rt_counter == 98h
                      00470         movlw rt_sec
                      00471         call addsec
                      00472         movlw rt_day
                      00473         btfsc STATUS, C
                      00474         call addday ; addday if carry from addsec
                      00475         MOVLF newsec, TRUE
                      00476 int_tmr0_end
                      00477         bcf INTCON, T0IF
                      00478 int_tmr0_skip
                      00479         ; Keypad (PORTB) Change Interrupt
                      00480         btfss INTCON, RBIE ; interrept must be enabled first
                      00481         goto int_rb_skip
                      00482         btfss INTCON, RBIF
                      00483         goto int_rb_skip
                      00484         swapf PORTB, w ; test PORTB<7:4> against stop button
                      00485         andlw 0x0F
                      00486         sublw STOP_BUT
                      00487         btfss STATUS, Z
                      00488         goto int_rb_end
                      00489         ; Emergency Stop!!!!
                      00490         bcf IRLED ; turn off IRLEDs
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00491         bcf VMOTOR_C0 ; turn off v motor
                      00492         bcf VMOTOR_C1
                      00493         bcf SMOTOR_EN ; turn off s motor
                      00494         MOVLF FSR, LCDline ; display emergency stop
                      00495         COPY_STRING str_emerstop
                      00496         call LCD_clear ; clear LCD display
                      00497         call writeline
                      00498         call LCD_out
                      00499         stop goto stop ; hang the program
                      00500 int_rb_end
                      00501         bcf INTCON, RBIF
                      00502 int_rb_skip
                      00503         movf FSR_temp, w ; restore FSR
                      00504         movwf FSR
                      00505         ; movf pclath_temp, w ; restore page information
                      00506         ; movwf PCLATH
                      00507         swapf status_temp, w ; restore STATUS
                      00508         movwf STATUS
                      00509         swapf w_temp, f ; restore W, not affecting STATUS
                      00510         swapf w_temp, w
                      00511 retfie
                      00512 
                      00513 ;*******************************************************************************
                      00514 ; "init": Initialization Function
                      00515 ; Func: Initialize chip settings, variables and reset hardware
                      00516 ; position
                      00517 ; Input: None
                      00518 ; Output: *
                      00519 ; Affect: W, STATUS, temp, delaytemp, delaycount, delaytemp2,
                      00520 ; delaycount2, delaytemp3, delaycount3
                      00521 ;*******************************************************************************
                      00522 init
                      00523         call init_pic
                      00524         call reset_software
                      00525         call reset_hardware
                      00526         call reset_realtime
                      00527         clrf TMR0 ; start timing
                      00528         bsf INTCON, T0IE
                      00529         bsf INTCON, GIE
                      00530         movlw PHASE_REALTIME
                      00531         movwf phase
                      00532         call display
                      00533         return
                      00534 #ENDIF
                      00535 
                      00536 ;*******************************************************************************
                      00537 ; "init_pic": PIC Initialization Function
                      00538 ; Func: Initialize chip settings: Interrupt, TMR0, PORT, ADC
                      00539 ; Input: None
                      00540 ; Output: INTCON, TRISA, TRISB, TRISC, TRISD, TRISE, ADCCON0, ADCCON1
                      00541 ; Affect: W, STATUS
                      00542 ;*******************************************************************************
00CF                  00543 init_pic
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00544 ; Interrupt Initialization
                      00545 ; Disable Global interrupt, diable peripheral interrupt, enable timer0 and
                      00546 ; PORTB interrupton change (keypad), diable RB0 interrupt
                      00547 ; #define INITVAL_INTCON B'00101000'
                      00548 ; movlw INITVAL_INTCON
Warning[203]: Found opcode in column 1. (clrf)
00CF   018B           00549 clrf INTCON
                      00550 ;
                      00551 ;clrf SSPBUF
                      00552 ;BANK1
                      00553 ;clrf TXSTA
                      00554 ;clrf PIE1
                      00555 ;clrf PIE2
                      00556 ; Timer0 Initialization
                      00557         BANK0
00D0   1283               M         bcf STATUS, RP0
00D1   0181           00558         clrf TMR0
00D2   01??           00559         clrf rt_counter
                      00560         BANK1
00D3   1683               M         bsf STATUS, RP0
00D4   3085           00561         movlw INITVAL_OPTREG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D5   0081           00562         movwf OPTION_REG
                      00563         ; PORT Initialzation
                      00564         ; BANK1
00D6   302F           00565         movlw INITVAL_TRISA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D7   0085           00566         movwf TRISA
00D8   30F2           00567         movlw INITVAL_TRISB
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D9   0086           00568         movwf TRISB
00DA   30A0           00569         movlw INITVAL_TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00DB   0087           00570         movwf TRISC
00DC   3000           00571         movlw INITVAL_TRISD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00DD   0088           00572         movwf TRISD
00DE   3000           00573         movlw INITVAL_TRISE
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00DF   0089           00574         movwf TRISE
                      00575 
                      00576         ; Analog to Digital Convertor Initialization
                      00577         ; BANK1
00E0   3002           00578         movlw INITVAL_ADCON1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00E1   009F           00579         movwf ADCON1
                      00580         BANK0
00E2   1283               M         bcf STATUS, RP0
00E3   3081           00581         movlw INITVAL_ADCON0
00E4   009F           00582         movwf ADCON0
00E5   0008           00583         return
                      00584 
                      00585 ;*******************************************************************************
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00586 ;"reset_software": Software Reset/Initialization Function
                      00587 ; Func: Reset all variables
                      00588 ; Input: None
                      00589 ; Output: phase, report_num, line_num, log_total, log_next, smotor_dir
                      00590 ; Affect: STATUS
                      00591 ;*******************************************************************************
00E6                  00592 reset_software
00E6   3000           00593         movlw PHASE_HDINIT
00E7   00A0           00594         movwf phase
00E8   01A1           00595         clrf report_num
00E9   01A2           00596         clrf line_num
00EA   01E8           00597         clrf log_total
00EB   01E9           00598         clrf log_next
                      00599         MOVLF smotor_dir, 1
00EC   3001               M         movlw 1
00ED   00E7               M         movwf smotor_dir
00EE   0008           00600         return
                      00601 
                      00602 ;*******************************************************************************
                      00603 ;"reset_hardware": Hardware Reset/Initialization Function
                      00604 ; Func: Reset/Initialize hardwares to their default position:
                      00605 ; Pos Sensor Off, V DC Motor at top, S Motor at "Row 1",
                      00606 ; LCD, (RTC)
                      00607 ; Input: None
                      00608 ; Output: PORTA, PORTB, PORTC, PORTD, PORTE
                      00609 ; Affect: W, STATUS, temp, delaytemp, delaycount, delaytemp2,
                      00610 ; delaycount2, delaytemp3, delaycount3
                      00611 ;*******************************************************************************
00EF                  00612 reset_hardware
                      00613         ; PORT Reset/Initialization
                      00614         ; BANK0
00EF   0185           00615         clrf PORTA ; RA4 (Reserved) output 0
00F0   0186           00616         clrf PORTB ; RB0, 2, 3 (Reserved) output 0
00F1   0187           00617         clrf PORTC ; VMOTOR disable, LED off
00F2   0188           00618         clrf PORTD ; clear S0, S1 of SMOTOR
00F3   0189           00619         clrf PORTE ; SMOTOR disable, clear S2, S3 of SMOTOR
                      00620         ; LCD Reset/Initialization
00F4   2???           00621         call LCD_init
00F5   2???           00622         call display
                      00623         ; Position Sensor(IRLED) Reset/Initialization: all off
                      00624         ; Already done with PORT reset
                      00625         ; Vertical DC Motor Reset/Initialization: move to top
00F6   2???           00626         call moveup
                      00627         ; Stepper Motor Reset/Initialization: move to "Row 4"
00F7   01E7           00628         clrf smotor_dir
00F8   2???           00629         call advancerow ; 4 advance row to ensure to init pos
00F9   2???           00630         call advancerow
00FA   2???           00631         call advancerow
00FB   2???           00632         call advancerow
                      00633         MOVLF smotor_dir, 1
00FC   3001               M         movlw 1
00FD   00E7               M         movwf smotor_dir
00FE   0008           00634         return
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00635 
                      00636 ;*******************************************************************************
                      00637 ;"reset_realtime": Real Time Clock Reset/Initialization Function
                      00638 ; Func: Reset Real Time Clock
                      00639 ; Input: None (from Keypad)
                      00640 ; Output: rt_year, rt_month, rt_day, rt_hour, rt_min, rt_sec
                      00641 ; Affect:
                      00642 ;*******************************************************************************
Warning[207]: Found label after column 1. (reset_realtime)
00FF                  00643         reset_realtime
00FF   3001           00644         movlw PHASE_RTCINIT
0100   00A0           00645         movwf phase
0101   01C0           00646         clrf rt_year
0102   01C1           00647         clrf rt_month
0103   01C2           00648         clrf rt_day
0104   01C3           00649         clrf rt_hour
0105   01C4           00650         clrf rt_min
0106   01C5           00651         clrf rt_sec
                      00652         ; YYMMDD
0107   2???           00653         call LCD_clear ; clear LCD display
                      00654         MOVLF FSR, LCDline
0108   3023               M         movlw LCDline
0109   0084               M         movwf FSR
                      00655         COPY_STRING str_enterymd
010A   30??               M         movlw str_enterymd
010B   2???               M         call copystring
010C   2???           00656         call writeline
010D   2???           00657         call LCD_line2
                      00658         MOVLF FSR, LCDline
010E   3023               M         movlw LCDline
010F   0084               M         movwf FSR
                      00659         COPY_STRING str_yearhead
0110   30??               M         movlw str_yearhead
0111   2???               M         call copystring
0112   2???           00660         call writeline
0113   01B6           00661         clrf temp3 ; number of valid numbers entered
0114                  00662 reset_rt_ymd
0114   1C86           00663         btfss KEYPAD_DA ; Wait until data is available from the keypad
0115   2???           00664         goto reset_rt_ymd
0116   0E06           00665         swapf PORTB, W ; Read PortB<7:4> into W<3:0>
0117   390F           00666         andlw 0x0F
0118   3E??           00667         addlw char_keynumber
0119   2???           00668         call literal ; Convert keypad value to LCD character (value is still held in W)
011A   3E00           00669         addlw 0x00
011B   1903           00670         btfsc STATUS, Z ; test for valid input (number)
011C   2???           00671         goto reset_rt_ymdrl
011D   00B5           00672         movwf temp2 ; hold the value
011E   2???           00673         call LCD_wt ; Write the value in W to LCD
011F   3030           00674         movlw 0x30
0120   02B5           00675         subwf temp2, f ; convert ASCII to number
0121   0836           00676         movf temp3, w
                      00677         TABLE ; switch (temp)
  0000                    M         local tablename
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0122   00??               M         movwf table_temp
0123   30??               M         movlw HIGH tablename
0124   008A               M         movwf PCLATH
0125   08??               M         movf table_temp, w
0126   3E??               M         addlw LOW tablename
0127   1803               M         btfsc STATUS, C
0128   0A8A               M         incf PCLATH, f
0129   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
012A                      M         tablename
012A   2???           00678         goto reset_rt_ymd0
012B   2???           00679         goto reset_rt_ymd1
012C   2???           00680         goto reset_rt_ymd2
012D   2???           00681         goto reset_rt_ymd3
012E   2???           00682         goto reset_rt_ymd4
012F   2???           00683         goto reset_rt_ymd5
0130                  00684 reset_rt_ymd0
0130   0835           00685         movf temp2, w
                      00686         MULLW .10
0131   00EA               M         movwf arith_temp
0132   300A               M         movlw .10
0133   2???               M         call mulfn
0134   07C0           00687         addwf rt_year, f
0135   0AB6           00688         incf temp3, f
0136   2???           00689         goto reset_rt_ymdrl
0137                  00690 reset_rt_ymd1
0137   0835           00691         movf temp2, w
0138   07C0           00692         addwf rt_year, f
0139   0AB6           00693         incf temp3, f
013A   2???           00694         goto reset_rt_ymdrl
013B                  00695 reset_rt_ymd2
013B   0835           00696         movf temp2, w
                      00697         MULLW .10
013C   00EA               M         movwf arith_temp
013D   300A               M         movlw .10
013E   2???               M         call mulfn
013F   07C1           00698         addwf rt_month, f
0140   0AB6           00699         incf temp3, f
0141   2???           00700         goto reset_rt_ymdrl
0142                  00701 reset_rt_ymd3
0142   0835           00702         movf temp2, w
0143   07C1           00703         addwf rt_month, f
0144   0AB6           00704         incf temp3, f
0145   2???           00705         goto reset_rt_ymdrl
0146                  00706 reset_rt_ymd4
0146   0835           00707         movf temp2, w
                      00708         MULLW .10
0147   00EA               M         movwf arith_temp
0148   300A               M         movlw .10
0149   2???               M         call mulfn
014A   07C2           00709         addwf rt_day, f
014B   0AB6           00710         incf temp3, f
014C   2???           00711         goto reset_rt_ymdrl
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

014D                  00712 reset_rt_ymd5
014D   0835           00713         movf temp2, w
014E   07C2           00714         addwf rt_day, f
014F   0AB6           00715         incf temp3, f
0150                  00716 reset_rt_ymdrl
0150   1886           00717         btfsc KEYPAD_DA ; Wait until key is released
0151   2???           00718         goto reset_rt_ymdrl
0152   3006           00719         movlw 0x06 ; 6 chars entered
0153   0236           00720         subwf temp3, w
0154   1C03           00721         btfss STATUS, C
0155   2???           00722         goto reset_rt_ymd
                      00723         ; hhmmss
0156   2???           00724         call LCD_clear ; clear LCD display
                      00725         MOVLF FSR, LCDline
0157   3023               M         movlw LCDline
0158   0084               M         movwf FSR
                      00726         COPY_STRING str_enterhms
0159   30??               M         movlw str_enterhms
015A   2???               M         call copystring
015B   2???           00727         call writeline
015C   2???           00728         call LCD_line2
015D   01B6           00729         clrf temp3 ; number of valid numbers entered
015E                  00730 reset_rt_hms
015E   1C86           00731         btfss KEYPAD_DA ; Wait until data is available from the keypad
015F   2???           00732         goto reset_rt_hms
0160   0E06           00733         swapf PORTB, W ; Read PortB<7:4> into W<3:0>
0161   390F           00734         andlw 0x0F
0162   3E??           00735         addlw char_keynumber
0163   2???           00736         call literal ; Convert keypad value to LCD character (value is still held in W)
0164   3E00           00737         addlw 0x00
0165   1903           00738         btfsc STATUS, Z ; test for valid input (number)
0166   2???           00739         goto reset_rt_hmsrl
0167   00B5           00740         movwf temp2 ; hold the value
0168   2???           00741         call LCD_wt ; Write the value in W to LCD
0169   3030           00742         movlw 0x30
016A   02B5           00743         subwf temp2, f ; convert ASCII to number
016B   0836           00744         movf temp3, w
                      00745         TABLE ; switch (temp)
  0000                    M         local tablename
016C   00??               M         movwf table_temp
016D   30??               M         movlw HIGH tablename
016E   008A               M         movwf PCLATH
016F   08??               M         movf table_temp, w
0170   3E??               M         addlw LOW tablename
0171   1803               M         btfsc STATUS, C
0172   0A8A               M         incf PCLATH, f
0173   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0174                      M         tablename
0174   2???           00746         goto reset_rt_hms0
0175   2???           00747         goto reset_rt_hms1
0176   2???           00748         goto reset_rt_hms2
0177   2???           00749         goto reset_rt_hms3
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0178   2???           00750         goto reset_rt_hms4
0179   2???           00751         goto reset_rt_hms5
017A                  00752 reset_rt_hms0
017A   0835           00753         movf temp2, w
                      00754         MULLW .10
017B   00EA               M         movwf arith_temp
017C   300A               M         movlw .10
017D   2???               M         call mulfn
017E   07C3           00755         addwf rt_hour, f
017F   0AB6           00756         incf temp3, f
0180   2???           00757         goto reset_rt_hmsrl
0181                  00758 reset_rt_hms1
0181   0835           00759         movf temp2, w
0182   07C3           00760         addwf rt_hour, f
0183   0AB6           00761         incf temp3, f
0184   2???           00762         goto reset_rt_hmsrl
0185                  00763 reset_rt_hms2
0185   0835           00764         movf temp2, w
                      00765         MULLW .10
0186   00EA               M         movwf arith_temp
0187   300A               M         movlw .10
0188   2???               M         call mulfn
0189   07C4           00766         addwf rt_min, f
018A   0AB6           00767         incf temp3, f
018B   2???           00768         goto reset_rt_hmsrl
018C                  00769 reset_rt_hms3
018C   0835           00770         movf temp2, w
018D   07C4           00771         addwf rt_min, f
018E   0AB6           00772         incf temp3, f
018F   2???           00773         goto reset_rt_hmsrl
0190                  00774 reset_rt_hms4
0190   0835           00775         movf temp2, w
                      00776         MULLW .10
0191   00EA               M         movwf arith_temp
0192   300A               M         movlw .10
0193   2???               M         call mulfn
0194   07C5           00777         addwf rt_sec, f
0195   0AB6           00778         incf temp3, f
0196   2???           00779         goto reset_rt_hmsrl
Warning[207]: Found label after column 1. (reset_rt_hms5)
0197                  00780         reset_rt_hms5
0197   0835           00781         movf temp2, w
0198   07C5           00782         addwf rt_sec, f
0199   0AB6           00783         incf temp3, f
Warning[207]: Found label after column 1. (reset_rt_hmsrl)
019A                  00784         reset_rt_hmsrl
019A   1886           00785         btfsc KEYPAD_DA ; Wait until key is released
019B   2???           00786         goto reset_rt_hmsrl
019C   3006           00787         movlw 0x06 ; 6 chars entered
019D   0236           00788         subwf temp3, w
019E   1C03           00789         btfss STATUS, C
019F   2???           00790         goto reset_rt_hms
01A0   0008           00791         return
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00792 
                      00793 ;*******************************************************************************
                      00794 ; "keyresp": Key Response Function
                      00795 ; Func: Display information or run an inspection according to the
                      00796 ; pressed key
                      00797 ; Input: W: Index of the key that being pressed
                      00798 ; Output: All actions
                      00799 ; Affect:
                      00800 ;*******************************************************************************
01A1                  00801 keyresp
01A1   0E06           00802         swapf PORTB, w
01A2   390F           00803         andlw 0x0F
                      00804         TABLE
  0000                    M         local tablename
01A3   00??               M         movwf table_temp
01A4   30??               M         movlw HIGH tablename
01A5   008A               M         movwf PCLATH
01A6   08??               M         movf table_temp, w
01A7   3E??               M         addlw LOW tablename
01A8   1803               M         btfsc STATUS, C
01A9   0A8A               M         incf PCLATH, f
01AA   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
01AB                      M         tablename
                      00805 ;keyresp_switch_table
01AB   2???           00806         goto realtime ; keypressed = 0 "1" = "real time"
01AC   2???           00807         goto report ; keypressed = 1 "2" = "report"
01AD   2???           00808         goto unused_key ; keypressed = 2 "3"
01AE   2???           00809         goto unused_key ; keypressed = 3 "A"
01AF   2???           00810         goto unused_key ; keypressed = 4 "4"
01B0   2???           00811         goto unused_key ; keypressed = 5 "5"
01B1   2???           00812         goto unused_key ; keypressed = 6 "6"
01B2   2???           00813         goto unused_key ; keypressed = 7 "B"
01B3   2???           00814         goto scroll_up ; keypressed = 8 "7" = "scroll up"
01B4   2???           00815         goto report_last ; keypressed = 9 "8" = "report last"
01B5   2???           00816         goto unused_key ; keypressed = A "9"
01B6   2???           00817         goto stoprun ; keypressed = B "C" = "stop"
01B7   2???           00818         goto scroll_down ; keypressed = C "*" = "scroll down"
01B8   2???           00819         goto report_next ; keypressed = D "0" = "scroll up"
01B9   2???           00820         goto unused_key ; keypressed = E "#"
01BA   2???           00821         goto startrun ; keypressed = F "D" = "run"
01BB                  00822 unused_key
01BB                  00823 keyresp_next
01BB                  00824 wait_release
01BB   1886           00825         btfsc KEYPAD_DA ; Wait until key is released????
01BC   2???           00826         goto wait_release ; !!!!!!!!!!time
01BD   2???           00827         call display
                      00828         ; reset timeout!!!!!!!!!!
01BE   0008           00829         return
                      00830 
01BF                  00831 realtime
01BF   3002           00832         movlw PHASE_REALTIME
01C0   00A0           00833         movwf phase
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01C1   01A2           00834         clrf line_num
01C2   2???           00835         goto keyresp_next
01C3                  00836 report
01C3   3004           00837         movlw PHASE_REPORT ; assuem log_total <> 0
01C4   08E8           00838         movf log_total, f
01C5   1903           00839         btfsc STATUS, Z
01C6   3003           00840         movlw PHASE_NOREPORT ; log_total == 0, no report
01C7   00A0           00841         movwf phase
01C8   01A2           00842         clrf line_num
01C9   2???           00843         goto keyresp_next
01CA                  00844 report_last
                      00845 ; !!!! some ideas: must in REPORT phase; no change in line_num if at last report;
                      00846 ; do not go through report; if enter from other phase same fn to report;
                      00847 ; display report# and can go across upper/lower limit
01CA   08E8           00848         movf log_total, f
01CB   1903           00849         btfsc STATUS, Z
01CC   2???           00850         goto report ; log_total == 0, no report!!!!
                      00851         ; lower bound = (log_next - log_total + MAXLOG) MOD MAXLOG
01CD   0868           00852         movf log_total, w ; get lower bound
01CE   0269           00853         subwf log_next, w
01CF   3E0C           00854         addlw MAXLOG
                      00855         MODLW MAXLOG
01D0   00EA               M         movwf arith_temp
01D1   300C               M         movlw MAXLOG
01D2   2???               M         call divfn
01D3   086A               M         movf arith_temp, w
01D4   0221           00856         subwf report_num, w
01D5   1903           00857         btfsc STATUS, Z
01D6   2???           00858         goto report ; current report at lower bound!!!!"This is the last report"!!!!
01D7   0321           00859         decf report_num, w ; get last report
01D8   3E0C           00860         addlw MAXLOG ; make sure report_num between 0 and MAXLOG - 1
                      00861         MODLW MAXLOG
01D9   00EA               M         movwf arith_temp
01DA   300C               M         movlw MAXLOG
01DB   2???               M         call divfn
01DC   086A               M         movf arith_temp, w
01DD   00A1           00862         movwf report_num
01DE   2???           00863         call readlog
01DF   2???           00864         goto report
01E0                  00865 report_next
01E0   08E8           00866         movf log_total, f
01E1   1903           00867         btfsc STATUS, Z
01E2   2???           00868         goto report ; log_total == 0, no report!!!!
                      00869         ; upper bound = (log_next - 1 + MAXLOG) MOD MAXLOG
01E3   0369           00870         decf log_next, w ; get upper bound
01E4   3E0C           00871         addlw MAXLOG
                      00872         MODLW MAXLOG
01E5   00EA               M         movwf arith_temp
01E6   300C               M         movlw MAXLOG
01E7   2???               M         call divfn
01E8   086A               M         movf arith_temp, w
01E9   0221           00873         subwf report_num, w
01EA   1903           00874         btfsc STATUS, Z
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01EB   2???           00875         goto report ; current report at upper bound!!!!
01EC   0A21           00876         incf report_num, w ; get next report
                      00877         MODLW MAXLOG ; make sure report_num between 0 and MAXLOG - 1
01ED   00EA               M         movwf arith_temp
01EE   300C               M         movlw MAXLOG
01EF   2???               M         call divfn
01F0   086A               M         movf arith_temp, w
01F1   00A1           00878         movwf report_num
01F2   2???           00879         call readlog
01F3   2???           00880         goto report
01F4                  00881 scroll_up
01F4   3004           00882         movlw PHASE_REPORT ; test phase == PHASE_REPORT
01F5   0220           00883         subwf phase, w
01F6   1D03           00884         btfss STATUS, Z
01F7   2???           00885         goto keyresp_next ; phase <> PHASE_REPORT, do nothing
01F8   08A2           00886         movf line_num, f ; phase == PHASE_REPORT, test line_num == 0
01F9   1D03           00887         btfss STATUS, Z
01FA   03A2           00888         decf line_num, f ; line_num <> 0, decrease line_num (scroll up)
01FB   2???           00889         goto keyresp_next
01FC                  00890 scroll_down
01FC   3004           00891         movlw PHASE_REPORT ; test phase == PHASE_REPORT
01FD   0220           00892         subwf phase, w
01FE   1D03           00893         btfss STATUS, Z
01FF   2???           00894         goto keyresp_next ; phase <> PHASE_REPORT, do nothing
0200   3009           00895         movlw MAXLINE ; phase == PHASE_REPORT, test line_num == MAXLINE????
0201   0222           00896         subwf line_num, w
0202   1D03           00897         btfss STATUS, Z
0203   0AA2           00898         incf line_num, f ; line_num <> MAXLINE, increase line_num (scroll down)
0204   2???           00899         goto keyresp_next
0205                  00900 startrun
0205   3005           00901         movlw PHASE_RUN
0206   00A0           00902         movwf phase
0207   01A2           00903         clrf line_num
                      00904         ;!!!! call display
0208   2???           00905         call LCD_clear ; clear LCD display
                      00906         MOVLF FSR, LCDline
0209   3023               M         movlw LCDline
020A   0084               M         movwf FSR
                      00907         COPY_STRING str_running
020B   30??               M         movlw str_running
020C   2???               M         call copystring
020D   2???           00908         call writeline
020E   2???           00909         call run
                      00910         MOVLF phase, PHASE_FINISH
020F   3006               M         movlw 6
0210   00A0               M         movwf phase
0211   01A2           00911         clrf line_num
0212   2???           00912         call display
                      00913         ; call delay1sl
                      00914         MOVLF phase, PHASE_REPORT
0213   3004               M         movlw 4
0214   00A0               M         movwf phase
0215   01A2           00915         clrf line_num
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0216   2???           00916         call display
                      00917         ; assume run time is very long, key has been released
0217   0008           00918         return
0218                  00919 stoprun
0218   2???           00920         goto keyresp_next
                      00921 
                      00922 ;*******************************************************************************
                      00923 ;"keypad_timeout":
                      00924 ; Func:
                      00925 ; Input:
                      00926 ; Output:
                      00927 ; Affect:
                      00928 ;*******************************************************************************
0219                  00929 keypad_timeout
0219   08EC           00930         movf newsec, f
021A   1903           00931         btfsc STATUS, Z
021B   2???           00932         goto kp_to_nonewsec ; newsec == 0(FALSE), skip
021C   2???           00933         call display ; newsec == TRUE, display the new sec
021D   01EC           00934         clrf newsec
021E                  00935 kp_to_nonewsec
                      00936 ; SLEEP test goes here!!!!
021E   0008           00937         return
                      00938 
                      00939 ;*******************************************************************************
                      00940 ; "display": Display Function (User Interface)
                      00941 ; Func: First make up the content to be displayed into LCDline
                      00942 ; according to phase and line_num, then print the string
                      00943 ; to the LCD
                      00944 ; Input: phase, line_num
                      00945 ; Output: None (to LCD)
                      00946 ; Affect: W, STATUS, FSR, temp2, table_temp, arg, arg2,
                      00947 ; delaytemp, delaycount, lcd_temp
                      00948 ;*******************************************************************************
021F                  00949 display
                      00950 ; run phase does not use general display function
021F   0820           00951         movf phase, w
0220   3C05           00952         sublw PHASE_RUN
0221   1903           00953         btfsc STATUS, Z
0222   0008           00954         return
0223   0822           00955         movf line_num, w ; current line#
0224   2???           00956         call makeline
0225   2???           00957         call LCD_clear ; clear LCD display
0226   2???           00958         call writeline
0227   0A22           00959         incf line_num, w ; next line# in W, but not inc line#
0228   2???           00960         call makeline
0229   2???           00961         call LCD_line2
022A   2???           00962         call writeline
022B   2???           00963         call LCD_out ; move the cursor out of screen
022C   0008           00964         return
                      00965 ;*******************************************************************************
                      00966 ; "makeline": Displayable Line Make & Copy Function
                      00967 ; Func: Make lines to be displayed according to the phase and
                      00968 ; line number (W), copy it to the LCDline array
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00969 ; Input: W = line # to be displayed, phase
                      00970 ; Output: FSR = point to the null termination of the line made &
                      00971 ; copied, (Copied line in LCDline)
                      00972 ; Affect: W, STATUS, temp2, temp3, table_temp, arg, arg2, literal_addr
                      00973 ;*******************************************************************************
022D                  00974 makeline
022D   00B5           00975         movwf temp2 ; line#
                      00976         MOVLF FSR, LCDline ; start from LCDline
022E   3023               M         movlw LCDline
022F   0084               M         movwf FSR
0230   0820           00977         movf phase, w
                      00978         TABLE ; switch (phase)
  0000                    M         local tablename
0231   00??               M         movwf table_temp
0232   30??               M         movlw HIGH tablename
0233   008A               M         movwf PCLATH
0234   08??               M         movf table_temp, w
0235   3E??               M         addlw LOW tablename
0236   1803               M         btfsc STATUS, C
0237   0A8A               M         incf PCLATH, f
0238   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0239                      M         tablename
0239   2???           00979         goto ML_hdinit ; phase == 0
023A   2???           00980         goto ML_rtcinit ; phase == 1
023B   2???           00981         goto ML_realtime ; phase == 2
023C   2???           00982         goto ML_noreport ; phase == 3
023D   2???           00983         goto ML_report ; phase == 4
023E   2???           00984         goto ML_run ; phase == 5
023F   2???           00985         goto ML_finish ; phase == 6
0240                  00986 ML_hdinit
0240   0835           00987         movf temp2, w
                      00988         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
0241   00??               M         movwf table_temp
0242   30??               M         movlw HIGH tablename
0243   008A               M         movwf PCLATH
0244   08??               M         movf table_temp, w
0245   3E??               M         addlw LOW tablename
0246   1803               M         btfsc STATUS, C
0247   0A8A               M         incf PCLATH, f
0248   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0249                      M         tablename
0249   2???           00989         goto ML_hdinit_0 ; line# == 0
024A   2???           00990         goto ML_hdinit_1 ; line# == 1
024B                  00991 ML_rtcinit ; display do not use this function
                      00992         COPY_STRING str_null ; null termination
024B   30??               M         movlw str_null
024C   2???               M         call copystring
024D   0008           00993         return
024E                  00994 ML_realtime
024E   0835           00995         movf temp2, w
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00996         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
024F   00??               M         movwf table_temp
0250   30??               M         movlw HIGH tablename
0251   008A               M         movwf PCLATH
0252   08??               M         movf table_temp, w
0253   3E??               M         addlw LOW tablename
0254   1803               M         btfsc STATUS, C
0255   0A8A               M         incf PCLATH, f
0256   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0257                      M         tablename
0257   2???           00997         goto ML_realtime_0 ; line# == 0
0258   2???           00998         goto ML_realtime_1 ; line# == 1
0259                  00999 ML_noreport
0259   0835           01000         movf temp2, w
                      01001         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
025A   00??               M         movwf table_temp
025B   30??               M         movlw HIGH tablename
025C   008A               M         movwf PCLATH
025D   08??               M         movf table_temp, w
025E   3E??               M         addlw LOW tablename
025F   1803               M         btfsc STATUS, C
0260   0A8A               M         incf PCLATH, f
0261   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0262                      M         tablename
0262   2???           01002         goto ML_noreport_0 ; line# == 0
0263   2???           01003         goto ML_noreport_1 ; line# == 1
0264                  01004 ML_report
0264   0835           01005         movf temp2, w
                      01006         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
0265   00??               M         movwf table_temp
0266   30??               M         movlw HIGH tablename
0267   008A               M         movwf PCLATH
0268   08??               M         movf table_temp, w
0269   3E??               M         addlw LOW tablename
026A   1803               M         btfsc STATUS, C
026B   0A8A               M         incf PCLATH, f
026C   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
026D                      M         tablename
026D   2???           01007         goto ML_report_0 ; line# == 0
026E   2???           01008         goto ML_report_1 ; line# == 1
026F   2???           01009         goto ML_report_2 ; line# == 2
0270   2???           01010         goto ML_report_3 ; line# == 3
0271   2???           01011         goto ML_report_4 ; line# == 4
0272   2???           01012         goto ML_report_5 ; line# == 5
0273   2???           01013         goto ML_report_6 ; line# == 6
0274   2???           01014         goto ML_report_7 ; line# == 7
0275   2???           01015         goto ML_report_8 ; line# == 8
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0276   2???           01016         goto ML_report_9 ; line# == 9
0277   2???           01017         goto ML_report_10 ; line# == 10
0278                  01018 ML_run
0278   0835           01019         movf temp2, w
                      01020         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
0279   00??               M         movwf table_temp
027A   30??               M         movlw HIGH tablename
027B   008A               M         movwf PCLATH
027C   08??               M         movf table_temp, w
027D   3E??               M         addlw LOW tablename
027E   1803               M         btfsc STATUS, C
027F   0A8A               M         incf PCLATH, f
0280   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
0281                      M         tablename
0281   2???           01021         goto ML_run_0 ; line# == 0
0282   2???           01022         goto ML_run_1 ; line# == 1
0283                  01023 ML_finish
0283   0835           01024         movf temp2, w
                      01025         TABLE ; switch (temp2(line#))
  0000                    M         local tablename
0284   00??               M         movwf table_temp
0285   30??               M         movlw HIGH tablename
0286   008A               M         movwf PCLATH
0287   08??               M         movf table_temp, w
0288   3E??               M         addlw LOW tablename
0289   1803               M         btfsc STATUS, C
028A   0A8A               M         incf PCLATH, f
028B   0082               M         movwf PCL
Warning[207]: Found label after column 1. (tablename)
028C                      M         tablename
028C   2???           01026         goto ML_finish_0 ; line# == 0
028D   2???           01027         goto ML_finish_1 ; line# == 1
028E                  01028 ML_hdinit_0
                      01029         COPY_STRING str_init
028E   30??               M         movlw str_init
028F   2???               M         call copystring
0290   0008           01030         return
0291                  01031 ML_hdinit_1
                      01032         COPY_STRING str_null
0291   30??               M         movlw str_null
0292   2???               M         call copystring
0293   0008           01033         return
0294                  01034 ML_realtime_0
                      01035         COPY_STRING str_yearhead
0294   30??               M         movlw str_yearhead
0295   2???               M         call copystring
                      01036         COPY_DEC2 rt_year
0296   0840               M         movf rt_year,   w
0297   00BB               M         movwf arg
0298   3002               M         movlw 0x02
0299   00BC               M         movwf arg2
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

029A   2???               M         call copydec
                      01037         COPY_STRING str_dash
029B   30??               M         movlw str_dash
029C   2???               M         call copystring
                      01038         COPY_DEC2 rt_month
029D   0841               M         movf rt_month,  w
029E   00BB               M         movwf arg
029F   3002               M         movlw 0x02
02A0   00BC               M         movwf arg2
02A1   2???               M         call copydec
                      01039         COPY_STRING str_dash
02A2   30??               M         movlw str_dash
02A3   2???               M         call copystring
                      01040         COPY_DEC2 rt_day
02A4   0842               M         movf rt_day,    w
02A5   00BB               M         movwf arg
02A6   3002               M         movlw 0x02
02A7   00BC               M         movwf arg2
02A8   2???               M         call copydec
02A9   0008           01041         return
02AA                  01042 ML_realtime_1
                      01043         COPY_DEC2 rt_hour
02AA   0843               M         movf rt_hour,   w
02AB   00BB               M         movwf arg
02AC   3002               M         movlw 0x02
02AD   00BC               M         movwf arg2
02AE   2???               M         call copydec
                      01044         COPY_STRING str_colon
02AF   30??               M         movlw str_colon
02B0   2???               M         call copystring
                      01045         COPY_DEC2 rt_min
02B1   0844               M         movf rt_min,    w
02B2   00BB               M         movwf arg
02B3   3002               M         movlw 0x02
02B4   00BC               M         movwf arg2
02B5   2???               M         call copydec
                      01046         COPY_STRING str_colon
02B6   30??               M         movlw str_colon
02B7   2???               M         call copystring
                      01047         COPY_DEC2 rt_sec
02B8   0845               M         movf rt_sec,    w
02B9   00BB               M         movwf arg
02BA   3002               M         movlw 0x02
02BB   00BC               M         movwf arg2
02BC   2???               M         call copydec
02BD   0008           01048         return
02BE                  01049 ML_noreport_0
                      01050         COPY_STRING str_noreport
02BE   30??               M         movlw str_noreport
02BF   2???               M         call copystring
02C0   0008           01051         return
02C1                  01052 ML_noreport_1
                      01053         COPY_STRING str_null
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02C1   30??               M         movlw str_null
02C2   2???               M         call copystring
02C3   0008           01054         return
02C4                  01055 ML_report_0
                      01056         COPY_STRING str_entry
02C4   30??               M         movlw str_entry
02C5   2???               M         call copystring
                      01057         ; log# = (log_total - log_next + report_num + 1 + MAXLOG) MOD MAXLOG
                      01058         ; also log# = MAXLOG if result == 0
02C6   0869           01059         movf log_next, w
02C7   0268           01060         subwf log_total, w
02C8   0721           01061         addwf report_num, w
02C9   3E01           01062         addlw 0x01
02CA   3E0C           01063         addlw MAXLOG
                      01064         MODLW MAXLOG
02CB   00EA               M         movwf arith_temp
02CC   300C               M         movlw MAXLOG
02CD   2???               M         call divfn
02CE   086A               M         movf arith_temp, w
02CF   1903           01065         btfsc STATUS, Z
02D0   300C           01066         movlw MAXLOG ; result == 0, log# = MAXLOG
02D1   00B6           01067         movwf temp3
                      01068         COPY_DEC2 temp3
02D2   0836               M         movf temp3,     w
02D3   00BB               M         movwf arg
02D4   3002               M         movlw 0x02
02D5   00BC               M         movwf arg2
02D6   2???               M         call copydec
                      01069         COPY_STRING char_slash
02D7   30??               M         movlw char_slash
02D8   2???               M         call copystring
                      01070         COPY_DEC2 log_total
02D9   0868               M         movf log_total, w
02DA   00BB               M         movwf arg
02DB   3002               M         movlw 0x02
02DC   00BC               M         movwf arg2
02DD   2???               M         call copydec
02DE   0008           01071         return
02DF                  01072 ML_report_1
                      01073         COPY_STRING str_start
02DF   30??               M         movlw str_start
02E0   2???               M         call copystring
                      01074         COPY_DEC2 st_hour
02E1   0849               M         movf st_hour,   w
02E2   00BB               M         movwf arg
02E3   3002               M         movlw 0x02
02E4   00BC               M         movwf arg2
02E5   2???               M         call copydec
                      01075         COPY_STRING str_colon
02E6   30??               M         movlw str_colon
02E7   2???               M         call copystring
                      01076         COPY_DEC2 st_min
02E8   084A               M         movf st_min,    w
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02E9   00BB               M         movwf arg
02EA   3002               M         movlw 0x02
02EB   00BC               M         movwf arg2
02EC   2???               M         call copydec
                      01077         COPY_STRING str_colon
02ED   30??               M         movlw str_colon
02EE   2???               M         call copystring
                      01078         COPY_DEC2 st_sec
02EF   084B               M         movf st_sec,    w
02F0   00BB               M         movwf arg
02F1   3002               M         movlw 0x02
02F2   00BC               M         movwf arg2
02F3   2???               M         call copydec
02F4   0008           01079         return
02F5                  01080 ML_report_2
                      01081         COPY_STRING str_finish
02F5   30??               M         movlw str_finish
02F6   2???               M         call copystring
                      01082         COPY_DEC2 end_hour
02F7   084C               M         movf end_hour,  w
02F8   00BB               M         movwf arg
02F9   3002               M         movlw 0x02
02FA   00BC               M         movwf arg2
02FB   2???               M         call copydec
                      01083         COPY_STRING str_colon
02FC   30??               M         movlw str_colon
02FD   2???               M         call copystring
                      01084         COPY_DEC2 end_min
02FE   084D               M         movf end_min,   w
02FF   00BB               M         movwf arg
0300   3002               M         movlw 0x02
0301   00BC               M         movwf arg2
0302   2???               M         call copydec
                      01085         COPY_STRING str_colon
0303   30??               M         movlw str_colon
0304   2???               M         call copystring
                      01086         COPY_DEC2 end_sec
0305   084E               M         movf end_sec,   w
0306   00BB               M         movwf arg
0307   3002               M         movlw 0x02
0308   00BC               M         movwf arg2
0309   2???               M         call copydec
030A   0008           01087         return
030B                  01088 ML_report_3
                      01089         COPY_STRING str_runtime
030B   30??               M         movlw str_runtime
030C   2???               M         call copystring
                      01090         COPY_DEC1 runtime
030D   084F               M         movf runtime,   w
030E   00BB               M         movwf arg
030F   3001               M         movlw 0x01
0310   00BC               M         movwf arg2
0311   2???               M         call copydec
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01091         COPY_STRING str_s
0312   30??               M         movlw str_s
0313   2???               M         call copystring
0314   0008           01092         return
0315                  01093 ML_report_4
                      01094         COPY_STRING str_total
0315   30??               M         movlw str_total
0316   2???               M         call copystring
                      01095         COPY_DEC1 cl_total
0317   0850               M         movf cl_total,  w
0318   00BB               M         movwf arg
0319   3001               M         movlw 0x01
031A   00BC               M         movwf arg2
031B   2???               M         call copydec
031C   0008           01096         return
031D                  01097 ML_report_5
                      01098         COPY_STRING str_pass
031D   30??               M         movlw str_pass
031E   2???               M         call copystring
                      01099         COPY_DEC1 cl_pass
031F   0851               M         movf cl_pass,   w
0320   00BB               M         movwf arg
0321   3001               M         movlw 0x01
0322   00BC               M         movwf arg2
0323   2???               M         call copydec
                      01100         COPY_STRING str_fail
0324   30??               M         movlw str_fail
0325   2???               M         call copystring
                      01101         COPY_DEC1 cl_fail
0326   0852               M         movf cl_fail,   w
0327   00BB               M         movwf arg
0328   3001               M         movlw 0x01
0329   00BC               M         movwf arg2
032A   2???               M         call copydec
032B   0008           01102         return
032C                  01103 ML_report_6
                      01104         COPY_STRING str_layout
032C   30??               M         movlw str_layout
032D   2???               M         call copystring
032E   0008           01105         return
032F                  01106 ML_report_7
                      01107         COPY_STRING str_layout1
032F   30??               M         movlw str_layout1
0330   2???               M         call copystring
                      01108         COPY_LAYOUT 0
0331   3000               M         movlw 0
0332   2???               M         call copylayout
0333   0008           01109         return
0334                  01110 ML_report_8
                      01111         COPY_STRING str_layout2
0334   30??               M         movlw str_layout2
0335   2???               M         call copystring
                      01112         COPY_LAYOUT 1
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0336   3001               M         movlw 1
0337   2???               M         call copylayout
0338   0008           01113         return
0339                  01114 ML_report_9
                      01115         COPY_STRING str_layout3
0339   30??               M         movlw str_layout3
033A   2???               M         call copystring
                      01116         COPY_LAYOUT 2
033B   3002               M         movlw 2
033C   2???               M         call copylayout
033D   0008           01117         return
033E                  01118 ML_report_10
                      01119         COPY_STRING str_layout4
033E   30??               M         movlw str_layout4
033F   2???               M         call copystring
                      01120         COPY_LAYOUT 3
0340   3003               M         movlw 3
0341   2???               M         call copylayout
0342   0008           01121         return
0343                  01122 ML_run_0
                      01123         COPY_STRING str_running
0343   30??               M         movlw str_running
0344   2???               M         call copystring
0345   0008           01124         return
0346                  01125 ML_run_1
                      01126         COPY_STRING str_null
0346   30??               M         movlw str_null
0347   2???               M         call copystring
0348   0008           01127         return
0349                  01128 ML_finish_0
                      01129         COPY_STRING str_insp_fin
0349   30??               M         movlw str_insp_fin
034A   2???               M         call copystring
034B   0008           01130         return
034C                  01131 ML_finish_1 ; ALL PASS????!!!!
                      01132         COPY_STRING str_runtime
034C   30??               M         movlw str_runtime
034D   2???               M         call copystring
                      01133         COPY_DEC1 runtime
034E   084F               M         movf runtime,   w
034F   00BB               M         movwf arg
0350   3001               M         movlw 0x01
0351   00BC               M         movwf arg2
0352   2???               M         call copydec
                      01134         COPY_STRING str_s
0353   30??               M         movlw str_s
0354   2???               M         call copystring
0355   0008           01135         return
                      01136 ;*******************************************************************************
                      01137 ; "copystring": String Copy Function
                      01138 ; Func: Copy the string literal (null terminated) pointed by W
                      01139 ; to position pointed by FSR (indirect pointer)
                      01140 ; Input: W = address of the string literal wanted,
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01141 ; FSR = adress of destination
                      01142 ; Output: FSR = adress of the null terminator of the copyed string
                      01143 ; Affect: W, STATUS, literal_addr
                      01144 ;*******************************************************************************
0356                  01145 copystring
0356   00BD           01146         movwf literal_addr
0357                  01147 copystring_loop
0357   083D           01148         movf literal_addr, w
0358   2???           01149         call literal
0359   0080           01150         movwf INDF
035A   0880           01151         movf INDF, f ; test INDF(last char) == 0(NULL)
035B   1903           01152         btfsc STATUS, Z
035C   0008           01153         return ; if end of string is reached (NULL)
035D   0A84           01154         incf FSR, f
035E   0ABD           01155         incf literal_addr, f
035F   2???           01156         goto copystring_loop
                      01157 ;*******************************************************************************
                      01158 ; "copylayout": Layout Row Translate & Copy Function
                      01159 ; Func: Translate a row in layout array into printable format,
                      01160 ; copy it to position pointed by FSR,
                      01161 ; and add a null termination after the copied charactor
                      01162 ; Input: W = raw number, FSR = adress of destination
                      01163 ; Output: FSR = adress of the null terminator after copied layout
                      01164 ; Affect:
                      01165 ;*******************************************************************************
0360                  01166 copylayout
0360   00B4           01167         movwf temp ; raw number, later hold translated layout byte
0361   3053           01168         movlw layout
0362   08B4           01169         movf temp, f ; test if temp == 0
0363   1903           01170         btfsc STATUS, Z
0364   2???           01171         goto copylayout_next ; temp == 0, starting position = layout
0365                  01172 copylayout_startloop
0365   3E05           01173         addlw COLS
0366   0BB4           01174         decfsz temp, f
0367   2???           01175         goto copylayout_startloop
0368                  01176 copylayout_next
0368   00B5           01177         movwf temp2 ; address of layout byte
0369   0804           01178         movf FSR, w
036A   00B6           01179         movwf temp3 ; address of destination
036B   3005           01180         movlw COLS
036C   00B7           01181         movwf temp4 ; colume counter
036D                  01182 copylayout_charloop
036D   0835           01183         movf temp2, w ; get layout byte
036E   0084           01184         movwf FSR
036F   30??           01185         movlw char_layout ; get translated layout byte address
0370   0700           01186         addwf INDF, w
0371   2???           01187         call literal ; translate char
0372   00B4           01188         movwf temp ; save the translated layout byte into temp
0373   0836           01189         movf temp3, w ; get destination
0374   0084           01190         movwf FSR
0375   0834           01191         movf temp, w ; copy translated byte to destination
Warning[203]: Found opcode in column 1. (movwf)
0376   0080           01192 movwf INDF
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0377   0AB5           01193         incf temp2, f
0378   0AB6           01194         incf temp3, f
0379   0BB7           01195         decfsz temp4, f
037A   2???           01196         goto copylayout_charloop
037B   0836           01197         movf temp3, w
037C   0084           01198         movwf FSR ; FSR will now have the address after last byte
037D   3000           01199         movlw NULL ; add null terminator
037E   0080           01200         movwf INDF
037F   0008           01201         return
                      01202 ;*******************************************************************************
                      01203 ; "copydec": Byte Display Conversion & Copy Function
                      01204 ; Func: Convert a number store in a byte to a printable decimal
                      01205 ; ASCII string with null termination and copy it to a position
                      01206 ; pointed by FSR
                      01207 ; Input: arg = number to be converted,
                      01208 ; arg2 = minimum number of digits displayed
                      01209 ; FSR = adress of destination
                      01210 ; Output: FSR = adress of the null terminator of the decimal display
                      01211 ; Affect: W, STATUS, arith_temp, arith_temp2
                      01212 ;*******************************************************************************
0380                  01213 copydec
0380   083B           01214         movf arg, w
                      01215         DIVLW 0x64 ; 100
0381   00EA               M         movwf arith_temp
0382   3064               M         movlw 0x64
0383   2???               M         call divfn
0384   1D03           01216         btfss STATUS, Z ; test if quotient is 0
0385   2???           01217         goto copydec_copyhundreds ; quotient <> 0, normal display
0386   3003           01218         movlw 0x03 ; quotient == 0, depends on arg2
0387   023C           01219         subwf arg2, w
0388   1C03           01220         btfss STATUS, C ; test if arg2 < 3
0389   2???           01221         goto copydec_tens ; arg2 < 3, skip 0 hundred
038A   3000           01222         movlw 0x00 ; arg2 >= 3, display 0
038B                  01223 copydec_copyhundreds
038B   3E30           01224         addlw 0x30 ; num+0x30 = its ASCII
038C   0080           01225         movwf INDF
038D   0A84           01226         incf FSR, f
038E   3003           01227         movlw 0x03 ; hundreds already displayed, set arg2 to 3
038F   00BC           01228         movwf arg2 ; because all following digit shall be seen
0390                  01229 copydec_tens
0390   083B           01230         movf arg, w
                      01231         MODLW 0x64 ; 100
0391   00EA               M         movwf arith_temp
0392   3064               M         movlw 0x64
0393   2???               M         call divfn
0394   086A               M         movf arith_temp, w
                      01232         DIVLW 0x0A ; 10
0395   00EA               M         movwf arith_temp
0396   300A               M         movlw 0x0A
0397   2???               M         call divfn
0398   1D03           01233         btfss STATUS, Z ; test if quotient is 0
0399   2???           01234         goto copydec_copytens ; quotient <> 0, normal display
039A   3002           01235         movlw 0x02 ; quotient == 0, depends on arg2
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

039B   023C           01236         subwf arg2, w
039C   1C03           01237         btfss STATUS, C ; test if arg2 < 2
039D   2???           01238         goto copydec_ones ; arg2 < 2, skip 0 tens
039E   3000           01239         movlw 0x00 ; arg2 >= 2, display 0
039F                  01240 copydec_copytens
039F   3E30           01241         addlw 0x30 ; num+0x30 = its ASCII
03A0   0080           01242         movwf INDF
03A1   0A84           01243         incf FSR, f
                      01244         ; movlw 0x02 ; tens already displayed, set arg2 to 2
                      01245         ; movwf arg2 ; because all following digit shall be seen
03A2                  01246 copydec_ones
03A2   083B           01247         movf arg, w
                      01248         MODLW 0x0A ; 10
03A3   00EA               M         movwf arith_temp
03A4   300A               M         movlw 0x0A
03A5   2???               M         call divfn
03A6   086A               M         movf arith_temp, w
                      01249         ; ones shall be displayed anyways
03A7   3E30           01250         addlw 0x30 ; num+0x30 = its ASCII
03A8   0080           01251         movwf INDF
03A9   0A84           01252         incf FSR, f
03AA                  01253 copydec_ending ; write a null ending
03AA   3000           01254         movlw NULL
03AB   0080           01255         movwf INDF
03AC   0008           01256         return
                      01257 ;*******************************************************************************
                      01258 ; "writeline": Write Displayable Line to LCD Function
                      01259 ; Func: Send LCDline string to LCD charactor by charactor
                      01260 ; Input: None (string prepared in LCDline)
                      01261 ; Output: None (to LCD)
                      01262 ; Affect: W, STATUS, FSR, delaytemp, delaycount
                      01263 ; Runtime: (3.2 + 216.0 * N) us, N = # of char, not including NULL
                      01264 ;*******************************************************************************
03AD                  01265 writeline
                      01266         MOVLF FSR, LCDline
03AD   3023               M         movlw LCDline
03AE   0084               M         movwf FSR
03AF                  01267 writeline_loop
03AF   0800           01268         movf INDF, w ; test INDF(char pointer to the string)==0(NULL)
03B0   1903           01269         btfsc STATUS, Z
03B1   0008           01270         return ; if end of string is reached (NULL)
03B2   2???           01271         call LCD_wt
03B3   0A84           01272         incf FSR, f
03B4   2???           01273         goto writeline_loop
                      01274 ;*******************************************************************************
                      01275 ; "Run": Run Inspection Function
                      01276 ; Func: Control the entire process of inspection
                      01277 ; Input: None
                      01278 ; Output: st_year, st_month, st_day, st_hour, st_min, st_sec,
                      01279 ; end_hour, end_min, end_sec, runtime, cl_total, cl_pass,
                      01280 ; cl_fail, layout, smotor_dir, log!!!!
                      01281 ; Affect:
                      01282 ;*******************************************************************************
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03B5                  01283 run
                      01284         ; store sarting time
                      01285         MOVFF st_year, rt_year
03B5   0840               M         movf rt_year, w
03B6   00C6               M         movwf st_year
                      01286         MOVFF st_month, rt_month
03B7   0841               M         movf rt_month, w
03B8   00C7               M         movwf st_month
                      01287         MOVFF st_day, rt_day
03B9   0842               M         movf rt_day, w
03BA   00C8               M         movwf st_day
                      01288         MOVFF st_hour, rt_hour
03BB   0843               M         movf rt_hour, w
03BC   00C9               M         movwf st_hour
                      01289         MOVFF st_min, rt_min
03BD   0844               M         movf rt_min, w
03BE   00CA               M         movwf st_min
                      01290         MOVFF st_sec, rt_sec
03BF   0845               M         movf rt_sec, w
03C0   00CB               M         movwf st_sec
                      01291         ; reset all layouts
                      01292         MOVLF FSR, layout
03C1   3053               M         movlw layout
03C2   0084               M         movwf FSR
                      01293         MOVLF temp, MAXPOS
03C3   3014               M         movlw MAXPOS
03C4   00B4               M         movwf temp
03C5                  01294 run_clearlayoutloop
03C5   0180           01295         clrf INDF
03C6   0A84           01296         incf FSR, f
03C7   0BB4           01297         decfsz temp, f
03C8   2???           01298         goto run_clearlayoutloop
                      01299         ; initialize variables
03C9   3053           01300         movlw layout
03CA   08E7           01301         movf smotor_dir, f
03CB   1903           01302         btfsc STATUS, Z
03CC   2???           01303         goto run_init_smotornext; smotor_dir == 0, "row1" to "row4"
03CD   3E14           01304         addlw MAXPOS ; smotor_dir <> 0, "row4" to "row1"
03CE   00B4           01305         movwf temp ; temperary storage
03CF   3005           01306         movlw COLS
03D0   0234           01307         subwf temp, w ; layout + MAXPOS - COLS, at last row
03D1                  01308 run_init_smotornext
03D1   00BF           01309         movwf result_addr
                      01310         MOVLF rowleft, ROWS
03D2   3004               M         movlw ROWS
03D3   00BE               M         movwf rowleft
03D4   01D0           01311         clrf cl_total
03D5   01D1           01312         clrf cl_pass
03D6   01D2           01313         clrf cl_fail
03D7   100B           01314         bcf INTCON, RBIF
03D8   158B           01315         bsf INTCON, RBIE ; enable keypad interrept
                      01316         STORE_LIGHT light_bg
03D9   30B0               M         movlw light_bg
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03DA   2???               M         call lightsensor
                      01317         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
03DB   3023               M         movlw LCDline
03DC   0084               M         movwf FSR
                          M         COPY_STRING str_dot
03DD   30??               M         movlw str_dot
03DE   2???               M         call copystring
03DF   2???               M         call writeline
03E0                  01318 run_loop
                      01319         IRLED_ON
03E0   3001               M         movlw 0x01
03E1   2???               M         call ledcontrol
                      01320         STORE_LIGHT light_pos
03E2   30B5               M         movlw light_pos
03E3   2???               M         call lightsensor
                      01321         IRLED_OFF
03E4   3000               M         movlw 0x00
03E5   2???               M         call ledcontrol
03E6   083F           01322         movf result_addr, w
                      01323         CALC_POS THD_IRLED
03E7   00B4               M         movwf temp
03E8   301C               M         movlw THD_IRLED
03E9   00B7               M         movwf temp4
03EA   2???               M         call calcpos
03EB   1903           01324         btfsc STATUS, Z
03EC   2???           01325         goto run_noextrarow ; return value == 0, no lights in this row
                      01326         ;PRESS_CL
03ED   2???           01327         call movedown
                      01328         STORE_LIGHT light_pos
03EE   30B5               M         movlw light_pos
03EF   2???               M         call lightsensor
                      01329         CALC_POS THD_CL3LED
03F0   00B4               M         movwf temp
03F1   3050               M         movlw THD_CL3LED
03F2   00B7               M         movwf temp4
03F3   2???               M         call calcpos
03F4   2???           01330         call moveup
                      01331         STORE_LIGHT light_cl
03F5   30BA               M         movlw light_cl
03F6   2???               M         call lightsensor
                      01332         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
03F7   3023               M         movlw LCDline
03F8   0084               M         movwf FSR
                          M         COPY_STRING str_dot
03F9   30??               M         movlw str_dot
03FA   2???               M         call copystring
03FB   2???               M         call writeline
                      01333         ;PRESS_CL
03FC   2???           01334         call movedown
03FD   2???           01335         call moveup
                      01336         STORE_LIGHT light_off
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03FE   30BF               M         movlw light_off
03FF   2???               M         call lightsensor
                      01337         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
0400   3023               M         movlw LCDline
0401   0084               M         movwf FSR
                          M         COPY_STRING str_dot
0402   30??               M         movlw str_dot
0403   2???               M         call copystring
0404   2???               M         call writeline
0405   083F           01338         movf result_addr, w
0406   2???           01339         call calcfunc
0407   3E00           01340         addlw 0x00
0408   1903           01341         btfsc STATUS, Z
0409   2???           01342         goto run_noextrarow ; return value == 0, no extra row
                      01343         ; return value <> 0, advance extra row
                      01344         ; advance to next RAM location
040A   3005           01345         movlw COLS
040B   08E7           01346         movf smotor_dir, f
040C   1D03           01347         btfss STATUS, Z
040D   2???           01348         goto run_nextRAM_reverse; smotor_dir<>0, "row4" to "row1", sub COLS
040E   07BF           01349         addwf result_addr, f ; smotor_dir == 0, "row1" to "row4", add COLS
040F   2???           01350         goto run_nextRAM_next
0410                  01351 run_nextRAM_reverse
0410   02BF           01352         subwf result_addr, f
0411                  01353 run_nextRAM_next
0411   03BE           01354         decf rowleft, f
0412   1903           01355         btfsc STATUS, Z
0413   2???           01356         goto run_end ; no row left, end run
0414   2???           01357         call advancerow ; advance to next machine location
                      01358         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
0415   3023               M         movlw LCDline
0416   0084               M         movwf FSR
                          M         COPY_STRING str_dot
0417   30??               M         movlw str_dot
0418   2???               M         call copystring
0419   2???               M         call writeline
041A                  01359 run_noextrarow
                      01360         ; advance to next RAM location
041A   3005           01361         movlw COLS
041B   08E7           01362         movf smotor_dir, f
041C   1D03           01363         btfss STATUS, Z
041D   2???           01364         goto run_nextRAM_reverse2 ; smotor_dir <> 0, "row4" to "row1"
041E   07BF           01365         addwf result_addr, f ; smotor_dir == 0, "row1" to "row4", add COLS
041F   2???           01366         goto run_nextRAM_next2
0420                  01367 run_nextRAM_reverse2
0420   02BF           01368         subwf result_addr, f
0421                  01369 run_nextRAM_next2
0421   03BE           01370         decf rowleft, f
0422   1903           01371         btfsc STATUS, Z
0423   2???           01372         goto run_end ; no row left, end run
0424   2???           01373         call advancerow ; advance to next machine location
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01374         PRINT_DOT ; !!!!
                          M         MOVLF FSR, LCDline
0425   3023               M         movlw LCDline
0426   0084               M         movwf FSR
                          M         COPY_STRING str_dot
0427   30??               M         movlw str_dot
0428   2???               M         call copystring
0429   2???               M         call writeline
042A   2???           01375         goto run_loop
042B                  01376 run_end
042B   118B           01377         bcf INTCON, RBIE ; disable keypad interrept
042C   3001           01378         movlw 0x01 ; mask last bit
042D   06E7           01379         xorwf smotor_dir, f ; logic NOT last digit, reverse direction
                      01380         ; store end time
                      01381         MOVFF end_hour, rt_hour
042E   0843               M         movf rt_hour, w
042F   00CC               M         movwf end_hour
                      01382         MOVFF end_min, rt_min
0430   0844               M         movf rt_min, w
0431   00CD               M         movwf end_min
                      01383         MOVFF end_sec, rt_sec
0432   0845               M         movf rt_sec, w
0433   00CE               M         movwf end_sec
0434   2???           01384         call calcruntime
0435   2???           01385         call writelog
0436   00A1           01386         movwf report_num
0437   0008           01387         return
                      01388 ;*******************************************************************************
                      01389 ; "calcpos": Row Position Calculation Function
                      01390 ; Func: Determine the existance of closet light at any positions in
                      01391 ; current row: result CL_POS_BIT = (light_pos >= THD_IRLED)
                      01392 ; Input: W = the starting address where the result will be stored,
                      01393 ; temp = address of the result, temp4 = threshold, light_pos[]
                      01394 ; Output: W = number of lights in current row, result bytes,
                      01395 ; STATUS is set according to W
                      01396 ; Affect: FSR, temp, temp2, temp3, temp4
                      01397 ;*******************************************************************************
0438                  01398 calcpos
                      01399         ; movwf temp ; address of the result
0438   01B5           01400         clrf temp2 ; colume number
0439   01B6           01401         clrf temp3 ; number of CLs in current row
043A                  01402 calcpos_loop
                      01403         MOVFF FSR, temp
043A   0834               M         movf temp, w
043B   0084               M         movwf FSR
043C   30B5           01404         movlw light_pos
043D   0735           01405         addwf temp2, w
043E   0084           01406         movwf FSR ; get current light_pos
043F   0837           01407         movf temp4, w
0440   0200           01408         subwf INDF, w ; light_pos - threshold
0441   1C03           01409         btfss STATUS, C
0442   2???           01410         goto calcpos_next ; light_pos < threshold, no light
                      01411         MOVFF FSR, temp ; light_pos >= threshold, has light
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0443   0834               M         movf temp, w
0444   0084               M         movwf FSR
0445   1400           01412         bsf INDF, CL_POS_BIT ; set pos bit
0446   0AB6           01413         incf temp3, f
0447                  01414 calcpos_next
0447   0AB4           01415         incf temp, f
0448   0AB5           01416         incf temp2, f
0449   3005           01417         movlw COLS
044A   0235           01418         subwf temp2, w ; temp2(col#) - COLS(max col#)
044B   1C03           01419         btfss STATUS, C
044C   2???           01420         goto calcpos_loop ; temp2(col#) < COLS(max col#)
044D   0836           01421         movf temp3, w
044E   0008           01422         return
                      01423 ;*******************************************************************************
                      01424 ; "calcfunc": Row Functionality Calculation Function
                      01425 ; Func: Determine the functionality of closet light at ANY positions
                      01426 ; (not only those maked pos) of current row, also determine
                      01427 ; whether next row can physically have any CL
                      01428 ; Input: W = the starting address where the result will be stored,
                      01429 ; light_bg[], light_cl[], light_off[], result bytes
                      01430 ; Output: W = whether the machine need to advance one more row
                      01431 ; (0 = advance one row; 1 = advance two rows),
                      01432 ; cl_total, cl_pass, cl_fail, layout[]
                      01433 ; Affect: STATUS, FSR, temp, temp2, temp3, temp4, temp5, temp6, temp7
                      01434 ;*******************************************************************************
044F                  01435 calcfunc
Warning[203]: Found opcode in column 1. (movwf)
044F   00B4           01436 movwf temp ; address of the result
Warning[203]: Found opcode in column 1. (clrf)
0450   01B5           01437 clrf temp2 ; colume number
Warning[203]: Found opcode in column 1. (clrf)
0451   01B6           01438 clrf temp3 ; C0 = light_pos >= THD_IRLED
Warning[203]: Found opcode in column 1. (clrf)
0452   01B7           01439 clrf temp4 ; C1 = light_cl >= THD_CL3LED
Warning[203]: Found opcode in column 1. (clrf)
0453   01B8           01440 clrf temp5 ; C2 = light_off >= (lihgt_bg + THD_BG)
Warning[203]: Found opcode in column 1. (clrf)
0454   01B9           01441 clrf temp6 ; number of CLs in current row
Warning[203]: Found opcode in column 1. (clrf)
0455   01BA           01442 clrf temp7 ; temperaty storage
0456                  01443 calcfunc_loop
                      01444 ; get C0 = CL_POS_BIT from calcpos
Warning[206]: Found call to macro in column 1. (MOVFF)
                      01445 MOVFF FSR, temp
0456   0834               M         movf temp, w
0457   0084               M         movwf FSR
Warning[203]: Found opcode in column 1. (movlw)
0458   3000           01446 movlw FALSE
Warning[203]: Found opcode in column 1. (btfsc)
0459   1800           01447 btfsc INDF, CL_POS_BIT
Warning[203]: Found opcode in column 1. (movlw)
045A   30FF           01448 movlw TRUE ; CL_POS_BIT set, C0 = true
Warning[203]: Found opcode in column 1. (movwf)
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

045B   00B6           01449 movwf temp3
                      01450 ; get C1 = light_cl >= THD_CL3LED
Warning[203]: Found opcode in column 1. (movlw)
045C   30BA           01451 movlw light_cl
Warning[203]: Found opcode in column 1. (addwf)
045D   0735           01452 addwf temp2, w
Warning[203]: Found opcode in column 1. (movwf)
045E   0084           01453 movwf FSR ; get current light_cl
Warning[203]: Found opcode in column 1. (movlw)
045F   3050           01454 movlw THD_CL3LED
Warning[203]: Found opcode in column 1. (subwf)
0460   0200           01455 subwf INDF, w ; light_cl - THD_CL3LED
Warning[203]: Found opcode in column 1. (btfss)
0461   1C03           01456 btfss STATUS, C
Warning[203]: Found opcode in column 1. (goto)
0462   2???           01457 goto calcfunc_C1false ; light_pos < THD_IRLED, C1 = false
Warning[203]: Found opcode in column 1. (movlw)
0463   30FF           01458 movlw TRUE ; light_pos >= THD_IRLED, C1 = ture
Warning[203]: Found opcode in column 1. (goto)
0464   2???           01459 goto calcfunc_C1next
0465                  01460 calcfunc_C1false
Warning[203]: Found opcode in column 1. (movlw)
0465   3000           01461 movlw FALSE
0466                  01462 calcfunc_C1next
Warning[203]: Found opcode in column 1. (movwf)
0466   00B7           01463 movwf temp4
                      01464 ; get C2 = light_off >= (lihgt_bg + THD_BG)
Warning[203]: Found opcode in column 1. (movlw)
0467   30B0           01465 movlw light_bg
Warning[203]: Found opcode in column 1. (addwf)
0468   0735           01466 addwf temp2, w
Warning[203]: Found opcode in column 1. (movwf)
0469   0084           01467 movwf FSR ; get current light_bg
Warning[203]: Found opcode in column 1. (movlw)
046A   3005           01468 movlw THD_BG
Warning[203]: Found opcode in column 1. (addwf)
046B   0700           01469 addwf INDF, w ; lihgt_bg + THD_BG
Warning[203]: Found opcode in column 1. (movwf)
046C   00BA           01470 movwf temp7 ; temperally save
Warning[203]: Found opcode in column 1. (movlw)
046D   30BF           01471 movlw light_off
Warning[203]: Found opcode in column 1. (addwf)
046E   0735           01472 addwf temp2, w
Warning[203]: Found opcode in column 1. (movwf)
046F   0084           01473 movwf FSR ; get current light_off
Warning[203]: Found opcode in column 1. (movf)
0470   083A           01474 movf temp7, w ; put (lihgt_bg + THD_BG) back
Warning[203]: Found opcode in column 1. (subwf)
0471   0200           01475 subwf INDF, w ; light_off - (lihgt_bg + THD_BG)
Warning[203]: Found opcode in column 1. (btfss)
0472   1C03           01476 btfss STATUS, C
Warning[203]: Found opcode in column 1. (goto)
0473   2???           01477 goto calcfunc_C2false ; light_off < (lihgt_bg - THD_BG), C2 = false
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[203]: Found opcode in column 1. (movlw)
0474   30FF           01478 movlw TRUE ; light_off >= (lihgt_bg - THD_BG), C2 = true
Warning[203]: Found opcode in column 1. (goto)
0475   2???           01479 goto calcfunc_C2next
0476                  01480 calcfunc_C2false
Warning[203]: Found opcode in column 1. (movlw)
0476   3000           01481 movlw FALSE
0477                  01482 calcfunc_C2next
Warning[203]: Found opcode in column 1. (movwf)
0477   00B8           01483 movwf temp5
                      01484 ; determine the functionality of CL:
Warning[206]: Found call to macro in column 1. (MOVFF)
                      01485 MOVFF FSR, temp
0478   0834               M         movf temp, w
0479   0084               M         movwf FSR
Warning[203]: Found opcode in column 1. (clrf)
047A   0180           01486 clrf INDF ; reset layout byte
                      01487 ; CL_POS_BIT = C0 IOR C1 IOR C2
Warning[203]: Found opcode in column 1. (movf)
047B   0836           01488 movf temp3, w ; W = C0
Warning[203]: Found opcode in column 1. (iorwf)
047C   0437           01489 iorwf temp4, w ; W = C0 IOR C1
Warning[203]: Found opcode in column 1. (iorwf)
047D   0438           01490 iorwf temp5, w ; W = C0 IOR C1 IOR C2
Warning[203]: Found opcode in column 1. (btfsc)
047E   1903           01491 btfsc STATUS, Z
Warning[203]: Found opcode in column 1. (goto)
047F   2???           01492 goto calcfunc_POSfalse ; W == 0, false
Warning[203]: Found opcode in column 1. (bsf)
0480   1400           01493 bsf INDF, CL_POS_BIT ; W <> 0, true
Warning[203]: Found opcode in column 1. (incf)
0481   0AD0           01494 incf cl_total, f
Warning[203]: Found opcode in column 1. (incf)
0482   0AB9           01495 incf temp6, f
0483                  01496 calcfunc_POSfalse
                      01497 ; CL_FN_BIT = (C1 AND (NOT C2)) IOR (C0 AND (NOT C1) AND C2)
Warning[203]: Found opcode in column 1. (movf)
0483   0838           01498 movf temp5, w ; W = C2
Warning[203]: Found opcode in column 1. (xorlw)
0484   3AFF           01499 xorlw 0xFF ; W = NOT C2
Warning[203]: Found opcode in column 1. (andwf)
0485   0537           01500 andwf temp4, w ; W = C1 AND (NOT C2)
0486   00BA           01501  movwf temp7 ; temperally save
Warning[203]: Found opcode in column 1. (movf)
0487   0837           01502 movf temp4, w ; W = C1
Warning[203]: Found opcode in column 1. (xorlw)
0488   3AFF           01503 xorlw 0xFF ; W = NOT C1
Warning[203]: Found opcode in column 1. (andwf)
0489   0536           01504 andwf temp3, w ; W = C0 AND (NOT C1)
Warning[203]: Found opcode in column 1. (andwf)
048A   0538           01505 andwf temp5, w ; W = C0 AND (NOT C1) AND C2
Warning[203]: Found opcode in column 1. (iorwf)
048B   043A           01506 iorwf temp7, w ; W = (C1 AND(NOT C2))IOR(C0 AND(NOT C1)AND C2)
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[203]: Found opcode in column 1. (btfsc)
048C   1903           01507 btfsc STATUS, Z
Warning[203]: Found opcode in column 1. (goto)
048D   2???           01508 goto calcfunc_FNfalse ; W == 0, false
Warning[203]: Found opcode in column 1. (bsf)
048E   1480           01509 bsf INDF, CL_FN_BIT ; W <> 0, true
Warning[203]: Found opcode in column 1. (incf)
048F   0AD1           01510 incf cl_pass, f
0490                  01511 calcfunc_FNfalse
                      01512 ; CL_ERR_BIT = (C1 AND (NOT C0)) IOR (C2 AND (NOT C1))
Warning[203]: Found opcode in column 1. (movf)
0490   0837           01513 movf temp4, w ; W = C1
Warning[203]: Found opcode in column 1. (xorlw)
0491   3AFF           01514 xorlw 0xFF ; W = NOT C1
Warning[203]: Found opcode in column 1. (andwf)
0492   0538           01515 andwf temp5, w ; W = C2 AND (NOT C1)
Warning[203]: Found opcode in column 1. (movwf)
0493   00BA           01516 movwf temp7 ; temperally save
Warning[203]: Found opcode in column 1. (movf)
0494   0836           01517 movf temp3, w ; W = C0
Warning[203]: Found opcode in column 1. (xorlw)
0495   3AFF           01518 xorlw 0xFF ; W = NOT C0
Warning[203]: Found opcode in column 1. (andwf)
0496   0537           01519 andwf temp4, w ; W = C1 AND (NOT C0)
Warning[203]: Found opcode in column 1. (iorwf)
0497   043A           01520 iorwf temp7, w ; W = (C1 AND (NOT C0)) IOR (C2 AND (NOT C1))
Warning[203]: Found opcode in column 1. (btfss)
0498   1D03           01521 btfss STATUS, Z
Warning[203]: Found opcode in column 1. (bsf)
0499   1500           01522 bsf INDF, CL_ERR_BIT ; W <> 0, true
Warning[203]: Found opcode in column 1. (incf)
049A   0AB4           01523 incf temp, f
Warning[203]: Found opcode in column 1. (incf)
049B   0AB5           01524 incf temp2, f
Warning[203]: Found opcode in column 1. (movlw)
049C   3005           01525 movlw COLS
Warning[203]: Found opcode in column 1. (subwf)
049D   0235           01526 subwf temp2, w ; temp2(col#) - COLS(max col#)
Warning[203]: Found opcode in column 1. (btfss)
049E   1C03           01527 btfss STATUS, C
Warning[203]: Found opcode in column 1. (goto)
049F   2???           01528 goto calcfunc_loop ; temp2(col#) < COLS(max col#)
                      01529 ; cl_fail = cl_total - cl_pass
Warning[203]: Found opcode in column 1. (movf)
04A0   0851           01530 movf cl_pass, w
Warning[203]: Found opcode in column 1. (subwf)
04A1   0250           01531 subwf cl_total, w ; cl_total - cl_pass
Warning[203]: Found opcode in column 1. (movwf)
04A2   00D2           01532 movwf cl_fail
                      01533 ; advance two rows if "CLs in this row" >= MAXCLINROW
Warning[203]: Found opcode in column 1. (movlw)
04A3   3003           01534 movlw MAXCLINROW
Warning[203]: Found opcode in column 1. (subwf)
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04A4   0239           01535 subwf temp6, w ; "CLs in this row" - MAXCLINROW
Warning[203]: Found opcode in column 1. (btfss)
04A5   1C03           01536 btfss STATUS, C
Warning[203]: Found opcode in column 1. (retlw)
04A6   3400           01537 retlw 0x00 ; "CLs in this row" < MAXCLINROW
Warning[203]: Found opcode in column 1. (retlw)
04A7   3401           01538 retlw 0x01 ; "CLs in this row" >= MAXCLINROW
                      01539 ;*******************************************************************************
                      01540 ; "calcruntime": Runtime Calculation Function
                      01541 ; Func: Calculate the running time of the run = endtime - starttime
                      01542 ; Input: st_min, st_sec, end_min, end_sec
                      01543 ; Output: runtime
                      01544 ; Affect: W, STATUS, temp
                      01545 ;*******************************************************************************
04A8                  01546 calcruntime
04A8   084A           01547     movf st_min, w ; temp = end_min - st_min
04A9   024D           01548     subwf end_min, w
04AA   1803           01549     btfsc STATUS, C
04AB   2???           01550     goto calcruntime_next1
04AC   3E3C           01551     addlw .60 ; borrow occur, +60min
04AD                  01552 calcruntime_next1
04AD   00B4           01553     movwf temp
04AE   084B           01554     movf st_sec, w ; W = end_sec - st_sec
04AF   024E           01555     subwf end_sec, w
04B0   1803           01556     btfsc STATUS, C
04B1   2???           01557     goto calcruntime_next2
04B2   3E3C           01558     addlw .60 ; borrow occur, +60sec
04B3   03B4           01559     decf temp, f ; -1min
04B4                  01560 calcruntime_next2
04B4   08B4           01561     movf temp, f
04B5   1903           01562     btfsc STATUS, Z
04B6   2???           01563     goto calcruntime_next3 ; temp == 0, runtime = W
04B7                  01564 calcruntime_loop ; runtime = W + .60*temp
04B7   3E3C           01565     addlw .60
04B8   1803           01566     btfsc STATUS, C
04B9   2???           01567     goto calcruntime_overflow ; W>255 overflow
04BA   0BB4           01568     decfsz temp, f
04BB   2???           01569     goto calcruntime_loop
04BC                  01570 calcruntime_next3
04BC   00CF           01571     movwf runtime
04BD   0008           01572     return
04BE                  01573 calcruntime_overflow
04BE   30FF           01574     movlw 0xFF ; !!!!
04BF   00CF           01575     movwf runtime
Warning[203]: Found opcode in column 1. (return)
04C0   0008           01576 return
                      01577 ;*******************************************************************************
                      01578 ; "lightsensor": Light Sensor Read, A/D Convert, and Store Function
                      01579 ; Func: Read in analog signal from light sensor, convert it to
                      01580 ; digital, and store the most significant 8-bit result to
                      01581 ; designated address, convert voltage reading to intensity,
                      01582 ; take average of LIGHTAVGX readings,
                      01583 ; repeat COLS times for a row
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01584 ; Input: W = the staring address where the readings will be stored
                      01585 ; Output: readings store into designated bytes
                      01586 ; Affect: W, STATUS, FSR, ADCON0, ADRESH, ADRESL, temp, temp2, temp3
                      01587 ; delaytemp, delaycount, arith_temp, arith_temp2
                      01588 ;*******************************************************************************
04C1                  01589 lightsensor
04C1   0084           01590     movwf FSR
04C2   01B4           01591     clrf temp ; CHS (Channel Select) bits
                      01592     MOVLF temp2, COLS ; number of colume left
04C3   3005               M         movlw COLS
04C4   00B5               M         movwf temp2
04C5                  01593 lightsensor_loop_col
04C5   30C7           01594     movlw B'11000111' ; mask CHS bits
04C6   059F           01595     andwf ADCON0, f ; clear CHS bits
04C7   0834           01596     movf temp, w
04C8   049F           01597     iorwf ADCON0, f ; set CHS bits
                      01598     ; avergae = (X1/n) + (X2/n) + ... + (Xn/n)
                      01599     MOVLF temp3, LIGHTAVGX ; count of sample light sensor reading
04C9   3004               M         movlw LIGHTAVGX
04CA   00B6               M         movwf temp3
04CB   0180           01600     clrf INDF
04CC                  01601 lightsensor_loop_avg
04CC   2???           01602     call delay50us ; require 2Tosc + Tacq = 28us
04CD   151F           01603     bsf ADCON0, GO
04CE                  01604 lightsensor_poll ; about 40us
04CE   191F           01605     btfsc ADCON0, GO
04CF   2???           01606     goto lightsensor_poll
04D0   081E           01607     movf ADRESH, w ; the most significant 8-bit result
04D1   3AFF           01608     xorlw 0xFF ; invert result, since 5V = 0 intensity!!!!
                      01609     DIVLW LIGHTAVGX
04D2   00EA               M         movwf arith_temp
04D3   3004               M         movlw LIGHTAVGX
04D4   2???               M         call divfn
04D5   0780           01610     addwf INDF, f
04D6   0BB6           01611     decfsz temp3, f
04D7   2???           01612     goto lightsensor_loop_avg
04D8   3008           01613     movlw B'00001000'
04D9   07B4           01614     addwf temp, f ; advance CHS
04DA   0A84           01615     incf FSR, f
04DB   0BB5           01616     decfsz temp2, f
04DC   2???           01617     goto lightsensor_loop_col
Warning[203]: Found opcode in column 1. (return)
04DD   0008           01618 return
                      01619 
                      01620 ;*******************************************************************************
                      01621 ; "ledcontrol": IR LEDs Control Function
                      01622 ; Func: Turn on or off the infrared LEDs according to W
                      01623 ; Input: W = turn on or off the LED (0=off or else=on)
                      01624 ; Output: None
                      01625 ; Affect: STATUS
                      01626 ; Runtime: 3.2 us
                      01627 ;*******************************************************************************
04DE                  01628 ledcontrol
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04DE   1107           01629     bcf IRLED
04DF   3E00           01630     addlw 0x00
04E0   1D03           01631     btfss STATUS, Z
04E1   1507           01632     bsf IRLED ; if w <> 0, set IRLED
Warning[203]: Found opcode in column 1. (return)
04E2   0008           01633 return
                      01634 ;*******************************************************************************
                      01635 ; "movedown": Arm Move Down Control Function
                      01636 ; Func: Order the test arm to move down to the Closet Lights
                      01637 ; Input: None
                      01638 ; Output: None
                      01639 ; Affect: VMOTOR_C0, VMOTOR_C1
                      01640 ; Runtime: ???? us
                      01641 ;*******************************************************************************
04E3                  01642 movedown
04E3   1509           01643     bsf SMOTOR_EN ; power s_motor to hold position
04E4   1087           01644     bcf VMOTOR_C1 ; to be safe
04E5   1407           01645     bsf VMOTOR_C0
                      01646     ;movedown_poll
                      01647     ; btfsc FB_BOT
                      01648     ; goto movedown_poll
04E6   301E           01649     movlw DCDOWNDELAY
04E7   2???           01650     call delayX100msm
04E8   1007           01651     bcf VMOTOR_C0
04E9   1109           01652     bcf SMOTOR_EN
Warning[203]: Found opcode in column 1. (return)
04EA   0008           01653 return
                      01654 ;*******************************************************************************
                      01655 ; "moveup": Arm Move Up Control Function
                      01656 ; Func: Order the test arm to move up to its default position
                      01657 ; Input: None
                      01658 ; Output: None
                      01659 ; Affect: VMOTOR_C0, VMOTOR_C1
                      01660 ; Runtime: ???? us
                      01661 ;*******************************************************************************
04EB                  01662 moveup
04EB   1509           01663     bsf SMOTOR_EN ; power s_motor to hold position
04EC   1007           01664     bcf VMOTOR_C0 ; to be safe
04ED   1487           01665     bsf VMOTOR_C1
Warning[207]: Found label after column 1. (moveup_poll)
04EE                  01666     moveup_poll
04EE   1A87           01667     btfsc FB_TOP
04EF   2???           01668     goto moveup_poll
04F0   1087           01669     bcf VMOTOR_C1
04F1   1109           01670     bcf SMOTOR_EN
Warning[203]: Found opcode in column 1. (return)
04F2   0008           01671 return
                      01672 ;*******************************************************************************
                      01673 ; "advancerow": Arm Advance-to-Next-Row Control Function
                      01674 ; Func: Order the test arm to the next(determined by smotor_dir) row
                      01675 ; Input: smotor_dir = direction of stpper motor
                      01676 ; (0 = "Row 1" to "Row 4"; 1 = "Row 4" to "Row 1")
                      01677 ; Output: None
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01678 ; Affect: W, STATUS, temp, SMOTOR_EN, SMOTOR_S0, SMOTOR_S1, SMOTOR_S2,
                      01679 ; SMOTOR_S3, delaytemp, delaycount, delaytemp2, delaycount2,
                      01680 ; delaytemp3, delaycount3
                      01681 ;*******************************************************************************
04F3                  01682 advancerow
04F3   1088           01683     bcf SMOTOR_S1 ; state init
04F4   1489           01684     bsf SMOTOR_S3
04F5   1509           01685     bsf SMOTOR_EN ; start motor
04F6   301C           01686     movlw SMOTOR_STEPS
04F7   00B4           01687     movwf temp
04F8   3006           01688     movlw SMOTOR_SPD_F ; note: w must keep its value until very end
04F9   08E7           01689     movf smotor_dir, f
04FA   1D03           01690     btfss STATUS, Z
04FB   2???           01691     goto advancerow_backwardloop
Warning[207]: Found label after column 1. (advancerow_forwardloop)
04FC                  01692     advancerow_forwardloop ; smotor_dir == 0, "Row 1" to "Row 4"
04FC   1008           01693     bcf SMOTOR_S0
04FD   1409           01694     bsf SMOTOR_S2
04FE   1F87           01695     btfss FB_ROW4
04FF   2???           01696     goto advancerow_end
0500   2???           01697     call delayX5msm
0501   1089           01698     bcf SMOTOR_S3
0502   1488           01699     bsf SMOTOR_S1
0503   1F87           01700     btfss FB_ROW4
0504   2???           01701     goto advancerow_end
0505   2???           01702     call delayX5msm
0506   1009           01703     bcf SMOTOR_S2
0507   1408           01704     bsf SMOTOR_S0
0508   1F87           01705     btfss FB_ROW4
0509   2???           01706     goto advancerow_end
050A   2???           01707     call delayX5msm
050B   1088           01708     bcf SMOTOR_S1
050C   1489           01709     bsf SMOTOR_S3
050D   1F87           01710     btfss FB_ROW4
050E   2???           01711     goto advancerow_end
050F   2???           01712     call delayX5msm
0510   0BB4           01713     decfsz temp, f
0511   2???           01714     goto advancerow_forwardloop
0512   2???           01715     goto advancerow_end
Warning[207]: Found label after column 1. (advancerow_backwardloop)
0513                  01716     advancerow_backwardloop ; smotor_dir <> 0, "Row 4" to "Row 1"
0513   1089           01717     bcf SMOTOR_S3
0514   1488           01718     bsf SMOTOR_S1
0515   2???           01719     call delayX5msm
0516   1008           01720     bcf SMOTOR_S0
0517   1409           01721     bsf SMOTOR_S2
0518   2???           01722     call delayX5msm
0519   1088           01723     bcf SMOTOR_S1
051A   1489           01724     bsf SMOTOR_S3
051B   2???           01725     call delayX5msm
051C   1009           01726     bcf SMOTOR_S2
051D   1408           01727     bsf SMOTOR_S0
051E   2???           01728     call delayX5msm
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

051F   0BB4           01729     decfsz temp, f
0520   2???           01730     goto advancerow_backwardloop
Warning[207]: Found label after column 1. (advancerow_end)
0521                  01731     advancerow_end
0521   1109           01732     bcf SMOTOR_EN
Warning[203]: Found opcode in column 1. (return)
0522   0008           01733 return
                      01734 ;*******************************************************************************
                      01735 ; "writelog": Log Write Function
                      01736 ; Func: Write the result of current run to log
                      01737 ; Input: st_year, st_month, st_day, st_hour, st_min, st_sec,
                      01738 ; runtime, layout[], log_total, log_next
                      01739 ; Output: W = current log index, log_total, log_next, Log Entry
                      01740 ; Affect: STATUS, FSR, temp, temp2, temp3, temp4,
                      01741 ; arith_temp, arith_temp2
                      01742 ;*******************************************************************************
0523                  01743 writelog
                      01744         ; starting address (indirect) offset = (log_next / MAXLOGBANK) * 0x80 + 0x10
0523   0869           01745         movf log_next, w
                      01746         DIVLW MAXLOGBANK
0524   00EA               M         movwf arith_temp
0525   3006               M         movlw MAXLOGBANK
0526   2???               M         call divfn
                      01747         MULLW 0x80
0527   00EA               M         movwf arith_temp
0528   3080               M         movlw 0x80
0529   2???               M         call mulfn
052A   3E10           01748         addlw 0x10
052B   00B4           01749         movwf temp ; save in temp
                      01750         ; starting address (indirect) = (log_next MOD MAXLOGBANK)*LOGLENGTH + offset
052C   0869           01751         movf log_next, w
                      01752         MODLW MAXLOGBANK ; W = log_next mod MAXLOGBANK
052D   00EA               M         movwf arith_temp
052E   3006               M         movlw MAXLOGBANK
052F   2???               M         call divfn
0530   086A               M         movf arith_temp, w
                      01753         MULLW LOGLENGTH
0531   00EA               M         movwf arith_temp
0532   3010               M         movlw LOGLENGTH
0533   2???               M         call mulfn
0534   0734           01754         addwf temp, w
                      01755         ; store easy-access variables
0535   1783           01756         bsf STATUS, IRP ; BANK2&3 indirect access
0536   0084           01757         movwf FSR ; log addr + 0
                      01758         MOVFF INDF, runtime
0537   084F               M         movf runtime, w
0538   0080               M         movwf INDF
0539   0A84           01759         incf FSR, f ; log addr + 1
053A   0E46           01760         swapf st_year, w
053B   0747           01761         addwf st_month, w
053C   0080           01762         movwf INDF
053D   0A84           01763         incf FSR, f ; log addr + 2
                      01764         MOVFF INDF, st_day
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

053E   0848               M         movf st_day, w
053F   0080               M         movwf INDF
0540   0A84           01765         incf FSR, f ; log addr + 3
                      01766         MOVFF INDF, st_hour
0541   0849               M         movf st_hour, w
0542   0080               M         movwf INDF
0543   0A84           01767         incf FSR, f ; log addr + 4
                      01768         MOVFF INDF, st_min
0544   084A               M         movf st_min, w
0545   0080               M         movwf INDF
0546   0A84           01769         incf FSR, f ; log addr + 5
                      01770         MOVFF INDF, st_sec
0547   084B               M         movf st_sec, w
0548   0080               M         movwf INDF
0549   0A84           01771         incf FSR, f ; log addr + 6
                      01772         ; store layout
                      01773         MOVFF temp, FSR ; the address of log entry (start at + 6)
054A   0804               M         movf FSR,  w
054B   00B4               M         movwf temp
                      01774         MOVLF temp2, layout ; address of layout bytes
054C   3053               M         movlw layout
054D   00B5               M         movwf temp2
                      01775         MOVLF temp3, MAXPOS ; position counter
054E   3014               M         movlw MAXPOS
054F   00B6               M         movwf temp3
0550                  01776 writelog_layoutloop ; copy layout bytes in pairs
                      01777         ; write upper ribble
                      01778         MOVFF FSR, temp2 ; get first layout byte
0550   0835               M         movf temp2, w
0551   0084               M         movwf FSR
0552   1383           01779         bcf STATUS, IRP ; BANK0&1 indirect access
0553   0E00           01780         swapf INDF, w
0554   00B7           01781         movwf temp4 ; temp4 hold the swaped layout byte temperally
                      01782         MOVFF FSR, temp ; log entry
0555   0834               M         movf temp, w
0556   0084               M         movwf FSR
0557   1783           01783         bsf STATUS, IRP ; BANK2&3 indirect access
                      01784         MOVFF INDF, temp4
0558   0837               M         movf temp4, w
0559   0080               M         movwf INDF
055A   0AB5           01785         incf temp2, f
055B   03B6           01786         decf temp3, f
055C   1903           01787         btfsc STATUS, Z
055D   2???           01788         goto writelog_layoutnext
                      01789         ; write lower ribble
                      01790         MOVFF FSR, temp2 ; get second layout byte
055E   0835               M         movf temp2, w
055F   0084               M         movwf FSR
0560   1383           01791         bcf STATUS, IRP ; BANK0&1 indirect access
                      01792         MOVFF temp4, INDF ; temp4 hold the layout byte temperally
0561   0800               M         movf INDF, w
0562   00B7               M         movwf temp4
                      01793         MOVFF FSR, temp ; log entry
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0563   0834               M         movf temp, w
0564   0084               M         movwf FSR
0565   1783           01794         bsf STATUS, IRP ; BANK2&3 indirect access
0566   0837           01795         movf temp4, w
0567   0780           01796         addwf INDF, f
0568   0AB5           01797         incf temp2, f
0569   0AB4           01798         incf temp, f
056A   0BB6           01799         decfsz temp3, f
056B   2???           01800         goto writelog_layoutloop
056C                  01801 writelog_layoutnext
                      01802         ; calculate new log_next = (log_next + 1) MOD MAXLOG
                      01803         MOVFF temp, log_next ; save current log index in temp
056C   0869               M         movf log_next, w
056D   00B4               M         movwf temp
056E   0AE9           01804         incf log_next, f
056F   300C           01805         movlw MAXLOG ; test if max log reached
0570   0269           01806         subwf log_next, w ; log_next + 1 - MAXLOG
0571   1C03           01807         btfss STATUS, C
0572   3E0C           01808         addlw MAXLOG ; log_next + 1 < MAXLOG, add MAXLOG back
0573   00E9           01809         movwf log_next ; log_next = (log_next + 1) MOD MAXLOG
                      01810         ; calculate new log_total
0574   300C           01811         movlw MAXLOG
0575   0268           01812         subwf log_total, w ; log_total - MAXLOG
0576   1C03           01813         btfss STATUS, C
0577   0AE8           01814         incf log_total, f ; log_total < MAXLOG, increase total number
0578   0834           01815         movf temp, w ; resume current log entry index
0579   1383           01816         bcf STATUS, IRP ; back to BANK0&1 indirect access
057A   0008           01817         return
                      01818 ;*******************************************************************************
                      01819 ; "readlog": Log Read Function
                      01820 ; Func: Read the log of specified run
                      01821 ; Input: W = index of wanted report
                      01822 ; Output: st_year, st_month, st_day, st_hour, st_min, st_sec,
                      01823 ; end_hour, end_min, end_sec, runtime, cl_total, cl_pass,
                      01824 ; cl_fail, layout[]
                      01825 ; Affect: W, STATUS, FSR, temp, temp2, temp3, temp4,
                      01826 ; arith_temp, arith_temp2
                      01827 ;*******************************************************************************
057B                  01828 readlog
057B   00B5           01829         movwf temp2 ; save the index in temp2
057C   01D0           01830         clrf cl_total
057D   01D1           01831         clrf cl_pass
                      01832         ; starting address (indirect) offset = (index / MAXLOGBANK) * 0x80 + 0x10
                      01833         DIVLW MAXLOGBANK
057E   00EA               M         movwf arith_temp
057F   3006               M         movlw MAXLOGBANK
0580   2???               M         call divfn
                      01834         MULLW 0x80
0581   00EA               M         movwf arith_temp
0582   3080               M         movlw 0x80
0583   2???               M         call mulfn
0584   3E10           01835         addlw 0x10
0585   00B4           01836         movwf temp ; save in temp
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01837         ; starting address (indirect) = (index MOD MAXLOGBANK)*LOGLENGTH + offset
0586   0835           01838         movf temp2, w ; resume index
                      01839         MODLW MAXLOGBANK ; W = index mod MAXLOGBANK
0587   00EA               M         movwf arith_temp
0588   3006               M         movlw MAXLOGBANK
0589   2???               M         call divfn
058A   086A               M         movf arith_temp, w
                      01840         MULLW LOGLENGTH
058B   00EA               M         movwf arith_temp
058C   3010               M         movlw LOGLENGTH
058D   2???               M         call mulfn
058E   0734           01841         addwf temp, w
                      01842         ; read easy-access variables
058F   1783           01843         bsf STATUS, IRP ; BANK2&3 indirect access
0590   0084           01844         movwf FSR ; log addr + 0
                      01845         MOVFF runtime, INDF
0591   0800               M         movf INDF, w
0592   00CF               M         movwf runtime
0593   0A84           01846         incf FSR, f ; log addr + 1
0594   0E00           01847         swapf INDF, w ; swap upper 4 bits and lower 4 bits
0595   390F           01848         andlw 0x0F ; mask the lower 4 bits only
0596   00C6           01849         movwf st_year
0597   0800           01850         movf INDF, w
0598   390F           01851         andlw 0x0F ; mask the lower 4 bits only
0599   00C7           01852         movwf st_month
059A   0A84           01853         incf FSR, f ; log addr + 2
                      01854         MOVFF st_day, INDF
059B   0800               M         movf INDF, w
059C   00C8               M         movwf st_day
059D   0A84           01855         incf FSR, f ; log addr + 3
                      01856         MOVFF st_hour, INDF
059E   0800               M         movf INDF, w
059F   00C9               M         movwf st_hour
05A0   0A84           01857         incf FSR, f ; log addr + 4
                      01858         MOVFF st_min, INDF
05A1   0800               M         movf INDF, w
05A2   00CA               M         movwf st_min
05A3   0A84           01859         incf FSR, f ; log addr + 5
                      01860         MOVFF st_sec, INDF
05A4   0800               M         movf INDF, w
05A5   00CB               M         movwf st_sec
05A6   0A84           01861         incf FSR, f ; log addr + 6
                      01862          ; read layout[], cl_total and cl_pass
                      01863         MOVFF temp, FSR ; the address of log entry (start at + 6)
05A7   0804               M         movf FSR,  w
05A8   00B4               M         movwf temp
                      01864         MOVLF temp2, layout ; address of layout bytes
05A9   3053               M         movlw layout
05AA   00B5               M         movwf temp2
                      01865         MOVLF temp3, MAXPOS ; position counter
05AB   3014               M         movlw MAXPOS
05AC   00B6               M         movwf temp3
05AD                  01866 readlog_layoutloop ; read layout bytes in pairs
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01867         ; read upper ribble
                      01868         MOVFF FSR, temp ; log entry
05AD   0834               M         movf temp, w
05AE   0084               M         movwf FSR
05AF   1783           01869         bsf STATUS, IRP ; BANK2&3 indirect access
05B0   0E00           01870         swapf INDF, w
05B1   390F           01871         andlw 0x0F ; mask the lower 4 bits only (not 3 bits!!!!)
05B2   00B7           01872         movwf temp4 ; temp4 hold the swaped layout byte temperally
                      01873         MOVFF FSR, temp2 ; get first layout byte
05B3   0835               M         movf temp2, w
05B4   0084               M         movwf FSR
05B5   1383           01874         bcf STATUS, IRP ; BANK0&1 indirect access
                      01875         MOVFF INDF, temp4
05B6   0837               M         movf temp4, w
05B7   0080               M         movwf INDF
05B8   1800           01876         btfsc INDF, CL_POS_BIT
05B9   0AD0           01877         incf cl_total, f
05BA   1880           01878         btfsc INDF, CL_FN_BIT
05BB   0AD1           01879         incf cl_pass, f
05BC   0AB5           01880         incf temp2, f
05BD   03B6           01881         decf temp3, f
05BE   1903           01882         btfsc STATUS, Z
05BF   2???           01883         goto readlog_layoutnext
                      01884         ; read lower ribble
                      01885         MOVFF FSR, temp ; log entry
05C0   0834               M         movf temp, w
05C1   0084               M         movwf FSR
05C2   1783           01886         bsf STATUS, IRP ; BANK2&3 indirect access
05C3   0800           01887         movf INDF, w
05C4   390F           01888         andlw 0x0F ; mask the lower 4 bits only (not 3 bits!!!!)
05C5   00B7           01889         movwf temp4 ; temp4 hold the layout byte temperally
                      01890         MOVFF FSR, temp2 ; get second layout byte
05C6   0835               M         movf temp2, w
05C7   0084               M         movwf FSR
05C8   1383           01891         bcf STATUS, IRP ; BANK0&1 indirect access
                      01892         MOVFF INDF, temp4
05C9   0837               M         movf temp4, w
05CA   0080               M         movwf INDF
05CB   1800           01893         btfsc INDF, CL_POS_BIT
05CC   0AD0           01894         incf cl_total, f
05CD   1880           01895         btfsc INDF, CL_FN_BIT
05CE   0AD1           01896         incf cl_pass, f
05CF   0AB5           01897         incf temp2, f
05D0   0AB4           01898         incf temp, f
05D1   0BB6           01899         decfsz temp3, f
05D2   2???           01900         goto readlog_layoutloop
05D3                  01901 readlog_layoutnext
                      01902         ; calculate end time
                      01903         MOVFF end_hour, st_hour
05D3   0849               M         movf st_hour, w
05D4   00CC               M         movwf end_hour
                      01904         MOVFF end_min, st_min
05D5   084A               M         movf st_min, w
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05D6   00CD               M         movwf end_min
                      01905         MOVFF end_sec, st_sec
05D7   084B               M         movf st_sec, w
05D8   00CE               M         movwf end_sec
05D9   084F           01906         movf runtime, w
                      01907         DIVLW .60
05DA   00EA               M         movwf arith_temp
05DB   303C               M         movlw .60
05DC   2???               M         call divfn
05DD   07CD           01908         addwf end_min, f ; end_min = st_min + runtime / .60
05DE   084F           01909         movf runtime, w
                      01910         MODLW .60
05DF   00EA               M         movwf arith_temp
05E0   303C               M         movlw .60
05E1   2???               M         call divfn
05E2   086A               M         movf arith_temp, w
05E3   07CE           01911         addwf end_sec, f ; end_sec = st_sec + runtime MOD .60
05E4   303C           01912         movlw .60 ; test if 60s
05E5   024E           01913         subwf end_sec, w ; w = end_sec - 60
05E6   1C03           01914         btfss STATUS, C
05E7   2???           01915         goto readlog_endsec_next; end_sec < 60, end_sec OK
05E8   303C           01916         movlw .60 ; end_sec >= 60, +1min, -60s
05E9   02CE           01917         subwf end_sec, f
05EA   0ACD           01918         incf end_min, f
05EB                  01919 readlog_endsec_next
05EB   303C           01920         movlw .60 ; test if 60min
05EC   024D           01921         subwf end_min, w
05ED   1C03           01922         btfss STATUS, C
05EE   2???           01923         goto readlog_next ; end_min < 60, end_min OK, end_hour should OK
05EF   303C           01924         movlw .60 ; end_min >= 60, +1h, -60min
05F0   02CD           01925         subwf end_min, f
05F1   0ACC           01926         incf end_hour, f
05F2   3018           01927         movlw .24 ; test if 24h
05F3   024C           01928         subwf end_hour, w
05F4   1C03           01929         btfss STATUS, C
05F5   2???           01930         goto readlog_next
05F6   3018           01931         movlw .24 ; >24h, -24h
05F7   02CC           01932         subwf end_hour, f
05F8                  01933 readlog_next
                      01934         ; cl_fail = cl_total - cl_pass
05F8   0851           01935         movf cl_pass, w
05F9   0250           01936         subwf cl_total, w
05FA   00D2           01937         movwf cl_fail
05FB   1383           01938         bcf STATUS, IRP ; back to BANK0&1 indirect access
05FC   0008           01939         return
                      01940 ;*******************************************************************************
                      01941 ; "addsec": Add One Second Function
                      01942 ; Func: Add one second to the second byte of a timer,!!!!!!!!!!!!!!
                      01943 ; increase minute and hour bytes if necessary,
                      01944 ; carry out if day increment occur
                      01945 ; Input: W = Address of the second byte, min byte and hour byte
                      01946 ; should be at address W-1 and W-2, respectively
                      01947 ; Output: set STATUS C for day carry out
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01948 ; Affect: W, FSR
                      01949 ; Runtime: 3.6us/6.4us/9.2us/10.0us
                      01950 ;*******************************************************************************
05FD                  01951 addsec
05FD   0084           01952         movwf FSR
05FE   0A80           01953         incf INDF, f ; +1sec
05FF   303C           01954         movlw .60
0600   0200           01955         subwf INDF, w ; W = INDF - 60, test if 60s
0601   1C03           01956         btfss STATUS, C
0602   0008           01957         return ; INDF < 60, C==0, function done
0603   0180           01958         clrf INDF ; >=60s, clear sec
0604   0384           01959         decf FSR, f ; now FSR has address of min byte
0605   0A80           01960         incf INDF, f ; +1min
0606   303C           01961         movlw .60
0607   0200           01962         subwf INDF, w ; W = INDF - 60, test if 60min
0608   1C03           01963         btfss STATUS, C
0609   0008           01964         return ; INDF < 60, C==0, function done
060A   0180           01965         clrf INDF ; >=60min, clear min
060B   0384           01966         decf FSR, f ; now FSR has address of hour byte
060C   0A80           01967         incf INDF, f ; +1hour
060D   3018           01968         movlw .24
060E   0200           01969         subwf INDF, w ; W = INDF - 24, test if 24hour
060F   1C03           01970         btfss STATUS, C
0610   0008           01971         return ; INDF < 24, C==0, function done
0611   0180           01972         clrf INDF ; >=24h, clear hour
0612   0008           01973         return ; C has been set
                      01974 ;*******************************************************************************
                      01975 ; "addday": Add One Day Function
                      01976 ; Func: Add one day to the day byte of a timer,
                      01977 ; increase month and year bytes if necessary, !!!!unfinish
                      01978 ; Input: W = Address of the day byte, month byte and year byte
                      01979 ; should be at address W-1 and W-2, respectively
                      01980 ; Output: None
                      01981 ; Affect: W, STATUS, FSR
                      01982 ; Runtime: 3.6us/6.4us/8.0us
                      01983 ;*******************************************************************************
0613                  01984 addday
0613   0084           01985         movwf FSR
0614   0A80           01986         incf INDF, f ; +1day
0615   301F           01987         movlw .31 ; assume 1 month always= 30 days !!!!
0616   0200           01988         subwf INDF, w ; W = INDF - 31, test if over 30days
0617   1C03           01989         btfss STATUS, C
0618   0008           01990         return ; INDF < 31, C==0, function done
0619   0180           01991         clrf INDF ; >=31s, clear day
Message[305]: Using default destination of 1 (file).
061A   0A80           01992         incf INDF ; day default at 1
061B   0384           01993         decf FSR, f ; now FSR has address of month byte
061C   0A80           01994         incf INDF, f ; +1month
061D   300D           01995         movlw .13
061E   0200           01996         subwf INDF, w ; W = INDF - 13, test if over 12month
061F   1C03           01997         btfss STATUS, C
0620   0008           01998         return ; INDF < 13, C==0, function done
0621   0180           01999         clrf INDF ; >=13month, clear month
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[305]: Using default destination of 1 (file).
0622   0A80           02000         incf INDF ; month default at 1
0623   0384           02001         decf FSR, f ; now FSR has address of year byte
0624   0A80           02002         incf INDF, f ; +1year
0625   0008           02003         return
                      02004 ;*******************************************************************************
                      02005 ; "divfn": Byte Integer Division Function
                      02006 ; Func: Devide temp by W and store result in W, not efficient
                      02007 ; Input: Temp = Dividend, W = Dividor
                      02008 ; Output: W = Quotient, arith_temp = reminder,
                      02009 ; set STATUS Z for zero quotient, C for error
                      02010 ; Affect: arith_temp2
                      02011 ;*******************************************************************************
0626                  02012 divfn
0626   3E00           02013         addlw 0x00
0627   1403           02014         bsf STATUS, C ; set carry in case of error
0628   1903           02015         btfsc STATUS, Z ; if zero
0629   0008           02016         return ; return (error C,Z)
062A   01EB           02017         clrf arith_temp2
062B                  02018 divfn_loop
062B   02EA           02019         subwf arith_temp, f
062C   1C03           02020         btfss STATUS, C
062D   2???           02021         goto divfn_next
062E   0AEB           02022         incf arith_temp2, f
062F   2???           02023         goto divfn_loop
0630                  02024 divfn_next
0630   07EA           02025         addwf arith_temp, f
0631   086B           02026         movf arith_temp2, w
0632   0008           02027         return
                      02028 ;*******************************************************************************
                      02029 ; "mulfn": Byte Integer Multiplication Function
                      02030 ; Func: Multiple W by temp and return result in W, not efficient
                      02031 ; Input: Temp, W
                      02032 ; Output: W = Result, set STATUS Z for zero, C for overflow
                      02033 ; Affect: arith_temp, arith_temp2
                      02034 ;*******************************************************************************
0633                  02035 mulfn
0633   1003           02036         bcf STATUS, C ; clr C bit for arith_temp == 0
0634   00EB           02037         movwf arith_temp2 ; store W in arith_temp2
0635   3000           02038         movlw 0x00 ; W = 0 + arith_tempp * arith_temp2
0636   08EA           02039         movf arith_temp, f
0637   1903           02040         btfsc STATUS, Z
0638   0008           02041         return ; arith_temp == 0, return 0
0639                  02042 mulfn_loop
0639   076B           02043         addwf arith_temp2, w
063A   1803           02044         btfsc STATUS, C
063B   2???           02045         goto mulfn_overflow ; W>255 overflow
063C   0BEA           02046         decfsz arith_temp, f
063D   2???           02047         goto mulfn_loop
063E                  02048 mulfn_overflow
063E   0008           02049         return
3F72                  02050         end
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADCtest_loop                      000000BB
ADCtest_simpledelay               000000CB
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BANK0                             
BANK00                            
BANK1                             
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CALC_POS                          
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

CKP                               00000004
CL_ERR_BIT                        2
CL_FN_BIT                         1
CL_POS_BIT                        0
COLS                              00000005
COPY_DEC1                         
COPY_DEC2                         
COPY_DEC3                         
COPY_LAYOUT                       
COPY_STRING                       
CREN                              00000004
CSRC                              00000007
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DCDOWNDELAY                       0000001E
DEBUG                             
DIVLW                             
D_A                               00000005
D_NOT_A                           00000005
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FALSE                             0x00
FB_ROW4                           PORTC, 7
FB_TOP                            PORTC, 5
FERR                              00000002
FSR                               00000004
FSR_temp                          00000002
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INITVAL_ADCON0                    B'10000001'
INITVAL_ADCON1                    B'00000010'
INITVAL_OPTREG                    B'10000101'
INITVAL_TRISA                     B'00101111'
INITVAL_TRISB                     B'11110010'
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

INITVAL_TRISC                     B'10100000'
INITVAL_TRISD                     B'00000000'
INITVAL_TRISE                     B'00000000'
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRLED                             PORTC, 2
IRLED_OFF                         
IRLED_ON                          
IRP                               00000007
KEYPAD_DA                         PORTB, 1
LCD_E                             PORTD, 3
LCD_PORT                          PORTD
LCD_RS                            PORTD, 2
LCD_clear                         00000000
LCD_init                          00000000
LCD_line2                         00000000
LCD_out                           00000000
LCD_wt                            00000000
LCDline                           00000023
LIGHTAVGX                         00000004
LOGLENGTH                         00000010
MAXCLINROW                        00000003
MAXLINE                           00000009
MAXLOG                            0000000C
MAXLOGBANK                        00000006
MAXPOS                            00000014
ML_finish                         00000283
ML_finish_0                       00000349
ML_finish_1                       0000034C
ML_hdinit                         00000240
ML_hdinit_0                       0000028E
ML_hdinit_1                       00000291
ML_noreport                       00000259
ML_noreport_0                     000002BE
ML_noreport_1                     000002C1
ML_realtime                       0000024E
ML_realtime_0                     00000294
ML_realtime_1                     000002AA
ML_report                         00000264
ML_report_0                       000002C4
ML_report_1                       000002DF
ML_report_10                      0000033E
ML_report_2                       000002F5
ML_report_3                       0000030B
ML_report_4                       00000315
ML_report_5                       0000031D
ML_report_6                       0000032C
ML_report_7                       0000032F
ML_report_8                       00000334
ML_report_9                       00000339
ML_rtcinit                        0000024B
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

ML_run                            00000278
ML_run_0                          00000343
ML_run_1                          00000346
MODLW                             
MOVFF                             
MOVLF                             
MULLW                             
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NULL                              0x00
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHASE_FINISH                      6
PHASE_HDINIT                      0
PHASE_NOREPORT                    3
PHASE_REALTIME                    2
PHASE_REPORT                      4
PHASE_RTCINIT                     1
PHASE_RUN                         5
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PRINT_DOT                         
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 63


SYMBOL TABLE
  LABEL                             VALUE 

ROWS                              00000004
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMOTOR_EN                         PORTE, 2
SMOTOR_S0                         PORTD, 0
SMOTOR_S1                         PORTD, 1
SMOTOR_S2                         PORTE, 0
SMOTOR_S3                         PORTE, 1
SMOTOR_SPD_F                      00000006
SMOTOR_STEPS                      0000001C
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STOP_BUT                          0x0B
STORE_LIGHT                       
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TABLE                             
THD_BG                            00000005
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 64


SYMBOL TABLE
  LABEL                             VALUE 

THD_CL3LED                        00000050
THD_IRLED                         0000001C
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 65


SYMBOL TABLE
  LABEL                             VALUE 

TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TRUE                              0xFF
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
VMOTOR_C0                         PORTC, 0
VMOTOR_C1                         PORTC, 1
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 66


SYMBOL TABLE
  LABEL                             VALUE 

_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
__DEBUG                           
__MPLAB_DEBUGGER_PICKIT2          1
addday                            00000613
addsec                            000005FD
advancerow                        000004F3
advancerow_backwardloop           00000513
advancerow_end                    00000521
advancerow_forwardloop            000004FC
analog_poll                       000000BD
analogtest                        000000BB
analogtest2                       00000043
arg                               0000003B
arg2                              0000003C
arith_temp                        0000006A
arith_temp2                       0000006B
calcfunc                          0000044F
calcfunc_C1false                  00000465
calcfunc_C1next                   00000466
calcfunc_C2false                  00000476
calcfunc_C2next                   00000477
calcfunc_FNfalse                  00000490
calcfunc_POSfalse                 00000483
calcfunc_loop                     00000456
calcpos                           00000438
calcpos_loop                      0000043A
calcpos_next                      00000447
calcruntime                       000004A8
calcruntime_loop                  000004B7
calcruntime_next1                 000004AD
calcruntime_next2                 000004B4
calcruntime_next3                 000004BC
calcruntime_overflow              000004BE
char_keynumber                    000000D9
char_layout                       000000D1
char_slash                        000000E9
cl_fail                           00000052
cl_pass                           00000051
cl_total                          00000050
copydec                           00000380
copydec_copyhundreds              0000038B
copydec_copytens                  0000039F
copydec_ending                    000003AA
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 67


SYMBOL TABLE
  LABEL                             VALUE 

copydec_ones                      000003A2
copydec_tens                      00000390
copylayout                        00000360
copylayout_charloop               0000036D
copylayout_next                   00000368
copylayout_startloop              00000365
copystring                        00000356
copystring_loop                   00000357
delay100ms                        00000000
delay1sl                          00000000
delay50us                         00000000
delay5ms                          00000000
delayX100msm                      00000000
delayX5msm                        00000000
display                           0000021F
divfn                             00000626
divfn_loop                        0000062B
divfn_next                        00000630
end_hour                          0000004C
end_min                           0000004D
end_sec                           0000004E
init_pic                          000000CF
keypad_timeout                    00000219
keyresp                           000001A1
keyresp_ma                        0000000F
keyresp_next                      000001BB
kma0                              0000002C
kma1                              00000030
kma2                              00000034
kma3                              00000029
kma4                              00000036
kma5                              00000038
kma6                              0000003A
kma7                              00000029
kma8                              0000003D
kma9                              00000040
kmaA                              00000029
kmaB                              00000029
kmaC                              00000029
kmaD                              00000029
kmaE                              00000029
kmaF                              00000029
kma_next                          00000029
kma_release                       00000029
kp_to_nonewsec                    0000021E
layout                            00000053
ledcontrol                        000004DE
light_bg                          000000B0
light_cl                          000000BA
light_off                         000000BF
light_pos                         000000B5
lightsensor                       000004C1
lightsensor_loop_avg              000004CC
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 68


SYMBOL TABLE
  LABEL                             VALUE 

lightsensor_loop_col              000004C5
lightsensor_poll                  000004CE
line_num                          00000022
literal                           00000005
literal_addr                      0000003D
log_next                          00000069
log_total                         00000068
mac_test                          00000000
mac_test_loop                     00000009
makeline                          0000022D
movedown                          000004E3
moveup                            000004EB
moveup_poll                       000004EE
mulfn                             00000633
mulfn_loop                        00000639
mulfn_overflow                    0000063E
newsec                            0000006C
phase                             00000020
readlog                           0000057B
readlog_endsec_next               000005EB
readlog_layoutloop                000005AD
readlog_layoutnext                000005D3
readlog_next                      000005F8
realtime                          000001BF
report                            000001C3
report_last                       000001CA
report_next                       000001E0
report_num                        00000021
reset_hardware                    000000EF
reset_realtime                    000000FF
reset_rt_hms                      0000015E
reset_rt_hms0                     0000017A
reset_rt_hms1                     00000181
reset_rt_hms2                     00000185
reset_rt_hms3                     0000018C
reset_rt_hms4                     00000190
reset_rt_hms5                     00000197
reset_rt_hmsrl                    0000019A
reset_rt_ymd                      00000114
reset_rt_ymd0                     00000130
reset_rt_ymd1                     00000137
reset_rt_ymd2                     0000013B
reset_rt_ymd3                     00000142
reset_rt_ymd4                     00000146
reset_rt_ymd5                     0000014D
reset_rt_ymdrl                    00000150
reset_software                    000000E6
result_addr                       0000003F
rowleft                           0000003E
rt_counter                        00000003
rt_day                            00000042
rt_hour                           00000043
rt_min                            00000044
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 69


SYMBOL TABLE
  LABEL                             VALUE 

rt_month                          00000041
rt_sec                            00000045
rt_year                           00000040
run                               000003B5
run_clearlayoutloop               000003C5
run_end                           0000042B
run_init_smotornext               000003D1
run_loop                          000003E0
run_nextRAM_next                  00000411
run_nextRAM_next2                 00000421
run_nextRAM_reverse               00000410
run_nextRAM_reverse2              00000420
run_noextrarow                    0000041A
runtime                           0000004F
scroll_down                       000001FC
scroll_up                         000001F4
smotor_dir                        00000067
st_day                            00000048
st_hour                           00000049
st_min                            0000004A
st_month                          00000047
st_sec                            0000004B
st_year                           00000046
startrun                          00000205
status_temp                       00000001
stoprun                           00000218
str_colon                         00000046
str_dash                          00000044
str_dot                           000000B0
str_emerstop                      000000C1
str_enterhms                      00000033
str_enterymd                      00000023
str_entry                         00000048
str_fail                          00000080
str_finish                        0000005C
str_init                          00000009
str_insp_fin                      000000B2
str_layout                        00000088
str_layout1                       00000090
str_layout2                       00000098
str_layout3                       0000009C
str_layout4                       000000A0
str_noreport                      00000019
str_null                          000000D0
str_pass                          00000079
str_running                       000000A8
str_runtime                       00000065
str_s                             0000006F
str_start                         00000054
str_total                         00000071
str_yearhead                      00000041
table_temp                        00000004
temp                              00000034
MPASM  5.48                          TEST.ASM   2-6-2013  2:42:55         PAGE 70


SYMBOL TABLE
  LABEL                             VALUE 

temp2                             00000035
temp3                             00000036
temp4                             00000037
temp5                             00000038
temp6                             00000039
temp7                             0000003A
unused_key                        000001BB
w_temp                            00000000
wait_release                      000001BB
writeline                         000003AD
writeline_loop                    000003AF
writelog                          00000523
writelog_layoutloop               00000550
writelog_layoutnext               0000056C

Errors   :     0
Warnings :   127 reported,     0 suppressed
Messages :     9 reported,     0 suppressed

